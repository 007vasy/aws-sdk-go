// Package support provides a client for AWS Support.
package support

import (
	"fmt"
	"net/http"
	"time"

	"github.com/stripe/aws-go/aws"
)

// Support is a client for AWS Support.
type Support struct {
	client *aws.JSONClient
}

// New returns a new Support client.
func New(key, secret, region string, client *http.Client) *Support {
	if client == nil {
		client = http.DefaultClient
	}

	return &Support{
		client: &aws.JSONClient{
			Client:       client,
			Region:       region,
			Endpoint:     fmt.Sprintf("https://support.%s.amazonaws.com", region),
			Prefix:       "support",
			Key:          key,
			Secret:       secret,
			JSONVersion:  "1.1",
			TargetPrefix: "AWSSupport_20130415",
		},
	}
}

// AddAttachmentsToSet adds one or more attachments to an attachment set.
// If an AttachmentSetId is not specified, a new attachment set is created,
// and the ID of the set is returned in the response. If an AttachmentSetId
// is specified, the attachments are added to the specified set, if it
// exists. An attachment set is a temporary container for attachments that
// are to be added to a case or case communication. The set is available
// for one hour after it is created; the ExpiryTime returned in the
// response indicates when the set expires. The maximum number of
// attachments in a set is 3, and the maximum size of any attachment in the
// set is 5
func (c *Support) AddAttachmentsToSet(req AddAttachmentsToSetRequest) (resp *AddAttachmentsToSetResponse, err error) {
	resp = &AddAttachmentsToSetResponse{}
	err = c.client.Do("AddAttachmentsToSet", "POST", "/", req, resp)
	return
}

// AddCommunicationToCase adds additional customer communication to an AWS
// Support case. You use the CaseId value to identify the case to add
// communication to. You can list a set of email addresses to copy on the
// communication using the CcEmailAddresses value. The CommunicationBody
// value contains the text of the communication. The response indicates the
// success or failure of the request. This operation implements a subset of
// the features of the AWS Support Center.
func (c *Support) AddCommunicationToCase(req AddCommunicationToCaseRequest) (resp *AddCommunicationToCaseResponse, err error) {
	resp = &AddCommunicationToCaseResponse{}
	err = c.client.Do("AddCommunicationToCase", "POST", "/", req, resp)
	return
}

// CreateCase creates a new case in the AWS Support Center. This operation
// is modeled on the behavior of the AWS Support Center Create Case page.
// Its parameters require you to specify the following information:
// IssueType. The type of issue for the case. You can specify either
// "customer-service" or "technical." If you do not indicate a value, the
// default is "technical." ServiceCode. The code for an AWS service. You
// obtain the ServiceCode by calling DescribeServices . CategoryCode. The
// category for the service defined for the ServiceCode value. You also
// obtain the category code for a service by calling DescribeServices .
// Each AWS service defines its own set of category codes. SeverityCode. A
// value that indicates the urgency of the case, which in turn determines
// the response time according to your service level agreement with AWS
// Support. You obtain the SeverityCode by calling DescribeSeverityLevels
// Subject. The Subject field on the AWS Support Center Create Case page.
// CommunicationBody. The Description field on the AWS Support Center
// Create Case page. AttachmentSetId. The ID of a set of attachments that
// has been created by using AddAttachmentsToSet Language. The human
// language in which AWS Support handles the case. English and Japanese are
// currently supported. CcEmailAddresses. The AWS Support Center field on
// the Create Case page. You can list email addresses to be copied on any
// correspondence about the case. The account that opens the case is
// already identified by passing the AWS Credentials in the method or in a
// method or function call from one of the programming languages supported
// by an AWS . To add additional communication or attachments to an
// existing case, use AddCommunicationToCase A successful CreateCase
// request returns an AWS Support case number. Case numbers are used by the
// DescribeCases operation to retrieve existing AWS Support cases.
func (c *Support) CreateCase(req CreateCaseRequest) (resp *CreateCaseResponse, err error) {
	resp = &CreateCaseResponse{}
	err = c.client.Do("CreateCase", "POST", "/", req, resp)
	return
}

// DescribeAttachment returns the attachment that has the specified ID.
// Attachment IDs are generated by the case management system when you add
// an attachment to a case or case communication. Attachment IDs are
// returned in the AttachmentDetails objects that are returned by the
// DescribeCommunications operation.
func (c *Support) DescribeAttachment(req DescribeAttachmentRequest) (resp *DescribeAttachmentResponse, err error) {
	resp = &DescribeAttachmentResponse{}
	err = c.client.Do("DescribeAttachment", "POST", "/", req, resp)
	return
}

// DescribeCases returns a list of cases that you specify by passing one or
// more case IDs. In addition, you can filter the cases by date by setting
// values for the AfterTime and BeforeTime request parameters. You can set
// values for the IncludeResolvedCases and IncludeCommunications request
// parameters to control how much information is returned. Case data is
// available for 12 months after creation. If a case was created more than
// 12 months ago, a request for data might cause an error. The response
// returns the following in format: One or more CaseDetails data types. One
// or more NextToken values, which specify where to paginate the returned
// records represented by the CaseDetails objects.
func (c *Support) DescribeCases(req DescribeCasesRequest) (resp *DescribeCasesResponse, err error) {
	resp = &DescribeCasesResponse{}
	err = c.client.Do("DescribeCases", "POST", "/", req, resp)
	return
}

// DescribeCommunications returns communications (and attachments) for one
// or more support cases. You can use the AfterTime and BeforeTime
// parameters to filter by date. You can use the CaseId parameter to
// restrict the results to a particular case. Case data is available for 12
// months after creation. If a case was created more than 12 months ago, a
// request for data might cause an error. You can use the MaxResults and
// NextToken parameters to control the pagination of the result set. Set
// MaxResults to the number of cases you want displayed on each page, and
// use NextToken to specify the resumption of pagination.
func (c *Support) DescribeCommunications(req DescribeCommunicationsRequest) (resp *DescribeCommunicationsResponse, err error) {
	resp = &DescribeCommunicationsResponse{}
	err = c.client.Do("DescribeCommunications", "POST", "/", req, resp)
	return
}

// DescribeServices returns the current list of AWS services and a list of
// service categories that applies to each one. You then use service names
// and categories in your CreateCase requests. Each AWS service has its own
// set of categories. The service codes and category codes correspond to
// the values that are displayed in the Service and Category drop-down
// lists on the AWS Support Center Create Case page. The values in those
// fields, however, do not necessarily match the service codes and
// categories returned by the DescribeServices request. Always use the
// service codes and categories obtained programmatically. This practice
// ensures that you always have the most recent set of service and category
// codes.
func (c *Support) DescribeServices(req DescribeServicesRequest) (resp *DescribeServicesResponse, err error) {
	resp = &DescribeServicesResponse{}
	err = c.client.Do("DescribeServices", "POST", "/", req, resp)
	return
}

// DescribeSeverityLevels returns the list of severity levels that you can
// assign to an AWS Support case. The severity level for a case is also a
// field in the CaseDetails data type included in any CreateCase request.
func (c *Support) DescribeSeverityLevels(req DescribeSeverityLevelsRequest) (resp *DescribeSeverityLevelsResponse, err error) {
	resp = &DescribeSeverityLevelsResponse{}
	err = c.client.Do("DescribeSeverityLevels", "POST", "/", req, resp)
	return
}

// DescribeTrustedAdvisorCheckRefreshStatuses returns the refresh status of
// the Trusted Advisor checks that have the specified check IDs. Check IDs
// can be obtained by calling DescribeTrustedAdvisorChecks
func (c *Support) DescribeTrustedAdvisorCheckRefreshStatuses(req DescribeTrustedAdvisorCheckRefreshStatusesRequest) (resp *DescribeTrustedAdvisorCheckRefreshStatusesResponse, err error) {
	resp = &DescribeTrustedAdvisorCheckRefreshStatusesResponse{}
	err = c.client.Do("DescribeTrustedAdvisorCheckRefreshStatuses", "POST", "/", req, resp)
	return
}

// DescribeTrustedAdvisorCheckResult returns the results of the Trusted
// Advisor check that has the specified check ID. Check IDs can be obtained
// by calling DescribeTrustedAdvisorChecks The response contains a
// TrustedAdvisorCheckResult object, which contains these three objects: In
// addition, the response contains these fields: Status. The alert status
// of the check: "ok" (green), "warning" (yellow), "error" (red), or
// "not_available". Timestamp. The time of the last refresh of the check.
// CheckId. The unique identifier for the check.
func (c *Support) DescribeTrustedAdvisorCheckResult(req DescribeTrustedAdvisorCheckResultRequest) (resp *DescribeTrustedAdvisorCheckResultResponse, err error) {
	resp = &DescribeTrustedAdvisorCheckResultResponse{}
	err = c.client.Do("DescribeTrustedAdvisorCheckResult", "POST", "/", req, resp)
	return
}

// DescribeTrustedAdvisorCheckSummaries returns the summaries of the
// results of the Trusted Advisor checks that have the specified check IDs.
// Check IDs can be obtained by calling DescribeTrustedAdvisorChecks The
// response contains an array of TrustedAdvisorCheckSummary objects.
func (c *Support) DescribeTrustedAdvisorCheckSummaries(req DescribeTrustedAdvisorCheckSummariesRequest) (resp *DescribeTrustedAdvisorCheckSummariesResponse, err error) {
	resp = &DescribeTrustedAdvisorCheckSummariesResponse{}
	err = c.client.Do("DescribeTrustedAdvisorCheckSummaries", "POST", "/", req, resp)
	return
}

// DescribeTrustedAdvisorChecks returns information about all available
// Trusted Advisor checks, including name, ID, category, description, and
// metadata. You must specify a language code; English ("en") and Japanese
// ("ja") are currently supported. The response contains a
// TrustedAdvisorCheckDescription for each check.
func (c *Support) DescribeTrustedAdvisorChecks(req DescribeTrustedAdvisorChecksRequest) (resp *DescribeTrustedAdvisorChecksResponse, err error) {
	resp = &DescribeTrustedAdvisorChecksResponse{}
	err = c.client.Do("DescribeTrustedAdvisorChecks", "POST", "/", req, resp)
	return
}

// RefreshTrustedAdvisorCheck requests a refresh of the Trusted Advisor
// check that has the specified check ID. Check IDs can be obtained by
// calling DescribeTrustedAdvisorChecks The response contains a
// TrustedAdvisorCheckRefreshStatus object, which contains these fields:
// Status. The refresh status of the check: "none", "enqueued",
// "processing", "success", or "abandoned". MillisUntilNextRefreshable. The
// amount of time, in milliseconds, until the check is eligible for
// refresh. CheckId. The unique identifier for the check.
func (c *Support) RefreshTrustedAdvisorCheck(req RefreshTrustedAdvisorCheckRequest) (resp *RefreshTrustedAdvisorCheckResponse, err error) {
	resp = &RefreshTrustedAdvisorCheckResponse{}
	err = c.client.Do("RefreshTrustedAdvisorCheck", "POST", "/", req, resp)
	return
}

// ResolveCase takes a CaseId and returns the initial state of the case
// along with the state of the case after the call to ResolveCase
// completed.
func (c *Support) ResolveCase(req ResolveCaseRequest) (resp *ResolveCaseResponse, err error) {
	resp = &ResolveCaseResponse{}
	err = c.client.Do("ResolveCase", "POST", "/", req, resp)
	return
}

type AddAttachmentsToSetRequest struct {
	attachmentSetID string       `json:"attachmentSetId,omitempty"`
	attachments     []Attachment `json:"attachments"`
}

type AddAttachmentsToSetResponse struct {
	attachmentSetID string `json:"attachmentSetId,omitempty"`
	expiryTime      string `json:"expiryTime,omitempty"`
}

type AddCommunicationToCaseRequest struct {
	attachmentSetID   string   `json:"attachmentSetId,omitempty"`
	caseID            string   `json:"caseId,omitempty"`
	ccEmailAddresses  []string `json:"ccEmailAddresses,omitempty"`
	communicationBody string   `json:"communicationBody"`
}

type AddCommunicationToCaseResponse struct {
	result bool `json:"result,omitempty"`
}

type Attachment struct {
	data     []byte `json:"data,omitempty"`
	fileName string `json:"fileName,omitempty"`
}

type AttachmentDetails struct {
	attachmentID string `json:"attachmentId,omitempty"`
	fileName     string `json:"fileName,omitempty"`
}

type CaseDetails struct {
	caseID               string                   `json:"caseId,omitempty"`
	categoryCode         string                   `json:"categoryCode,omitempty"`
	ccEmailAddresses     []string                 `json:"ccEmailAddresses,omitempty"`
	displayID            string                   `json:"displayId,omitempty"`
	language             string                   `json:"language,omitempty"`
	recentCommunications RecentCaseCommunications `json:"recentCommunications,omitempty"`
	serviceCode          string                   `json:"serviceCode,omitempty"`
	severityCode         string                   `json:"severityCode,omitempty"`
	status               string                   `json:"status,omitempty"`
	subject              string                   `json:"subject,omitempty"`
	submittedBy          string                   `json:"submittedBy,omitempty"`
	timeCreated          string                   `json:"timeCreated,omitempty"`
}

type Category struct {
	code string `json:"code,omitempty"`
	name string `json:"name,omitempty"`
}

type Communication struct {
	attachmentSet []AttachmentDetails `json:"attachmentSet,omitempty"`
	body          string              `json:"body,omitempty"`
	caseID        string              `json:"caseId,omitempty"`
	submittedBy   string              `json:"submittedBy,omitempty"`
	timeCreated   string              `json:"timeCreated,omitempty"`
}

type CreateCaseRequest struct {
	attachmentSetID   string   `json:"attachmentSetId,omitempty"`
	categoryCode      string   `json:"categoryCode,omitempty"`
	ccEmailAddresses  []string `json:"ccEmailAddresses,omitempty"`
	communicationBody string   `json:"communicationBody"`
	issueType         string   `json:"issueType,omitempty"`
	language          string   `json:"language,omitempty"`
	serviceCode       string   `json:"serviceCode,omitempty"`
	severityCode      string   `json:"severityCode,omitempty"`
	subject           string   `json:"subject"`
}

type CreateCaseResponse struct {
	caseID string `json:"caseId,omitempty"`
}

type DescribeAttachmentRequest struct {
	attachmentID string `json:"attachmentId"`
}

type DescribeAttachmentResponse struct {
	attachment Attachment `json:"attachment,omitempty"`
}

type DescribeCasesRequest struct {
	afterTime             string   `json:"afterTime,omitempty"`
	beforeTime            string   `json:"beforeTime,omitempty"`
	caseIDList            []string `json:"caseIdList,omitempty"`
	displayID             string   `json:"displayId,omitempty"`
	includeCommunications bool     `json:"includeCommunications,omitempty"`
	includeResolvedCases  bool     `json:"includeResolvedCases,omitempty"`
	language              string   `json:"language,omitempty"`
	maxResults            int      `json:"maxResults,omitempty"`
	nextToken             string   `json:"nextToken,omitempty"`
}

type DescribeCasesResponse struct {
	cases     []CaseDetails `json:"cases,omitempty"`
	nextToken string        `json:"nextToken,omitempty"`
}

type DescribeCommunicationsRequest struct {
	afterTime  string `json:"afterTime,omitempty"`
	beforeTime string `json:"beforeTime,omitempty"`
	caseID     string `json:"caseId"`
	maxResults int    `json:"maxResults,omitempty"`
	nextToken  string `json:"nextToken,omitempty"`
}

type DescribeCommunicationsResponse struct {
	communications []Communication `json:"communications,omitempty"`
	nextToken      string          `json:"nextToken,omitempty"`
}

type DescribeServicesRequest struct {
	language        string   `json:"language,omitempty"`
	serviceCodeList []string `json:"serviceCodeList,omitempty"`
}

type DescribeServicesResponse struct {
	services []Service `json:"services,omitempty"`
}

type DescribeSeverityLevelsRequest struct {
	language string `json:"language,omitempty"`
}

type DescribeSeverityLevelsResponse struct {
	severityLevels []SeverityLevel `json:"severityLevels,omitempty"`
}

type DescribeTrustedAdvisorCheckRefreshStatusesRequest struct {
	checkIDs []string `json:"checkIds"`
}

type DescribeTrustedAdvisorCheckRefreshStatusesResponse struct {
	statuses []TrustedAdvisorCheckRefreshStatus `json:"statuses"`
}

type DescribeTrustedAdvisorCheckResultRequest struct {
	checkID  string `json:"checkId"`
	language string `json:"language,omitempty"`
}

type DescribeTrustedAdvisorCheckResultResponse struct {
	result TrustedAdvisorCheckResult `json:"result,omitempty"`
}

type DescribeTrustedAdvisorCheckSummariesRequest struct {
	checkIDs []string `json:"checkIds"`
}

type DescribeTrustedAdvisorCheckSummariesResponse struct {
	summaries []TrustedAdvisorCheckSummary `json:"summaries"`
}

type DescribeTrustedAdvisorChecksRequest struct {
	language string `json:"language"`
}

type DescribeTrustedAdvisorChecksResponse struct {
	checks []TrustedAdvisorCheckDescription `json:"checks"`
}

type RecentCaseCommunications struct {
	communications []Communication `json:"communications,omitempty"`
	nextToken      string          `json:"nextToken,omitempty"`
}

type RefreshTrustedAdvisorCheckRequest struct {
	checkID string `json:"checkId"`
}

type RefreshTrustedAdvisorCheckResponse struct {
	status TrustedAdvisorCheckRefreshStatus `json:"status"`
}

type ResolveCaseRequest struct {
	caseID string `json:"caseId,omitempty"`
}

type ResolveCaseResponse struct {
	finalCaseStatus   string `json:"finalCaseStatus,omitempty"`
	initialCaseStatus string `json:"initialCaseStatus,omitempty"`
}

type Service struct {
	categories []Category `json:"categories,omitempty"`
	code       string     `json:"code,omitempty"`
	name       string     `json:"name,omitempty"`
}

type SeverityLevel struct {
	code string `json:"code,omitempty"`
	name string `json:"name,omitempty"`
}

type TrustedAdvisorCategorySpecificSummary struct {
	costOptimizing TrustedAdvisorCostOptimizingSummary `json:"costOptimizing,omitempty"`
}

type TrustedAdvisorCheckDescription struct {
	category    string   `json:"category"`
	description string   `json:"description"`
	id          string   `json:"id"`
	metadata    []string `json:"metadata"`
	name        string   `json:"name"`
}

type TrustedAdvisorCheckRefreshStatus struct {
	checkID                    string `json:"checkId"`
	millisUntilNextRefreshable int    `json:"millisUntilNextRefreshable"`
	status                     string `json:"status"`
}

type TrustedAdvisorCheckResult struct {
	categorySpecificSummary TrustedAdvisorCategorySpecificSummary `json:"categorySpecificSummary"`
	checkID                 string                                `json:"checkId"`
	flaggedResources        []TrustedAdvisorResourceDetail        `json:"flaggedResources"`
	resourcesSummary        TrustedAdvisorResourcesSummary        `json:"resourcesSummary"`
	status                  string                                `json:"status"`
	timestamp               string                                `json:"timestamp"`
}

type TrustedAdvisorCheckSummary struct {
	categorySpecificSummary TrustedAdvisorCategorySpecificSummary `json:"categorySpecificSummary"`
	checkID                 string                                `json:"checkId"`
	hasFlaggedResources     bool                                  `json:"hasFlaggedResources,omitempty"`
	resourcesSummary        TrustedAdvisorResourcesSummary        `json:"resourcesSummary"`
	status                  string                                `json:"status"`
	timestamp               string                                `json:"timestamp"`
}

type TrustedAdvisorCostOptimizingSummary struct {
	estimatedMonthlySavings        float64 `json:"estimatedMonthlySavings"`
	estimatedPercentMonthlySavings float64 `json:"estimatedPercentMonthlySavings"`
}

type TrustedAdvisorResourceDetail struct {
	isSuppressed bool     `json:"isSuppressed,omitempty"`
	metadata     []string `json:"metadata"`
	region       string   `json:"region"`
	resourceID   string   `json:"resourceId"`
	status       string   `json:"status"`
}

type TrustedAdvisorResourcesSummary struct {
	resourcesFlagged    int `json:"resourcesFlagged"`
	resourcesIgnored    int `json:"resourcesIgnored"`
	resourcesProcessed  int `json:"resourcesProcessed"`
	resourcesSuppressed int `json:"resourcesSuppressed"`
}

type AttachmentIdNotFound struct {
	// exception
}

type AttachmentLimitExceeded struct {
	// exception
}

type AttachmentSetExpired struct {
	// exception
}

type AttachmentSetIdNotFound struct {
	// exception
}

type AttachmentSetSizeLimitExceeded struct {
	// exception
}

type CaseCreationLimitExceeded struct {
	// exception
}

type CaseIdNotFound struct {
	// exception
}

type DescribeAttachmentLimitExceeded struct {
	// exception
}

type InternalServerError struct {
	// exception
}

// IMPORTS

var _ time.Time
