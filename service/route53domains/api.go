// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.

// Package route53domains provides a client for Amazon Route 53 Domains.
package route53domains

import (
	"fmt"
	"time"

	"github.com/aws/aws-sdk-go/aws/awsutil"
	"github.com/aws/aws-sdk-go/aws/request"
)

const opCheckDomainAvailability = "CheckDomainAvailability"

// CheckDomainAvailabilityRequest generates a "aws/request.Request" representing the
// client's request for the CheckDomainAvailability operation. The "output" return
// value can be used to capture response data after the request's "Send" method
// is called.
//
// Creating a request object using this method should be used when you want to inject
// custom logic into the request's lifecycle using a custom handler, or if you want to
// access properties on the request object before or after sending the request. If
// you just want the service response, call the CheckDomainAvailability method directly
// instead.
//
// Note: You must call the "Send" method on the returned request object in order
// to execute the request.
//
//    // Example sending a request using the CheckDomainAvailabilityRequest method.
//    req, resp := client.CheckDomainAvailabilityRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
func (c *Route53Domains) CheckDomainAvailabilityRequest(input *CheckDomainAvailabilityInput) (req *request.Request, output *CheckDomainAvailabilityOutput) {
	op := &request.Operation{
		Name:       opCheckDomainAvailability,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CheckDomainAvailabilityInput{}
	}

	req = c.newRequest(op, input, output)
	output = &CheckDomainAvailabilityOutput{}
	req.Data = output
	return
}

func (c *Route53Domains) CheckDomainAvailability(input *CheckDomainAvailabilityInput) (*CheckDomainAvailabilityOutput, error) {
	req, out := c.CheckDomainAvailabilityRequest(input)
	err := req.Send()
	return out, err
}

const opDeleteTagsForDomain = "DeleteTagsForDomain"

// DeleteTagsForDomainRequest generates a "aws/request.Request" representing the
// client's request for the DeleteTagsForDomain operation. The "output" return
// value can be used to capture response data after the request's "Send" method
// is called.
//
// Creating a request object using this method should be used when you want to inject
// custom logic into the request's lifecycle using a custom handler, or if you want to
// access properties on the request object before or after sending the request. If
// you just want the service response, call the DeleteTagsForDomain method directly
// instead.
//
// Note: You must call the "Send" method on the returned request object in order
// to execute the request.
//
//    // Example sending a request using the DeleteTagsForDomainRequest method.
//    req, resp := client.DeleteTagsForDomainRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
func (c *Route53Domains) DeleteTagsForDomainRequest(input *DeleteTagsForDomainInput) (req *request.Request, output *DeleteTagsForDomainOutput) {
	op := &request.Operation{
		Name:       opDeleteTagsForDomain,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DeleteTagsForDomainInput{}
	}

	req = c.newRequest(op, input, output)
	output = &DeleteTagsForDomainOutput{}
	req.Data = output
	return
}

func (c *Route53Domains) DeleteTagsForDomain(input *DeleteTagsForDomainInput) (*DeleteTagsForDomainOutput, error) {
	req, out := c.DeleteTagsForDomainRequest(input)
	err := req.Send()
	return out, err
}

const opDisableDomainAutoRenew = "DisableDomainAutoRenew"

// DisableDomainAutoRenewRequest generates a "aws/request.Request" representing the
// client's request for the DisableDomainAutoRenew operation. The "output" return
// value can be used to capture response data after the request's "Send" method
// is called.
//
// Creating a request object using this method should be used when you want to inject
// custom logic into the request's lifecycle using a custom handler, or if you want to
// access properties on the request object before or after sending the request. If
// you just want the service response, call the DisableDomainAutoRenew method directly
// instead.
//
// Note: You must call the "Send" method on the returned request object in order
// to execute the request.
//
//    // Example sending a request using the DisableDomainAutoRenewRequest method.
//    req, resp := client.DisableDomainAutoRenewRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
func (c *Route53Domains) DisableDomainAutoRenewRequest(input *DisableDomainAutoRenewInput) (req *request.Request, output *DisableDomainAutoRenewOutput) {
	op := &request.Operation{
		Name:       opDisableDomainAutoRenew,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DisableDomainAutoRenewInput{}
	}

	req = c.newRequest(op, input, output)
	output = &DisableDomainAutoRenewOutput{}
	req.Data = output
	return
}

func (c *Route53Domains) DisableDomainAutoRenew(input *DisableDomainAutoRenewInput) (*DisableDomainAutoRenewOutput, error) {
	req, out := c.DisableDomainAutoRenewRequest(input)
	err := req.Send()
	return out, err
}

const opDisableDomainTransferLock = "DisableDomainTransferLock"

// DisableDomainTransferLockRequest generates a "aws/request.Request" representing the
// client's request for the DisableDomainTransferLock operation. The "output" return
// value can be used to capture response data after the request's "Send" method
// is called.
//
// Creating a request object using this method should be used when you want to inject
// custom logic into the request's lifecycle using a custom handler, or if you want to
// access properties on the request object before or after sending the request. If
// you just want the service response, call the DisableDomainTransferLock method directly
// instead.
//
// Note: You must call the "Send" method on the returned request object in order
// to execute the request.
//
//    // Example sending a request using the DisableDomainTransferLockRequest method.
//    req, resp := client.DisableDomainTransferLockRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
func (c *Route53Domains) DisableDomainTransferLockRequest(input *DisableDomainTransferLockInput) (req *request.Request, output *DisableDomainTransferLockOutput) {
	op := &request.Operation{
		Name:       opDisableDomainTransferLock,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DisableDomainTransferLockInput{}
	}

	req = c.newRequest(op, input, output)
	output = &DisableDomainTransferLockOutput{}
	req.Data = output
	return
}

func (c *Route53Domains) DisableDomainTransferLock(input *DisableDomainTransferLockInput) (*DisableDomainTransferLockOutput, error) {
	req, out := c.DisableDomainTransferLockRequest(input)
	err := req.Send()
	return out, err
}

const opEnableDomainAutoRenew = "EnableDomainAutoRenew"

// EnableDomainAutoRenewRequest generates a "aws/request.Request" representing the
// client's request for the EnableDomainAutoRenew operation. The "output" return
// value can be used to capture response data after the request's "Send" method
// is called.
//
// Creating a request object using this method should be used when you want to inject
// custom logic into the request's lifecycle using a custom handler, or if you want to
// access properties on the request object before or after sending the request. If
// you just want the service response, call the EnableDomainAutoRenew method directly
// instead.
//
// Note: You must call the "Send" method on the returned request object in order
// to execute the request.
//
//    // Example sending a request using the EnableDomainAutoRenewRequest method.
//    req, resp := client.EnableDomainAutoRenewRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
func (c *Route53Domains) EnableDomainAutoRenewRequest(input *EnableDomainAutoRenewInput) (req *request.Request, output *EnableDomainAutoRenewOutput) {
	op := &request.Operation{
		Name:       opEnableDomainAutoRenew,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &EnableDomainAutoRenewInput{}
	}

	req = c.newRequest(op, input, output)
	output = &EnableDomainAutoRenewOutput{}
	req.Data = output
	return
}

func (c *Route53Domains) EnableDomainAutoRenew(input *EnableDomainAutoRenewInput) (*EnableDomainAutoRenewOutput, error) {
	req, out := c.EnableDomainAutoRenewRequest(input)
	err := req.Send()
	return out, err
}

const opEnableDomainTransferLock = "EnableDomainTransferLock"

// EnableDomainTransferLockRequest generates a "aws/request.Request" representing the
// client's request for the EnableDomainTransferLock operation. The "output" return
// value can be used to capture response data after the request's "Send" method
// is called.
//
// Creating a request object using this method should be used when you want to inject
// custom logic into the request's lifecycle using a custom handler, or if you want to
// access properties on the request object before or after sending the request. If
// you just want the service response, call the EnableDomainTransferLock method directly
// instead.
//
// Note: You must call the "Send" method on the returned request object in order
// to execute the request.
//
//    // Example sending a request using the EnableDomainTransferLockRequest method.
//    req, resp := client.EnableDomainTransferLockRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
func (c *Route53Domains) EnableDomainTransferLockRequest(input *EnableDomainTransferLockInput) (req *request.Request, output *EnableDomainTransferLockOutput) {
	op := &request.Operation{
		Name:       opEnableDomainTransferLock,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &EnableDomainTransferLockInput{}
	}

	req = c.newRequest(op, input, output)
	output = &EnableDomainTransferLockOutput{}
	req.Data = output
	return
}

func (c *Route53Domains) EnableDomainTransferLock(input *EnableDomainTransferLockInput) (*EnableDomainTransferLockOutput, error) {
	req, out := c.EnableDomainTransferLockRequest(input)
	err := req.Send()
	return out, err
}

const opGetContactReachabilityStatus = "GetContactReachabilityStatus"

// GetContactReachabilityStatusRequest generates a "aws/request.Request" representing the
// client's request for the GetContactReachabilityStatus operation. The "output" return
// value can be used to capture response data after the request's "Send" method
// is called.
//
// Creating a request object using this method should be used when you want to inject
// custom logic into the request's lifecycle using a custom handler, or if you want to
// access properties on the request object before or after sending the request. If
// you just want the service response, call the GetContactReachabilityStatus method directly
// instead.
//
// Note: You must call the "Send" method on the returned request object in order
// to execute the request.
//
//    // Example sending a request using the GetContactReachabilityStatusRequest method.
//    req, resp := client.GetContactReachabilityStatusRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
func (c *Route53Domains) GetContactReachabilityStatusRequest(input *GetContactReachabilityStatusInput) (req *request.Request, output *GetContactReachabilityStatusOutput) {
	op := &request.Operation{
		Name:       opGetContactReachabilityStatus,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &GetContactReachabilityStatusInput{}
	}

	req = c.newRequest(op, input, output)
	output = &GetContactReachabilityStatusOutput{}
	req.Data = output
	return
}

func (c *Route53Domains) GetContactReachabilityStatus(input *GetContactReachabilityStatusInput) (*GetContactReachabilityStatusOutput, error) {
	req, out := c.GetContactReachabilityStatusRequest(input)
	err := req.Send()
	return out, err
}

const opGetDomainDetail = "GetDomainDetail"

// GetDomainDetailRequest generates a "aws/request.Request" representing the
// client's request for the GetDomainDetail operation. The "output" return
// value can be used to capture response data after the request's "Send" method
// is called.
//
// Creating a request object using this method should be used when you want to inject
// custom logic into the request's lifecycle using a custom handler, or if you want to
// access properties on the request object before or after sending the request. If
// you just want the service response, call the GetDomainDetail method directly
// instead.
//
// Note: You must call the "Send" method on the returned request object in order
// to execute the request.
//
//    // Example sending a request using the GetDomainDetailRequest method.
//    req, resp := client.GetDomainDetailRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
func (c *Route53Domains) GetDomainDetailRequest(input *GetDomainDetailInput) (req *request.Request, output *GetDomainDetailOutput) {
	op := &request.Operation{
		Name:       opGetDomainDetail,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &GetDomainDetailInput{}
	}

	req = c.newRequest(op, input, output)
	output = &GetDomainDetailOutput{}
	req.Data = output
	return
}

func (c *Route53Domains) GetDomainDetail(input *GetDomainDetailInput) (*GetDomainDetailOutput, error) {
	req, out := c.GetDomainDetailRequest(input)
	err := req.Send()
	return out, err
}

const opGetDomainSuggestions = "GetDomainSuggestions"

// GetDomainSuggestionsRequest generates a "aws/request.Request" representing the
// client's request for the GetDomainSuggestions operation. The "output" return
// value can be used to capture response data after the request's "Send" method
// is called.
//
// Creating a request object using this method should be used when you want to inject
// custom logic into the request's lifecycle using a custom handler, or if you want to
// access properties on the request object before or after sending the request. If
// you just want the service response, call the GetDomainSuggestions method directly
// instead.
//
// Note: You must call the "Send" method on the returned request object in order
// to execute the request.
//
//    // Example sending a request using the GetDomainSuggestionsRequest method.
//    req, resp := client.GetDomainSuggestionsRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
func (c *Route53Domains) GetDomainSuggestionsRequest(input *GetDomainSuggestionsInput) (req *request.Request, output *GetDomainSuggestionsOutput) {
	op := &request.Operation{
		Name:       opGetDomainSuggestions,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &GetDomainSuggestionsInput{}
	}

	req = c.newRequest(op, input, output)
	output = &GetDomainSuggestionsOutput{}
	req.Data = output
	return
}

func (c *Route53Domains) GetDomainSuggestions(input *GetDomainSuggestionsInput) (*GetDomainSuggestionsOutput, error) {
	req, out := c.GetDomainSuggestionsRequest(input)
	err := req.Send()
	return out, err
}

const opGetOperationDetail = "GetOperationDetail"

// GetOperationDetailRequest generates a "aws/request.Request" representing the
// client's request for the GetOperationDetail operation. The "output" return
// value can be used to capture response data after the request's "Send" method
// is called.
//
// Creating a request object using this method should be used when you want to inject
// custom logic into the request's lifecycle using a custom handler, or if you want to
// access properties on the request object before or after sending the request. If
// you just want the service response, call the GetOperationDetail method directly
// instead.
//
// Note: You must call the "Send" method on the returned request object in order
// to execute the request.
//
//    // Example sending a request using the GetOperationDetailRequest method.
//    req, resp := client.GetOperationDetailRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
func (c *Route53Domains) GetOperationDetailRequest(input *GetOperationDetailInput) (req *request.Request, output *GetOperationDetailOutput) {
	op := &request.Operation{
		Name:       opGetOperationDetail,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &GetOperationDetailInput{}
	}

	req = c.newRequest(op, input, output)
	output = &GetOperationDetailOutput{}
	req.Data = output
	return
}

func (c *Route53Domains) GetOperationDetail(input *GetOperationDetailInput) (*GetOperationDetailOutput, error) {
	req, out := c.GetOperationDetailRequest(input)
	err := req.Send()
	return out, err
}

const opListDomains = "ListDomains"

// ListDomainsRequest generates a "aws/request.Request" representing the
// client's request for the ListDomains operation. The "output" return
// value can be used to capture response data after the request's "Send" method
// is called.
//
// Creating a request object using this method should be used when you want to inject
// custom logic into the request's lifecycle using a custom handler, or if you want to
// access properties on the request object before or after sending the request. If
// you just want the service response, call the ListDomains method directly
// instead.
//
// Note: You must call the "Send" method on the returned request object in order
// to execute the request.
//
//    // Example sending a request using the ListDomainsRequest method.
//    req, resp := client.ListDomainsRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
func (c *Route53Domains) ListDomainsRequest(input *ListDomainsInput) (req *request.Request, output *ListDomainsOutput) {
	op := &request.Operation{
		Name:       opListDomains,
		HTTPMethod: "POST",
		HTTPPath:   "/",
		Paginator: &request.Paginator{
			InputTokens:     []string{"Marker"},
			OutputTokens:    []string{"NextPageMarker"},
			LimitToken:      "MaxItems",
			TruncationToken: "",
		},
	}

	if input == nil {
		input = &ListDomainsInput{}
	}

	req = c.newRequest(op, input, output)
	output = &ListDomainsOutput{}
	req.Data = output
	return
}

func (c *Route53Domains) ListDomains(input *ListDomainsInput) (*ListDomainsOutput, error) {
	req, out := c.ListDomainsRequest(input)
	err := req.Send()
	return out, err
}

// ListDomainsPages iterates over the pages of a ListDomains operation,
// calling the "fn" function with the response data for each page. To stop
// iterating, return false from the fn function.
//
// See ListDomains method for more information on how to use this operation.
//
// Note: This operation can generate multiple requests to a service.
//
//    // Example iterating over at most 3 pages of a ListDomains operation.
//    pageNum := 0
//    err := client.ListDomainsPages(params,
//        func(page *ListDomainsOutput, lastPage bool) bool {
//            pageNum++
//            fmt.Println(page)
//            return pageNum <= 3
//        })
//
func (c *Route53Domains) ListDomainsPages(input *ListDomainsInput, fn func(p *ListDomainsOutput, lastPage bool) (shouldContinue bool)) error {
	page, _ := c.ListDomainsRequest(input)
	page.Handlers.Build.PushBack(request.MakeAddToUserAgentFreeFormHandler("Paginator"))
	return page.EachPage(func(p interface{}, lastPage bool) bool {
		return fn(p.(*ListDomainsOutput), lastPage)
	})
}

const opListOperations = "ListOperations"

// ListOperationsRequest generates a "aws/request.Request" representing the
// client's request for the ListOperations operation. The "output" return
// value can be used to capture response data after the request's "Send" method
// is called.
//
// Creating a request object using this method should be used when you want to inject
// custom logic into the request's lifecycle using a custom handler, or if you want to
// access properties on the request object before or after sending the request. If
// you just want the service response, call the ListOperations method directly
// instead.
//
// Note: You must call the "Send" method on the returned request object in order
// to execute the request.
//
//    // Example sending a request using the ListOperationsRequest method.
//    req, resp := client.ListOperationsRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
func (c *Route53Domains) ListOperationsRequest(input *ListOperationsInput) (req *request.Request, output *ListOperationsOutput) {
	op := &request.Operation{
		Name:       opListOperations,
		HTTPMethod: "POST",
		HTTPPath:   "/",
		Paginator: &request.Paginator{
			InputTokens:     []string{"Marker"},
			OutputTokens:    []string{"NextPageMarker"},
			LimitToken:      "MaxItems",
			TruncationToken: "",
		},
	}

	if input == nil {
		input = &ListOperationsInput{}
	}

	req = c.newRequest(op, input, output)
	output = &ListOperationsOutput{}
	req.Data = output
	return
}

func (c *Route53Domains) ListOperations(input *ListOperationsInput) (*ListOperationsOutput, error) {
	req, out := c.ListOperationsRequest(input)
	err := req.Send()
	return out, err
}

// ListOperationsPages iterates over the pages of a ListOperations operation,
// calling the "fn" function with the response data for each page. To stop
// iterating, return false from the fn function.
//
// See ListOperations method for more information on how to use this operation.
//
// Note: This operation can generate multiple requests to a service.
//
//    // Example iterating over at most 3 pages of a ListOperations operation.
//    pageNum := 0
//    err := client.ListOperationsPages(params,
//        func(page *ListOperationsOutput, lastPage bool) bool {
//            pageNum++
//            fmt.Println(page)
//            return pageNum <= 3
//        })
//
func (c *Route53Domains) ListOperationsPages(input *ListOperationsInput, fn func(p *ListOperationsOutput, lastPage bool) (shouldContinue bool)) error {
	page, _ := c.ListOperationsRequest(input)
	page.Handlers.Build.PushBack(request.MakeAddToUserAgentFreeFormHandler("Paginator"))
	return page.EachPage(func(p interface{}, lastPage bool) bool {
		return fn(p.(*ListOperationsOutput), lastPage)
	})
}

const opListTagsForDomain = "ListTagsForDomain"

// ListTagsForDomainRequest generates a "aws/request.Request" representing the
// client's request for the ListTagsForDomain operation. The "output" return
// value can be used to capture response data after the request's "Send" method
// is called.
//
// Creating a request object using this method should be used when you want to inject
// custom logic into the request's lifecycle using a custom handler, or if you want to
// access properties on the request object before or after sending the request. If
// you just want the service response, call the ListTagsForDomain method directly
// instead.
//
// Note: You must call the "Send" method on the returned request object in order
// to execute the request.
//
//    // Example sending a request using the ListTagsForDomainRequest method.
//    req, resp := client.ListTagsForDomainRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
func (c *Route53Domains) ListTagsForDomainRequest(input *ListTagsForDomainInput) (req *request.Request, output *ListTagsForDomainOutput) {
	op := &request.Operation{
		Name:       opListTagsForDomain,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ListTagsForDomainInput{}
	}

	req = c.newRequest(op, input, output)
	output = &ListTagsForDomainOutput{}
	req.Data = output
	return
}

func (c *Route53Domains) ListTagsForDomain(input *ListTagsForDomainInput) (*ListTagsForDomainOutput, error) {
	req, out := c.ListTagsForDomainRequest(input)
	err := req.Send()
	return out, err
}

const opRegisterDomain = "RegisterDomain"

// RegisterDomainRequest generates a "aws/request.Request" representing the
// client's request for the RegisterDomain operation. The "output" return
// value can be used to capture response data after the request's "Send" method
// is called.
//
// Creating a request object using this method should be used when you want to inject
// custom logic into the request's lifecycle using a custom handler, or if you want to
// access properties on the request object before or after sending the request. If
// you just want the service response, call the RegisterDomain method directly
// instead.
//
// Note: You must call the "Send" method on the returned request object in order
// to execute the request.
//
//    // Example sending a request using the RegisterDomainRequest method.
//    req, resp := client.RegisterDomainRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
func (c *Route53Domains) RegisterDomainRequest(input *RegisterDomainInput) (req *request.Request, output *RegisterDomainOutput) {
	op := &request.Operation{
		Name:       opRegisterDomain,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &RegisterDomainInput{}
	}

	req = c.newRequest(op, input, output)
	output = &RegisterDomainOutput{}
	req.Data = output
	return
}

func (c *Route53Domains) RegisterDomain(input *RegisterDomainInput) (*RegisterDomainOutput, error) {
	req, out := c.RegisterDomainRequest(input)
	err := req.Send()
	return out, err
}

const opRenewDomain = "RenewDomain"

// RenewDomainRequest generates a "aws/request.Request" representing the
// client's request for the RenewDomain operation. The "output" return
// value can be used to capture response data after the request's "Send" method
// is called.
//
// Creating a request object using this method should be used when you want to inject
// custom logic into the request's lifecycle using a custom handler, or if you want to
// access properties on the request object before or after sending the request. If
// you just want the service response, call the RenewDomain method directly
// instead.
//
// Note: You must call the "Send" method on the returned request object in order
// to execute the request.
//
//    // Example sending a request using the RenewDomainRequest method.
//    req, resp := client.RenewDomainRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
func (c *Route53Domains) RenewDomainRequest(input *RenewDomainInput) (req *request.Request, output *RenewDomainOutput) {
	op := &request.Operation{
		Name:       opRenewDomain,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &RenewDomainInput{}
	}

	req = c.newRequest(op, input, output)
	output = &RenewDomainOutput{}
	req.Data = output
	return
}

func (c *Route53Domains) RenewDomain(input *RenewDomainInput) (*RenewDomainOutput, error) {
	req, out := c.RenewDomainRequest(input)
	err := req.Send()
	return out, err
}

const opResendContactReachabilityEmail = "ResendContactReachabilityEmail"

// ResendContactReachabilityEmailRequest generates a "aws/request.Request" representing the
// client's request for the ResendContactReachabilityEmail operation. The "output" return
// value can be used to capture response data after the request's "Send" method
// is called.
//
// Creating a request object using this method should be used when you want to inject
// custom logic into the request's lifecycle using a custom handler, or if you want to
// access properties on the request object before or after sending the request. If
// you just want the service response, call the ResendContactReachabilityEmail method directly
// instead.
//
// Note: You must call the "Send" method on the returned request object in order
// to execute the request.
//
//    // Example sending a request using the ResendContactReachabilityEmailRequest method.
//    req, resp := client.ResendContactReachabilityEmailRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
func (c *Route53Domains) ResendContactReachabilityEmailRequest(input *ResendContactReachabilityEmailInput) (req *request.Request, output *ResendContactReachabilityEmailOutput) {
	op := &request.Operation{
		Name:       opResendContactReachabilityEmail,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ResendContactReachabilityEmailInput{}
	}

	req = c.newRequest(op, input, output)
	output = &ResendContactReachabilityEmailOutput{}
	req.Data = output
	return
}

func (c *Route53Domains) ResendContactReachabilityEmail(input *ResendContactReachabilityEmailInput) (*ResendContactReachabilityEmailOutput, error) {
	req, out := c.ResendContactReachabilityEmailRequest(input)
	err := req.Send()
	return out, err
}

const opRetrieveDomainAuthCode = "RetrieveDomainAuthCode"

// RetrieveDomainAuthCodeRequest generates a "aws/request.Request" representing the
// client's request for the RetrieveDomainAuthCode operation. The "output" return
// value can be used to capture response data after the request's "Send" method
// is called.
//
// Creating a request object using this method should be used when you want to inject
// custom logic into the request's lifecycle using a custom handler, or if you want to
// access properties on the request object before or after sending the request. If
// you just want the service response, call the RetrieveDomainAuthCode method directly
// instead.
//
// Note: You must call the "Send" method on the returned request object in order
// to execute the request.
//
//    // Example sending a request using the RetrieveDomainAuthCodeRequest method.
//    req, resp := client.RetrieveDomainAuthCodeRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
func (c *Route53Domains) RetrieveDomainAuthCodeRequest(input *RetrieveDomainAuthCodeInput) (req *request.Request, output *RetrieveDomainAuthCodeOutput) {
	op := &request.Operation{
		Name:       opRetrieveDomainAuthCode,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &RetrieveDomainAuthCodeInput{}
	}

	req = c.newRequest(op, input, output)
	output = &RetrieveDomainAuthCodeOutput{}
	req.Data = output
	return
}

func (c *Route53Domains) RetrieveDomainAuthCode(input *RetrieveDomainAuthCodeInput) (*RetrieveDomainAuthCodeOutput, error) {
	req, out := c.RetrieveDomainAuthCodeRequest(input)
	err := req.Send()
	return out, err
}

const opTransferDomain = "TransferDomain"

// TransferDomainRequest generates a "aws/request.Request" representing the
// client's request for the TransferDomain operation. The "output" return
// value can be used to capture response data after the request's "Send" method
// is called.
//
// Creating a request object using this method should be used when you want to inject
// custom logic into the request's lifecycle using a custom handler, or if you want to
// access properties on the request object before or after sending the request. If
// you just want the service response, call the TransferDomain method directly
// instead.
//
// Note: You must call the "Send" method on the returned request object in order
// to execute the request.
//
//    // Example sending a request using the TransferDomainRequest method.
//    req, resp := client.TransferDomainRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
func (c *Route53Domains) TransferDomainRequest(input *TransferDomainInput) (req *request.Request, output *TransferDomainOutput) {
	op := &request.Operation{
		Name:       opTransferDomain,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &TransferDomainInput{}
	}

	req = c.newRequest(op, input, output)
	output = &TransferDomainOutput{}
	req.Data = output
	return
}

func (c *Route53Domains) TransferDomain(input *TransferDomainInput) (*TransferDomainOutput, error) {
	req, out := c.TransferDomainRequest(input)
	err := req.Send()
	return out, err
}

const opUpdateDomainContact = "UpdateDomainContact"

// UpdateDomainContactRequest generates a "aws/request.Request" representing the
// client's request for the UpdateDomainContact operation. The "output" return
// value can be used to capture response data after the request's "Send" method
// is called.
//
// Creating a request object using this method should be used when you want to inject
// custom logic into the request's lifecycle using a custom handler, or if you want to
// access properties on the request object before or after sending the request. If
// you just want the service response, call the UpdateDomainContact method directly
// instead.
//
// Note: You must call the "Send" method on the returned request object in order
// to execute the request.
//
//    // Example sending a request using the UpdateDomainContactRequest method.
//    req, resp := client.UpdateDomainContactRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
func (c *Route53Domains) UpdateDomainContactRequest(input *UpdateDomainContactInput) (req *request.Request, output *UpdateDomainContactOutput) {
	op := &request.Operation{
		Name:       opUpdateDomainContact,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &UpdateDomainContactInput{}
	}

	req = c.newRequest(op, input, output)
	output = &UpdateDomainContactOutput{}
	req.Data = output
	return
}

func (c *Route53Domains) UpdateDomainContact(input *UpdateDomainContactInput) (*UpdateDomainContactOutput, error) {
	req, out := c.UpdateDomainContactRequest(input)
	err := req.Send()
	return out, err
}

const opUpdateDomainContactPrivacy = "UpdateDomainContactPrivacy"

// UpdateDomainContactPrivacyRequest generates a "aws/request.Request" representing the
// client's request for the UpdateDomainContactPrivacy operation. The "output" return
// value can be used to capture response data after the request's "Send" method
// is called.
//
// Creating a request object using this method should be used when you want to inject
// custom logic into the request's lifecycle using a custom handler, or if you want to
// access properties on the request object before or after sending the request. If
// you just want the service response, call the UpdateDomainContactPrivacy method directly
// instead.
//
// Note: You must call the "Send" method on the returned request object in order
// to execute the request.
//
//    // Example sending a request using the UpdateDomainContactPrivacyRequest method.
//    req, resp := client.UpdateDomainContactPrivacyRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
func (c *Route53Domains) UpdateDomainContactPrivacyRequest(input *UpdateDomainContactPrivacyInput) (req *request.Request, output *UpdateDomainContactPrivacyOutput) {
	op := &request.Operation{
		Name:       opUpdateDomainContactPrivacy,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &UpdateDomainContactPrivacyInput{}
	}

	req = c.newRequest(op, input, output)
	output = &UpdateDomainContactPrivacyOutput{}
	req.Data = output
	return
}

func (c *Route53Domains) UpdateDomainContactPrivacy(input *UpdateDomainContactPrivacyInput) (*UpdateDomainContactPrivacyOutput, error) {
	req, out := c.UpdateDomainContactPrivacyRequest(input)
	err := req.Send()
	return out, err
}

const opUpdateDomainNameservers = "UpdateDomainNameservers"

// UpdateDomainNameserversRequest generates a "aws/request.Request" representing the
// client's request for the UpdateDomainNameservers operation. The "output" return
// value can be used to capture response data after the request's "Send" method
// is called.
//
// Creating a request object using this method should be used when you want to inject
// custom logic into the request's lifecycle using a custom handler, or if you want to
// access properties on the request object before or after sending the request. If
// you just want the service response, call the UpdateDomainNameservers method directly
// instead.
//
// Note: You must call the "Send" method on the returned request object in order
// to execute the request.
//
//    // Example sending a request using the UpdateDomainNameserversRequest method.
//    req, resp := client.UpdateDomainNameserversRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
func (c *Route53Domains) UpdateDomainNameserversRequest(input *UpdateDomainNameserversInput) (req *request.Request, output *UpdateDomainNameserversOutput) {
	op := &request.Operation{
		Name:       opUpdateDomainNameservers,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &UpdateDomainNameserversInput{}
	}

	req = c.newRequest(op, input, output)
	output = &UpdateDomainNameserversOutput{}
	req.Data = output
	return
}

func (c *Route53Domains) UpdateDomainNameservers(input *UpdateDomainNameserversInput) (*UpdateDomainNameserversOutput, error) {
	req, out := c.UpdateDomainNameserversRequest(input)
	err := req.Send()
	return out, err
}

const opUpdateTagsForDomain = "UpdateTagsForDomain"

// UpdateTagsForDomainRequest generates a "aws/request.Request" representing the
// client's request for the UpdateTagsForDomain operation. The "output" return
// value can be used to capture response data after the request's "Send" method
// is called.
//
// Creating a request object using this method should be used when you want to inject
// custom logic into the request's lifecycle using a custom handler, or if you want to
// access properties on the request object before or after sending the request. If
// you just want the service response, call the UpdateTagsForDomain method directly
// instead.
//
// Note: You must call the "Send" method on the returned request object in order
// to execute the request.
//
//    // Example sending a request using the UpdateTagsForDomainRequest method.
//    req, resp := client.UpdateTagsForDomainRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
func (c *Route53Domains) UpdateTagsForDomainRequest(input *UpdateTagsForDomainInput) (req *request.Request, output *UpdateTagsForDomainOutput) {
	op := &request.Operation{
		Name:       opUpdateTagsForDomain,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &UpdateTagsForDomainInput{}
	}

	req = c.newRequest(op, input, output)
	output = &UpdateTagsForDomainOutput{}
	req.Data = output
	return
}

func (c *Route53Domains) UpdateTagsForDomain(input *UpdateTagsForDomainInput) (*UpdateTagsForDomainOutput, error) {
	req, out := c.UpdateTagsForDomainRequest(input)
	err := req.Send()
	return out, err
}

const opViewBilling = "ViewBilling"

// ViewBillingRequest generates a "aws/request.Request" representing the
// client's request for the ViewBilling operation. The "output" return
// value can be used to capture response data after the request's "Send" method
// is called.
//
// Creating a request object using this method should be used when you want to inject
// custom logic into the request's lifecycle using a custom handler, or if you want to
// access properties on the request object before or after sending the request. If
// you just want the service response, call the ViewBilling method directly
// instead.
//
// Note: You must call the "Send" method on the returned request object in order
// to execute the request.
//
//    // Example sending a request using the ViewBillingRequest method.
//    req, resp := client.ViewBillingRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
func (c *Route53Domains) ViewBillingRequest(input *ViewBillingInput) (req *request.Request, output *ViewBillingOutput) {
	op := &request.Operation{
		Name:       opViewBilling,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ViewBillingInput{}
	}

	req = c.newRequest(op, input, output)
	output = &ViewBillingOutput{}
	req.Data = output
	return
}

func (c *Route53Domains) ViewBilling(input *ViewBillingInput) (*ViewBillingOutput, error) {
	req, out := c.ViewBillingRequest(input)
	err := req.Send()
	return out, err
}

type BillingRecord struct {
	_ struct{} `type:"structure"`

	BillDate *time.Time `type:"timestamp" timestampFormat:"unix"`

	DomainName *string `type:"string"`

	InvoiceId *string `type:"string"`

	Operation *string `type:"string" enum:"OperationType"`

	Price *float64 `type:"double"`
}

// String returns the string representation
func (s BillingRecord) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s BillingRecord) GoString() string {
	return s.String()
}

type CheckDomainAvailabilityInput struct {
	_ struct{} `type:"structure"`

	DomainName *string `type:"string" required:"true"`

	IdnLangCode *string `type:"string"`
}

// String returns the string representation
func (s CheckDomainAvailabilityInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s CheckDomainAvailabilityInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *CheckDomainAvailabilityInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "CheckDomainAvailabilityInput"}
	if s.DomainName == nil {
		invalidParams.Add(request.NewErrParamRequired("DomainName"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

type CheckDomainAvailabilityOutput struct {
	_ struct{} `type:"structure"`

	Availability *string `type:"string" required:"true" enum:"DomainAvailability"`
}

// String returns the string representation
func (s CheckDomainAvailabilityOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s CheckDomainAvailabilityOutput) GoString() string {
	return s.String()
}

type ContactDetail struct {
	_ struct{} `type:"structure"`

	AddressLine1 *string `type:"string"`

	AddressLine2 *string `type:"string"`

	City *string `type:"string"`

	ContactType *string `type:"string" enum:"ContactType"`

	CountryCode *string `type:"string" enum:"CountryCode"`

	Email *string `type:"string"`

	ExtraParams []*ExtraParam `type:"list"`

	Fax *string `type:"string"`

	FirstName *string `type:"string"`

	LastName *string `type:"string"`

	OrganizationName *string `type:"string"`

	PhoneNumber *string `type:"string"`

	State *string `type:"string"`

	ZipCode *string `type:"string"`
}

// String returns the string representation
func (s ContactDetail) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s ContactDetail) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ContactDetail) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "ContactDetail"}
	if s.ExtraParams != nil {
		for i, v := range s.ExtraParams {
			if v == nil {
				continue
			}
			if err := v.Validate(); err != nil {
				invalidParams.AddNested(fmt.Sprintf("%s[%v]", "ExtraParams", i), err.(request.ErrInvalidParams))
			}
		}
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

type DeleteTagsForDomainInput struct {
	_ struct{} `type:"structure"`

	DomainName *string `type:"string" required:"true"`

	TagsToDelete []*string `type:"list" required:"true"`
}

// String returns the string representation
func (s DeleteTagsForDomainInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteTagsForDomainInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DeleteTagsForDomainInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DeleteTagsForDomainInput"}
	if s.DomainName == nil {
		invalidParams.Add(request.NewErrParamRequired("DomainName"))
	}
	if s.TagsToDelete == nil {
		invalidParams.Add(request.NewErrParamRequired("TagsToDelete"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

type DeleteTagsForDomainOutput struct {
	_ struct{} `type:"structure"`
}

// String returns the string representation
func (s DeleteTagsForDomainOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteTagsForDomainOutput) GoString() string {
	return s.String()
}

type DisableDomainAutoRenewInput struct {
	_ struct{} `type:"structure"`

	DomainName *string `type:"string" required:"true"`
}

// String returns the string representation
func (s DisableDomainAutoRenewInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s DisableDomainAutoRenewInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DisableDomainAutoRenewInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DisableDomainAutoRenewInput"}
	if s.DomainName == nil {
		invalidParams.Add(request.NewErrParamRequired("DomainName"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

type DisableDomainAutoRenewOutput struct {
	_ struct{} `type:"structure"`
}

// String returns the string representation
func (s DisableDomainAutoRenewOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s DisableDomainAutoRenewOutput) GoString() string {
	return s.String()
}

type DisableDomainTransferLockInput struct {
	_ struct{} `type:"structure"`

	DomainName *string `type:"string" required:"true"`
}

// String returns the string representation
func (s DisableDomainTransferLockInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s DisableDomainTransferLockInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DisableDomainTransferLockInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DisableDomainTransferLockInput"}
	if s.DomainName == nil {
		invalidParams.Add(request.NewErrParamRequired("DomainName"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

type DisableDomainTransferLockOutput struct {
	_ struct{} `type:"structure"`

	OperationId *string `type:"string" required:"true"`
}

// String returns the string representation
func (s DisableDomainTransferLockOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s DisableDomainTransferLockOutput) GoString() string {
	return s.String()
}

type DomainSuggestion struct {
	_ struct{} `type:"structure"`

	Availability *string `type:"string"`

	DomainName *string `type:"string"`
}

// String returns the string representation
func (s DomainSuggestion) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s DomainSuggestion) GoString() string {
	return s.String()
}

type DomainSummary struct {
	_ struct{} `type:"structure"`

	AutoRenew *bool `type:"boolean"`

	DomainName *string `type:"string" required:"true"`

	Expiry *time.Time `type:"timestamp" timestampFormat:"unix"`

	TransferLock *bool `type:"boolean"`
}

// String returns the string representation
func (s DomainSummary) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s DomainSummary) GoString() string {
	return s.String()
}

type EnableDomainAutoRenewInput struct {
	_ struct{} `type:"structure"`

	DomainName *string `type:"string" required:"true"`
}

// String returns the string representation
func (s EnableDomainAutoRenewInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s EnableDomainAutoRenewInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *EnableDomainAutoRenewInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "EnableDomainAutoRenewInput"}
	if s.DomainName == nil {
		invalidParams.Add(request.NewErrParamRequired("DomainName"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

type EnableDomainAutoRenewOutput struct {
	_ struct{} `type:"structure"`
}

// String returns the string representation
func (s EnableDomainAutoRenewOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s EnableDomainAutoRenewOutput) GoString() string {
	return s.String()
}

type EnableDomainTransferLockInput struct {
	_ struct{} `type:"structure"`

	DomainName *string `type:"string" required:"true"`
}

// String returns the string representation
func (s EnableDomainTransferLockInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s EnableDomainTransferLockInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *EnableDomainTransferLockInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "EnableDomainTransferLockInput"}
	if s.DomainName == nil {
		invalidParams.Add(request.NewErrParamRequired("DomainName"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

type EnableDomainTransferLockOutput struct {
	_ struct{} `type:"structure"`

	OperationId *string `type:"string" required:"true"`
}

// String returns the string representation
func (s EnableDomainTransferLockOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s EnableDomainTransferLockOutput) GoString() string {
	return s.String()
}

type ExtraParam struct {
	_ struct{} `type:"structure"`

	Name *string `type:"string" required:"true" enum:"ExtraParamName"`

	Value *string `type:"string" required:"true"`
}

// String returns the string representation
func (s ExtraParam) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s ExtraParam) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ExtraParam) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "ExtraParam"}
	if s.Name == nil {
		invalidParams.Add(request.NewErrParamRequired("Name"))
	}
	if s.Value == nil {
		invalidParams.Add(request.NewErrParamRequired("Value"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

type GetContactReachabilityStatusInput struct {
	_ struct{} `type:"structure"`

	DomainName *string `locationName:"domainName" type:"string"`
}

// String returns the string representation
func (s GetContactReachabilityStatusInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s GetContactReachabilityStatusInput) GoString() string {
	return s.String()
}

type GetContactReachabilityStatusOutput struct {
	_ struct{} `type:"structure"`

	DomainName *string `locationName:"domainName" type:"string"`

	Status *string `locationName:"status" type:"string" enum:"ReachabilityStatus"`
}

// String returns the string representation
func (s GetContactReachabilityStatusOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s GetContactReachabilityStatusOutput) GoString() string {
	return s.String()
}

type GetDomainDetailInput struct {
	_ struct{} `type:"structure"`

	DomainName *string `type:"string" required:"true"`
}

// String returns the string representation
func (s GetDomainDetailInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s GetDomainDetailInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *GetDomainDetailInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "GetDomainDetailInput"}
	if s.DomainName == nil {
		invalidParams.Add(request.NewErrParamRequired("DomainName"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

type GetDomainDetailOutput struct {
	_ struct{} `type:"structure"`

	AbuseContactEmail *string `type:"string"`

	AbuseContactPhone *string `type:"string"`

	AdminContact *ContactDetail `type:"structure" required:"true"`

	AdminPrivacy *bool `type:"boolean"`

	AutoRenew *bool `type:"boolean"`

	CreationDate *time.Time `type:"timestamp" timestampFormat:"unix"`

	DnsSec *string `type:"string"`

	DomainName *string `type:"string" required:"true"`

	ExpirationDate *time.Time `type:"timestamp" timestampFormat:"unix"`

	Nameservers []*Nameserver `type:"list" required:"true"`

	RegistrantContact *ContactDetail `type:"structure" required:"true"`

	RegistrantPrivacy *bool `type:"boolean"`

	RegistrarName *string `type:"string"`

	RegistrarUrl *string `type:"string"`

	RegistryDomainId *string `type:"string"`

	Reseller *string `type:"string"`

	StatusList []*string `type:"list"`

	TechContact *ContactDetail `type:"structure" required:"true"`

	TechPrivacy *bool `type:"boolean"`

	UpdatedDate *time.Time `type:"timestamp" timestampFormat:"unix"`

	WhoIsServer *string `type:"string"`
}

// String returns the string representation
func (s GetDomainDetailOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s GetDomainDetailOutput) GoString() string {
	return s.String()
}

type GetDomainSuggestionsInput struct {
	_ struct{} `type:"structure"`

	DomainName *string `type:"string" required:"true"`

	OnlyAvailable *bool `type:"boolean" required:"true"`

	SuggestionCount *int64 `type:"integer" required:"true"`
}

// String returns the string representation
func (s GetDomainSuggestionsInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s GetDomainSuggestionsInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *GetDomainSuggestionsInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "GetDomainSuggestionsInput"}
	if s.DomainName == nil {
		invalidParams.Add(request.NewErrParamRequired("DomainName"))
	}
	if s.OnlyAvailable == nil {
		invalidParams.Add(request.NewErrParamRequired("OnlyAvailable"))
	}
	if s.SuggestionCount == nil {
		invalidParams.Add(request.NewErrParamRequired("SuggestionCount"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

type GetDomainSuggestionsOutput struct {
	_ struct{} `type:"structure"`

	SuggestionsList []*DomainSuggestion `type:"list"`
}

// String returns the string representation
func (s GetDomainSuggestionsOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s GetDomainSuggestionsOutput) GoString() string {
	return s.String()
}

type GetOperationDetailInput struct {
	_ struct{} `type:"structure"`

	OperationId *string `type:"string" required:"true"`
}

// String returns the string representation
func (s GetOperationDetailInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s GetOperationDetailInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *GetOperationDetailInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "GetOperationDetailInput"}
	if s.OperationId == nil {
		invalidParams.Add(request.NewErrParamRequired("OperationId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

type GetOperationDetailOutput struct {
	_ struct{} `type:"structure"`

	DomainName *string `type:"string"`

	Message *string `type:"string"`

	OperationId *string `type:"string"`

	Status *string `type:"string" enum:"OperationStatus"`

	SubmittedDate *time.Time `type:"timestamp" timestampFormat:"unix"`

	Type *string `type:"string" enum:"OperationType"`
}

// String returns the string representation
func (s GetOperationDetailOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s GetOperationDetailOutput) GoString() string {
	return s.String()
}

type ListDomainsInput struct {
	_ struct{} `type:"structure"`

	Marker *string `type:"string"`

	MaxItems *int64 `type:"integer"`
}

// String returns the string representation
func (s ListDomainsInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s ListDomainsInput) GoString() string {
	return s.String()
}

type ListDomainsOutput struct {
	_ struct{} `type:"structure"`

	Domains []*DomainSummary `type:"list" required:"true"`

	NextPageMarker *string `type:"string"`
}

// String returns the string representation
func (s ListDomainsOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s ListDomainsOutput) GoString() string {
	return s.String()
}

type ListOperationsInput struct {
	_ struct{} `type:"structure"`

	Marker *string `type:"string"`

	MaxItems *int64 `type:"integer"`
}

// String returns the string representation
func (s ListOperationsInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s ListOperationsInput) GoString() string {
	return s.String()
}

type ListOperationsOutput struct {
	_ struct{} `type:"structure"`

	NextPageMarker *string `type:"string"`

	Operations []*OperationSummary `type:"list" required:"true"`
}

// String returns the string representation
func (s ListOperationsOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s ListOperationsOutput) GoString() string {
	return s.String()
}

type ListTagsForDomainInput struct {
	_ struct{} `type:"structure"`

	DomainName *string `type:"string" required:"true"`
}

// String returns the string representation
func (s ListTagsForDomainInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s ListTagsForDomainInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ListTagsForDomainInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "ListTagsForDomainInput"}
	if s.DomainName == nil {
		invalidParams.Add(request.NewErrParamRequired("DomainName"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

type ListTagsForDomainOutput struct {
	_ struct{} `type:"structure"`

	TagList []*Tag `type:"list" required:"true"`
}

// String returns the string representation
func (s ListTagsForDomainOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s ListTagsForDomainOutput) GoString() string {
	return s.String()
}

type Nameserver struct {
	_ struct{} `type:"structure"`

	GlueIps []*string `type:"list"`

	Name *string `type:"string" required:"true"`
}

// String returns the string representation
func (s Nameserver) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s Nameserver) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *Nameserver) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "Nameserver"}
	if s.Name == nil {
		invalidParams.Add(request.NewErrParamRequired("Name"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

type OperationSummary struct {
	_ struct{} `type:"structure"`

	OperationId *string `type:"string" required:"true"`

	Status *string `type:"string" required:"true" enum:"OperationStatus"`

	SubmittedDate *time.Time `type:"timestamp" timestampFormat:"unix" required:"true"`

	Type *string `type:"string" required:"true" enum:"OperationType"`
}

// String returns the string representation
func (s OperationSummary) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s OperationSummary) GoString() string {
	return s.String()
}

type RegisterDomainInput struct {
	_ struct{} `type:"structure"`

	AdminContact *ContactDetail `type:"structure" required:"true"`

	AutoRenew *bool `type:"boolean"`

	DomainName *string `type:"string" required:"true"`

	DurationInYears *int64 `min:"1" type:"integer" required:"true"`

	IdnLangCode *string `type:"string"`

	PrivacyProtectAdminContact *bool `type:"boolean"`

	PrivacyProtectRegistrantContact *bool `type:"boolean"`

	PrivacyProtectTechContact *bool `type:"boolean"`

	RegistrantContact *ContactDetail `type:"structure" required:"true"`

	TechContact *ContactDetail `type:"structure" required:"true"`
}

// String returns the string representation
func (s RegisterDomainInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s RegisterDomainInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *RegisterDomainInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "RegisterDomainInput"}
	if s.AdminContact == nil {
		invalidParams.Add(request.NewErrParamRequired("AdminContact"))
	}
	if s.DomainName == nil {
		invalidParams.Add(request.NewErrParamRequired("DomainName"))
	}
	if s.DurationInYears == nil {
		invalidParams.Add(request.NewErrParamRequired("DurationInYears"))
	}
	if s.DurationInYears != nil && *s.DurationInYears < 1 {
		invalidParams.Add(request.NewErrParamMinValue("DurationInYears", 1))
	}
	if s.RegistrantContact == nil {
		invalidParams.Add(request.NewErrParamRequired("RegistrantContact"))
	}
	if s.TechContact == nil {
		invalidParams.Add(request.NewErrParamRequired("TechContact"))
	}
	if s.AdminContact != nil {
		if err := s.AdminContact.Validate(); err != nil {
			invalidParams.AddNested("AdminContact", err.(request.ErrInvalidParams))
		}
	}
	if s.RegistrantContact != nil {
		if err := s.RegistrantContact.Validate(); err != nil {
			invalidParams.AddNested("RegistrantContact", err.(request.ErrInvalidParams))
		}
	}
	if s.TechContact != nil {
		if err := s.TechContact.Validate(); err != nil {
			invalidParams.AddNested("TechContact", err.(request.ErrInvalidParams))
		}
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

type RegisterDomainOutput struct {
	_ struct{} `type:"structure"`

	OperationId *string `type:"string" required:"true"`
}

// String returns the string representation
func (s RegisterDomainOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s RegisterDomainOutput) GoString() string {
	return s.String()
}

type RenewDomainInput struct {
	_ struct{} `type:"structure"`

	CurrentExpiryYear *int64 `type:"integer" required:"true"`

	DomainName *string `type:"string" required:"true"`

	DurationInYears *int64 `min:"1" type:"integer"`
}

// String returns the string representation
func (s RenewDomainInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s RenewDomainInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *RenewDomainInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "RenewDomainInput"}
	if s.CurrentExpiryYear == nil {
		invalidParams.Add(request.NewErrParamRequired("CurrentExpiryYear"))
	}
	if s.DomainName == nil {
		invalidParams.Add(request.NewErrParamRequired("DomainName"))
	}
	if s.DurationInYears != nil && *s.DurationInYears < 1 {
		invalidParams.Add(request.NewErrParamMinValue("DurationInYears", 1))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

type RenewDomainOutput struct {
	_ struct{} `type:"structure"`

	OperationId *string `type:"string" required:"true"`
}

// String returns the string representation
func (s RenewDomainOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s RenewDomainOutput) GoString() string {
	return s.String()
}

type ResendContactReachabilityEmailInput struct {
	_ struct{} `type:"structure"`

	DomainName *string `locationName:"domainName" type:"string"`
}

// String returns the string representation
func (s ResendContactReachabilityEmailInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s ResendContactReachabilityEmailInput) GoString() string {
	return s.String()
}

type ResendContactReachabilityEmailOutput struct {
	_ struct{} `type:"structure"`

	DomainName *string `locationName:"domainName" type:"string"`

	EmailAddress *string `locationName:"emailAddress" type:"string"`

	IsAlreadyVerified *bool `locationName:"isAlreadyVerified" type:"boolean"`
}

// String returns the string representation
func (s ResendContactReachabilityEmailOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s ResendContactReachabilityEmailOutput) GoString() string {
	return s.String()
}

type RetrieveDomainAuthCodeInput struct {
	_ struct{} `type:"structure"`

	DomainName *string `type:"string" required:"true"`
}

// String returns the string representation
func (s RetrieveDomainAuthCodeInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s RetrieveDomainAuthCodeInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *RetrieveDomainAuthCodeInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "RetrieveDomainAuthCodeInput"}
	if s.DomainName == nil {
		invalidParams.Add(request.NewErrParamRequired("DomainName"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

type RetrieveDomainAuthCodeOutput struct {
	_ struct{} `type:"structure"`

	AuthCode *string `type:"string" required:"true"`
}

// String returns the string representation
func (s RetrieveDomainAuthCodeOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s RetrieveDomainAuthCodeOutput) GoString() string {
	return s.String()
}

type Tag struct {
	_ struct{} `type:"structure"`

	Key *string `type:"string"`

	Value *string `type:"string"`
}

// String returns the string representation
func (s Tag) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s Tag) GoString() string {
	return s.String()
}

type TransferDomainInput struct {
	_ struct{} `type:"structure"`

	AdminContact *ContactDetail `type:"structure" required:"true"`

	AuthCode *string `type:"string"`

	AutoRenew *bool `type:"boolean"`

	DomainName *string `type:"string" required:"true"`

	DurationInYears *int64 `min:"1" type:"integer" required:"true"`

	IdnLangCode *string `type:"string"`

	Nameservers []*Nameserver `type:"list"`

	PrivacyProtectAdminContact *bool `type:"boolean"`

	PrivacyProtectRegistrantContact *bool `type:"boolean"`

	PrivacyProtectTechContact *bool `type:"boolean"`

	RegistrantContact *ContactDetail `type:"structure" required:"true"`

	TechContact *ContactDetail `type:"structure" required:"true"`
}

// String returns the string representation
func (s TransferDomainInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s TransferDomainInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *TransferDomainInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "TransferDomainInput"}
	if s.AdminContact == nil {
		invalidParams.Add(request.NewErrParamRequired("AdminContact"))
	}
	if s.DomainName == nil {
		invalidParams.Add(request.NewErrParamRequired("DomainName"))
	}
	if s.DurationInYears == nil {
		invalidParams.Add(request.NewErrParamRequired("DurationInYears"))
	}
	if s.DurationInYears != nil && *s.DurationInYears < 1 {
		invalidParams.Add(request.NewErrParamMinValue("DurationInYears", 1))
	}
	if s.RegistrantContact == nil {
		invalidParams.Add(request.NewErrParamRequired("RegistrantContact"))
	}
	if s.TechContact == nil {
		invalidParams.Add(request.NewErrParamRequired("TechContact"))
	}
	if s.AdminContact != nil {
		if err := s.AdminContact.Validate(); err != nil {
			invalidParams.AddNested("AdminContact", err.(request.ErrInvalidParams))
		}
	}
	if s.Nameservers != nil {
		for i, v := range s.Nameservers {
			if v == nil {
				continue
			}
			if err := v.Validate(); err != nil {
				invalidParams.AddNested(fmt.Sprintf("%s[%v]", "Nameservers", i), err.(request.ErrInvalidParams))
			}
		}
	}
	if s.RegistrantContact != nil {
		if err := s.RegistrantContact.Validate(); err != nil {
			invalidParams.AddNested("RegistrantContact", err.(request.ErrInvalidParams))
		}
	}
	if s.TechContact != nil {
		if err := s.TechContact.Validate(); err != nil {
			invalidParams.AddNested("TechContact", err.(request.ErrInvalidParams))
		}
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

type TransferDomainOutput struct {
	_ struct{} `type:"structure"`

	OperationId *string `type:"string" required:"true"`
}

// String returns the string representation
func (s TransferDomainOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s TransferDomainOutput) GoString() string {
	return s.String()
}

type UpdateDomainContactInput struct {
	_ struct{} `type:"structure"`

	AdminContact *ContactDetail `type:"structure"`

	DomainName *string `type:"string" required:"true"`

	RegistrantContact *ContactDetail `type:"structure"`

	TechContact *ContactDetail `type:"structure"`
}

// String returns the string representation
func (s UpdateDomainContactInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateDomainContactInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *UpdateDomainContactInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "UpdateDomainContactInput"}
	if s.DomainName == nil {
		invalidParams.Add(request.NewErrParamRequired("DomainName"))
	}
	if s.AdminContact != nil {
		if err := s.AdminContact.Validate(); err != nil {
			invalidParams.AddNested("AdminContact", err.(request.ErrInvalidParams))
		}
	}
	if s.RegistrantContact != nil {
		if err := s.RegistrantContact.Validate(); err != nil {
			invalidParams.AddNested("RegistrantContact", err.(request.ErrInvalidParams))
		}
	}
	if s.TechContact != nil {
		if err := s.TechContact.Validate(); err != nil {
			invalidParams.AddNested("TechContact", err.(request.ErrInvalidParams))
		}
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

type UpdateDomainContactOutput struct {
	_ struct{} `type:"structure"`

	OperationId *string `type:"string" required:"true"`
}

// String returns the string representation
func (s UpdateDomainContactOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateDomainContactOutput) GoString() string {
	return s.String()
}

type UpdateDomainContactPrivacyInput struct {
	_ struct{} `type:"structure"`

	AdminPrivacy *bool `type:"boolean"`

	DomainName *string `type:"string" required:"true"`

	RegistrantPrivacy *bool `type:"boolean"`

	TechPrivacy *bool `type:"boolean"`
}

// String returns the string representation
func (s UpdateDomainContactPrivacyInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateDomainContactPrivacyInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *UpdateDomainContactPrivacyInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "UpdateDomainContactPrivacyInput"}
	if s.DomainName == nil {
		invalidParams.Add(request.NewErrParamRequired("DomainName"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

type UpdateDomainContactPrivacyOutput struct {
	_ struct{} `type:"structure"`

	OperationId *string `type:"string" required:"true"`
}

// String returns the string representation
func (s UpdateDomainContactPrivacyOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateDomainContactPrivacyOutput) GoString() string {
	return s.String()
}

type UpdateDomainNameserversInput struct {
	_ struct{} `type:"structure"`

	DomainName *string `type:"string" required:"true"`

	FIAuthKey *string `type:"string"`

	Nameservers []*Nameserver `type:"list" required:"true"`
}

// String returns the string representation
func (s UpdateDomainNameserversInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateDomainNameserversInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *UpdateDomainNameserversInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "UpdateDomainNameserversInput"}
	if s.DomainName == nil {
		invalidParams.Add(request.NewErrParamRequired("DomainName"))
	}
	if s.Nameservers == nil {
		invalidParams.Add(request.NewErrParamRequired("Nameservers"))
	}
	if s.Nameservers != nil {
		for i, v := range s.Nameservers {
			if v == nil {
				continue
			}
			if err := v.Validate(); err != nil {
				invalidParams.AddNested(fmt.Sprintf("%s[%v]", "Nameservers", i), err.(request.ErrInvalidParams))
			}
		}
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

type UpdateDomainNameserversOutput struct {
	_ struct{} `type:"structure"`

	OperationId *string `type:"string" required:"true"`
}

// String returns the string representation
func (s UpdateDomainNameserversOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateDomainNameserversOutput) GoString() string {
	return s.String()
}

type UpdateTagsForDomainInput struct {
	_ struct{} `type:"structure"`

	DomainName *string `type:"string" required:"true"`

	TagsToUpdate []*Tag `type:"list"`
}

// String returns the string representation
func (s UpdateTagsForDomainInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateTagsForDomainInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *UpdateTagsForDomainInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "UpdateTagsForDomainInput"}
	if s.DomainName == nil {
		invalidParams.Add(request.NewErrParamRequired("DomainName"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

type UpdateTagsForDomainOutput struct {
	_ struct{} `type:"structure"`
}

// String returns the string representation
func (s UpdateTagsForDomainOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateTagsForDomainOutput) GoString() string {
	return s.String()
}

type ViewBillingInput struct {
	_ struct{} `type:"structure"`

	End *time.Time `type:"timestamp" timestampFormat:"unix"`

	Marker *string `type:"string"`

	MaxItems *int64 `type:"integer"`

	Start *time.Time `type:"timestamp" timestampFormat:"unix"`
}

// String returns the string representation
func (s ViewBillingInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s ViewBillingInput) GoString() string {
	return s.String()
}

type ViewBillingOutput struct {
	_ struct{} `type:"structure"`

	BillingRecords []*BillingRecord `type:"list"`

	NextPageMarker *string `type:"string"`
}

// String returns the string representation
func (s ViewBillingOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s ViewBillingOutput) GoString() string {
	return s.String()
}

const (
	// @enum ContactType
	ContactTypePerson = "PERSON"
	// @enum ContactType
	ContactTypeCompany = "COMPANY"
	// @enum ContactType
	ContactTypeAssociation = "ASSOCIATION"
	// @enum ContactType
	ContactTypePublicBody = "PUBLIC_BODY"
	// @enum ContactType
	ContactTypeReseller = "RESELLER"
)

const (
	// @enum CountryCode
	CountryCodeAd = "AD"
	// @enum CountryCode
	CountryCodeAe = "AE"
	// @enum CountryCode
	CountryCodeAf = "AF"
	// @enum CountryCode
	CountryCodeAg = "AG"
	// @enum CountryCode
	CountryCodeAi = "AI"
	// @enum CountryCode
	CountryCodeAl = "AL"
	// @enum CountryCode
	CountryCodeAm = "AM"
	// @enum CountryCode
	CountryCodeAn = "AN"
	// @enum CountryCode
	CountryCodeAo = "AO"
	// @enum CountryCode
	CountryCodeAq = "AQ"
	// @enum CountryCode
	CountryCodeAr = "AR"
	// @enum CountryCode
	CountryCodeAs = "AS"
	// @enum CountryCode
	CountryCodeAt = "AT"
	// @enum CountryCode
	CountryCodeAu = "AU"
	// @enum CountryCode
	CountryCodeAw = "AW"
	// @enum CountryCode
	CountryCodeAz = "AZ"
	// @enum CountryCode
	CountryCodeBa = "BA"
	// @enum CountryCode
	CountryCodeBb = "BB"
	// @enum CountryCode
	CountryCodeBd = "BD"
	// @enum CountryCode
	CountryCodeBe = "BE"
	// @enum CountryCode
	CountryCodeBf = "BF"
	// @enum CountryCode
	CountryCodeBg = "BG"
	// @enum CountryCode
	CountryCodeBh = "BH"
	// @enum CountryCode
	CountryCodeBi = "BI"
	// @enum CountryCode
	CountryCodeBj = "BJ"
	// @enum CountryCode
	CountryCodeBl = "BL"
	// @enum CountryCode
	CountryCodeBm = "BM"
	// @enum CountryCode
	CountryCodeBn = "BN"
	// @enum CountryCode
	CountryCodeBo = "BO"
	// @enum CountryCode
	CountryCodeBr = "BR"
	// @enum CountryCode
	CountryCodeBs = "BS"
	// @enum CountryCode
	CountryCodeBt = "BT"
	// @enum CountryCode
	CountryCodeBw = "BW"
	// @enum CountryCode
	CountryCodeBy = "BY"
	// @enum CountryCode
	CountryCodeBz = "BZ"
	// @enum CountryCode
	CountryCodeCa = "CA"
	// @enum CountryCode
	CountryCodeCc = "CC"
	// @enum CountryCode
	CountryCodeCd = "CD"
	// @enum CountryCode
	CountryCodeCf = "CF"
	// @enum CountryCode
	CountryCodeCg = "CG"
	// @enum CountryCode
	CountryCodeCh = "CH"
	// @enum CountryCode
	CountryCodeCi = "CI"
	// @enum CountryCode
	CountryCodeCk = "CK"
	// @enum CountryCode
	CountryCodeCl = "CL"
	// @enum CountryCode
	CountryCodeCm = "CM"
	// @enum CountryCode
	CountryCodeCn = "CN"
	// @enum CountryCode
	CountryCodeCo = "CO"
	// @enum CountryCode
	CountryCodeCr = "CR"
	// @enum CountryCode
	CountryCodeCu = "CU"
	// @enum CountryCode
	CountryCodeCv = "CV"
	// @enum CountryCode
	CountryCodeCx = "CX"
	// @enum CountryCode
	CountryCodeCy = "CY"
	// @enum CountryCode
	CountryCodeCz = "CZ"
	// @enum CountryCode
	CountryCodeDe = "DE"
	// @enum CountryCode
	CountryCodeDj = "DJ"
	// @enum CountryCode
	CountryCodeDk = "DK"
	// @enum CountryCode
	CountryCodeDm = "DM"
	// @enum CountryCode
	CountryCodeDo = "DO"
	// @enum CountryCode
	CountryCodeDz = "DZ"
	// @enum CountryCode
	CountryCodeEc = "EC"
	// @enum CountryCode
	CountryCodeEe = "EE"
	// @enum CountryCode
	CountryCodeEg = "EG"
	// @enum CountryCode
	CountryCodeEr = "ER"
	// @enum CountryCode
	CountryCodeEs = "ES"
	// @enum CountryCode
	CountryCodeEt = "ET"
	// @enum CountryCode
	CountryCodeFi = "FI"
	// @enum CountryCode
	CountryCodeFj = "FJ"
	// @enum CountryCode
	CountryCodeFk = "FK"
	// @enum CountryCode
	CountryCodeFm = "FM"
	// @enum CountryCode
	CountryCodeFo = "FO"
	// @enum CountryCode
	CountryCodeFr = "FR"
	// @enum CountryCode
	CountryCodeGa = "GA"
	// @enum CountryCode
	CountryCodeGb = "GB"
	// @enum CountryCode
	CountryCodeGd = "GD"
	// @enum CountryCode
	CountryCodeGe = "GE"
	// @enum CountryCode
	CountryCodeGh = "GH"
	// @enum CountryCode
	CountryCodeGi = "GI"
	// @enum CountryCode
	CountryCodeGl = "GL"
	// @enum CountryCode
	CountryCodeGm = "GM"
	// @enum CountryCode
	CountryCodeGn = "GN"
	// @enum CountryCode
	CountryCodeGq = "GQ"
	// @enum CountryCode
	CountryCodeGr = "GR"
	// @enum CountryCode
	CountryCodeGt = "GT"
	// @enum CountryCode
	CountryCodeGu = "GU"
	// @enum CountryCode
	CountryCodeGw = "GW"
	// @enum CountryCode
	CountryCodeGy = "GY"
	// @enum CountryCode
	CountryCodeHk = "HK"
	// @enum CountryCode
	CountryCodeHn = "HN"
	// @enum CountryCode
	CountryCodeHr = "HR"
	// @enum CountryCode
	CountryCodeHt = "HT"
	// @enum CountryCode
	CountryCodeHu = "HU"
	// @enum CountryCode
	CountryCodeId = "ID"
	// @enum CountryCode
	CountryCodeIe = "IE"
	// @enum CountryCode
	CountryCodeIl = "IL"
	// @enum CountryCode
	CountryCodeIm = "IM"
	// @enum CountryCode
	CountryCodeIn = "IN"
	// @enum CountryCode
	CountryCodeIq = "IQ"
	// @enum CountryCode
	CountryCodeIr = "IR"
	// @enum CountryCode
	CountryCodeIs = "IS"
	// @enum CountryCode
	CountryCodeIt = "IT"
	// @enum CountryCode
	CountryCodeJm = "JM"
	// @enum CountryCode
	CountryCodeJo = "JO"
	// @enum CountryCode
	CountryCodeJp = "JP"
	// @enum CountryCode
	CountryCodeKe = "KE"
	// @enum CountryCode
	CountryCodeKg = "KG"
	// @enum CountryCode
	CountryCodeKh = "KH"
	// @enum CountryCode
	CountryCodeKi = "KI"
	// @enum CountryCode
	CountryCodeKm = "KM"
	// @enum CountryCode
	CountryCodeKn = "KN"
	// @enum CountryCode
	CountryCodeKp = "KP"
	// @enum CountryCode
	CountryCodeKr = "KR"
	// @enum CountryCode
	CountryCodeKw = "KW"
	// @enum CountryCode
	CountryCodeKy = "KY"
	// @enum CountryCode
	CountryCodeKz = "KZ"
	// @enum CountryCode
	CountryCodeLa = "LA"
	// @enum CountryCode
	CountryCodeLb = "LB"
	// @enum CountryCode
	CountryCodeLc = "LC"
	// @enum CountryCode
	CountryCodeLi = "LI"
	// @enum CountryCode
	CountryCodeLk = "LK"
	// @enum CountryCode
	CountryCodeLr = "LR"
	// @enum CountryCode
	CountryCodeLs = "LS"
	// @enum CountryCode
	CountryCodeLt = "LT"
	// @enum CountryCode
	CountryCodeLu = "LU"
	// @enum CountryCode
	CountryCodeLv = "LV"
	// @enum CountryCode
	CountryCodeLy = "LY"
	// @enum CountryCode
	CountryCodeMa = "MA"
	// @enum CountryCode
	CountryCodeMc = "MC"
	// @enum CountryCode
	CountryCodeMd = "MD"
	// @enum CountryCode
	CountryCodeMe = "ME"
	// @enum CountryCode
	CountryCodeMf = "MF"
	// @enum CountryCode
	CountryCodeMg = "MG"
	// @enum CountryCode
	CountryCodeMh = "MH"
	// @enum CountryCode
	CountryCodeMk = "MK"
	// @enum CountryCode
	CountryCodeMl = "ML"
	// @enum CountryCode
	CountryCodeMm = "MM"
	// @enum CountryCode
	CountryCodeMn = "MN"
	// @enum CountryCode
	CountryCodeMo = "MO"
	// @enum CountryCode
	CountryCodeMp = "MP"
	// @enum CountryCode
	CountryCodeMr = "MR"
	// @enum CountryCode
	CountryCodeMs = "MS"
	// @enum CountryCode
	CountryCodeMt = "MT"
	// @enum CountryCode
	CountryCodeMu = "MU"
	// @enum CountryCode
	CountryCodeMv = "MV"
	// @enum CountryCode
	CountryCodeMw = "MW"
	// @enum CountryCode
	CountryCodeMx = "MX"
	// @enum CountryCode
	CountryCodeMy = "MY"
	// @enum CountryCode
	CountryCodeMz = "MZ"
	// @enum CountryCode
	CountryCodeNa = "NA"
	// @enum CountryCode
	CountryCodeNc = "NC"
	// @enum CountryCode
	CountryCodeNe = "NE"
	// @enum CountryCode
	CountryCodeNg = "NG"
	// @enum CountryCode
	CountryCodeNi = "NI"
	// @enum CountryCode
	CountryCodeNl = "NL"
	// @enum CountryCode
	CountryCodeNo = "NO"
	// @enum CountryCode
	CountryCodeNp = "NP"
	// @enum CountryCode
	CountryCodeNr = "NR"
	// @enum CountryCode
	CountryCodeNu = "NU"
	// @enum CountryCode
	CountryCodeNz = "NZ"
	// @enum CountryCode
	CountryCodeOm = "OM"
	// @enum CountryCode
	CountryCodePa = "PA"
	// @enum CountryCode
	CountryCodePe = "PE"
	// @enum CountryCode
	CountryCodePf = "PF"
	// @enum CountryCode
	CountryCodePg = "PG"
	// @enum CountryCode
	CountryCodePh = "PH"
	// @enum CountryCode
	CountryCodePk = "PK"
	// @enum CountryCode
	CountryCodePl = "PL"
	// @enum CountryCode
	CountryCodePm = "PM"
	// @enum CountryCode
	CountryCodePn = "PN"
	// @enum CountryCode
	CountryCodePr = "PR"
	// @enum CountryCode
	CountryCodePt = "PT"
	// @enum CountryCode
	CountryCodePw = "PW"
	// @enum CountryCode
	CountryCodePy = "PY"
	// @enum CountryCode
	CountryCodeQa = "QA"
	// @enum CountryCode
	CountryCodeRo = "RO"
	// @enum CountryCode
	CountryCodeRs = "RS"
	// @enum CountryCode
	CountryCodeRu = "RU"
	// @enum CountryCode
	CountryCodeRw = "RW"
	// @enum CountryCode
	CountryCodeSa = "SA"
	// @enum CountryCode
	CountryCodeSb = "SB"
	// @enum CountryCode
	CountryCodeSc = "SC"
	// @enum CountryCode
	CountryCodeSd = "SD"
	// @enum CountryCode
	CountryCodeSe = "SE"
	// @enum CountryCode
	CountryCodeSg = "SG"
	// @enum CountryCode
	CountryCodeSh = "SH"
	// @enum CountryCode
	CountryCodeSi = "SI"
	// @enum CountryCode
	CountryCodeSk = "SK"
	// @enum CountryCode
	CountryCodeSl = "SL"
	// @enum CountryCode
	CountryCodeSm = "SM"
	// @enum CountryCode
	CountryCodeSn = "SN"
	// @enum CountryCode
	CountryCodeSo = "SO"
	// @enum CountryCode
	CountryCodeSr = "SR"
	// @enum CountryCode
	CountryCodeSt = "ST"
	// @enum CountryCode
	CountryCodeSv = "SV"
	// @enum CountryCode
	CountryCodeSy = "SY"
	// @enum CountryCode
	CountryCodeSz = "SZ"
	// @enum CountryCode
	CountryCodeTc = "TC"
	// @enum CountryCode
	CountryCodeTd = "TD"
	// @enum CountryCode
	CountryCodeTg = "TG"
	// @enum CountryCode
	CountryCodeTh = "TH"
	// @enum CountryCode
	CountryCodeTj = "TJ"
	// @enum CountryCode
	CountryCodeTk = "TK"
	// @enum CountryCode
	CountryCodeTl = "TL"
	// @enum CountryCode
	CountryCodeTm = "TM"
	// @enum CountryCode
	CountryCodeTn = "TN"
	// @enum CountryCode
	CountryCodeTo = "TO"
	// @enum CountryCode
	CountryCodeTr = "TR"
	// @enum CountryCode
	CountryCodeTt = "TT"
	// @enum CountryCode
	CountryCodeTv = "TV"
	// @enum CountryCode
	CountryCodeTw = "TW"
	// @enum CountryCode
	CountryCodeTz = "TZ"
	// @enum CountryCode
	CountryCodeUa = "UA"
	// @enum CountryCode
	CountryCodeUg = "UG"
	// @enum CountryCode
	CountryCodeUs = "US"
	// @enum CountryCode
	CountryCodeUy = "UY"
	// @enum CountryCode
	CountryCodeUz = "UZ"
	// @enum CountryCode
	CountryCodeVa = "VA"
	// @enum CountryCode
	CountryCodeVc = "VC"
	// @enum CountryCode
	CountryCodeVe = "VE"
	// @enum CountryCode
	CountryCodeVg = "VG"
	// @enum CountryCode
	CountryCodeVi = "VI"
	// @enum CountryCode
	CountryCodeVn = "VN"
	// @enum CountryCode
	CountryCodeVu = "VU"
	// @enum CountryCode
	CountryCodeWf = "WF"
	// @enum CountryCode
	CountryCodeWs = "WS"
	// @enum CountryCode
	CountryCodeYe = "YE"
	// @enum CountryCode
	CountryCodeYt = "YT"
	// @enum CountryCode
	CountryCodeZa = "ZA"
	// @enum CountryCode
	CountryCodeZm = "ZM"
	// @enum CountryCode
	CountryCodeZw = "ZW"
)

const (
	// @enum DomainAvailability
	DomainAvailabilityAvailable = "AVAILABLE"
	// @enum DomainAvailability
	DomainAvailabilityAvailableReserved = "AVAILABLE_RESERVED"
	// @enum DomainAvailability
	DomainAvailabilityAvailablePreorder = "AVAILABLE_PREORDER"
	// @enum DomainAvailability
	DomainAvailabilityUnavailable = "UNAVAILABLE"
	// @enum DomainAvailability
	DomainAvailabilityUnavailablePremium = "UNAVAILABLE_PREMIUM"
	// @enum DomainAvailability
	DomainAvailabilityUnavailableRestricted = "UNAVAILABLE_RESTRICTED"
	// @enum DomainAvailability
	DomainAvailabilityReserved = "RESERVED"
	// @enum DomainAvailability
	DomainAvailabilityDontKnow = "DONT_KNOW"
)

const (
	// @enum ExtraParamName
	ExtraParamNameDunsNumber = "DUNS_NUMBER"
	// @enum ExtraParamName
	ExtraParamNameBrandNumber = "BRAND_NUMBER"
	// @enum ExtraParamName
	ExtraParamNameBirthDepartment = "BIRTH_DEPARTMENT"
	// @enum ExtraParamName
	ExtraParamNameBirthDateInYyyyMmDd = "BIRTH_DATE_IN_YYYY_MM_DD"
	// @enum ExtraParamName
	ExtraParamNameBirthCountry = "BIRTH_COUNTRY"
	// @enum ExtraParamName
	ExtraParamNameBirthCity = "BIRTH_CITY"
	// @enum ExtraParamName
	ExtraParamNameDocumentNumber = "DOCUMENT_NUMBER"
	// @enum ExtraParamName
	ExtraParamNameAuIdNumber = "AU_ID_NUMBER"
	// @enum ExtraParamName
	ExtraParamNameAuIdType = "AU_ID_TYPE"
	// @enum ExtraParamName
	ExtraParamNameCaLegalType = "CA_LEGAL_TYPE"
	// @enum ExtraParamName
	ExtraParamNameCaBusinessEntityType = "CA_BUSINESS_ENTITY_TYPE"
	// @enum ExtraParamName
	ExtraParamNameEsIdentification = "ES_IDENTIFICATION"
	// @enum ExtraParamName
	ExtraParamNameEsIdentificationType = "ES_IDENTIFICATION_TYPE"
	// @enum ExtraParamName
	ExtraParamNameEsLegalForm = "ES_LEGAL_FORM"
	// @enum ExtraParamName
	ExtraParamNameFiBusinessNumber = "FI_BUSINESS_NUMBER"
	// @enum ExtraParamName
	ExtraParamNameFiIdNumber = "FI_ID_NUMBER"
	// @enum ExtraParamName
	ExtraParamNameItPin = "IT_PIN"
	// @enum ExtraParamName
	ExtraParamNameRuPassportData = "RU_PASSPORT_DATA"
	// @enum ExtraParamName
	ExtraParamNameSeIdNumber = "SE_ID_NUMBER"
	// @enum ExtraParamName
	ExtraParamNameSgIdNumber = "SG_ID_NUMBER"
	// @enum ExtraParamName
	ExtraParamNameVatNumber = "VAT_NUMBER"
)

const (
	// @enum OperationStatus
	OperationStatusSubmitted = "SUBMITTED"
	// @enum OperationStatus
	OperationStatusInProgress = "IN_PROGRESS"
	// @enum OperationStatus
	OperationStatusError = "ERROR"
	// @enum OperationStatus
	OperationStatusSuccessful = "SUCCESSFUL"
	// @enum OperationStatus
	OperationStatusFailed = "FAILED"
)

const (
	// @enum OperationType
	OperationTypeRegisterDomain = "REGISTER_DOMAIN"
	// @enum OperationType
	OperationTypeDeleteDomain = "DELETE_DOMAIN"
	// @enum OperationType
	OperationTypeTransferInDomain = "TRANSFER_IN_DOMAIN"
	// @enum OperationType
	OperationTypeUpdateDomainContact = "UPDATE_DOMAIN_CONTACT"
	// @enum OperationType
	OperationTypeUpdateNameserver = "UPDATE_NAMESERVER"
	// @enum OperationType
	OperationTypeChangePrivacyProtection = "CHANGE_PRIVACY_PROTECTION"
	// @enum OperationType
	OperationTypeDomainLock = "DOMAIN_LOCK"
)

const (
	// @enum ReachabilityStatus
	ReachabilityStatusPending = "PENDING"
	// @enum ReachabilityStatus
	ReachabilityStatusDone = "DONE"
	// @enum ReachabilityStatus
	ReachabilityStatusExpired = "EXPIRED"
)
