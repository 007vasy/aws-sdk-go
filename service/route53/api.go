package route53

// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.

import (
	"github.com/awslabs/aws-sdk-go/aws"
	"time"
)

// AssociateVPCWithHostedZoneRequest generates a request for the AssociateVPCWithHostedZone operation.
func (c *Route53) AssociateVPCWithHostedZoneRequest(input *AssociateVPCWithHostedZoneInput) (req *aws.Request, output *AssociateVPCWithHostedZoneOutput) {
	if opAssociateVPCWithHostedZone == nil {
		opAssociateVPCWithHostedZone = &aws.Operation{
			Name:       "AssociateVPCWithHostedZone",
			HTTPMethod: "POST",
			HTTPPath:   "/2013-04-01/hostedzone/{Id}/associatevpc",
		}
	}

	req = aws.NewRequest(c.Service, opAssociateVPCWithHostedZone, input, output)
	output = &AssociateVPCWithHostedZoneOutput{}
	req.Data = output
	return
}

func (c *Route53) AssociateVPCWithHostedZone(input *AssociateVPCWithHostedZoneInput) (output *AssociateVPCWithHostedZoneOutput, err error) {
	req, out := c.AssociateVPCWithHostedZoneRequest(input)
	output = out
	err = req.Send()
	return
}

var opAssociateVPCWithHostedZone *aws.Operation

// ChangeResourceRecordSetsRequest generates a request for the ChangeResourceRecordSets operation.
func (c *Route53) ChangeResourceRecordSetsRequest(input *ChangeResourceRecordSetsInput) (req *aws.Request, output *ChangeResourceRecordSetsOutput) {
	if opChangeResourceRecordSets == nil {
		opChangeResourceRecordSets = &aws.Operation{
			Name:       "ChangeResourceRecordSets",
			HTTPMethod: "POST",
			HTTPPath:   "/2013-04-01/hostedzone/{Id}/rrset/",
		}
	}

	req = aws.NewRequest(c.Service, opChangeResourceRecordSets, input, output)
	output = &ChangeResourceRecordSetsOutput{}
	req.Data = output
	return
}

func (c *Route53) ChangeResourceRecordSets(input *ChangeResourceRecordSetsInput) (output *ChangeResourceRecordSetsOutput, err error) {
	req, out := c.ChangeResourceRecordSetsRequest(input)
	output = out
	err = req.Send()
	return
}

var opChangeResourceRecordSets *aws.Operation

// ChangeTagsForResourceRequest generates a request for the ChangeTagsForResource operation.
func (c *Route53) ChangeTagsForResourceRequest(input *ChangeTagsForResourceInput) (req *aws.Request, output *ChangeTagsForResourceOutput) {
	if opChangeTagsForResource == nil {
		opChangeTagsForResource = &aws.Operation{
			Name:       "ChangeTagsForResource",
			HTTPMethod: "POST",
			HTTPPath:   "/2013-04-01/tags/{ResourceType}/{ResourceId}",
		}
	}

	req = aws.NewRequest(c.Service, opChangeTagsForResource, input, output)
	output = &ChangeTagsForResourceOutput{}
	req.Data = output
	return
}

func (c *Route53) ChangeTagsForResource(input *ChangeTagsForResourceInput) (output *ChangeTagsForResourceOutput, err error) {
	req, out := c.ChangeTagsForResourceRequest(input)
	output = out
	err = req.Send()
	return
}

var opChangeTagsForResource *aws.Operation

// CreateHealthCheckRequest generates a request for the CreateHealthCheck operation.
func (c *Route53) CreateHealthCheckRequest(input *CreateHealthCheckInput) (req *aws.Request, output *CreateHealthCheckOutput) {
	if opCreateHealthCheck == nil {
		opCreateHealthCheck = &aws.Operation{
			Name:       "CreateHealthCheck",
			HTTPMethod: "POST",
			HTTPPath:   "/2013-04-01/healthcheck",
		}
	}

	req = aws.NewRequest(c.Service, opCreateHealthCheck, input, output)
	output = &CreateHealthCheckOutput{}
	req.Data = output
	return
}

func (c *Route53) CreateHealthCheck(input *CreateHealthCheckInput) (output *CreateHealthCheckOutput, err error) {
	req, out := c.CreateHealthCheckRequest(input)
	output = out
	err = req.Send()
	return
}

var opCreateHealthCheck *aws.Operation

// CreateHostedZoneRequest generates a request for the CreateHostedZone operation.
func (c *Route53) CreateHostedZoneRequest(input *CreateHostedZoneInput) (req *aws.Request, output *CreateHostedZoneOutput) {
	if opCreateHostedZone == nil {
		opCreateHostedZone = &aws.Operation{
			Name:       "CreateHostedZone",
			HTTPMethod: "POST",
			HTTPPath:   "/2013-04-01/hostedzone",
		}
	}

	req = aws.NewRequest(c.Service, opCreateHostedZone, input, output)
	output = &CreateHostedZoneOutput{}
	req.Data = output
	return
}

func (c *Route53) CreateHostedZone(input *CreateHostedZoneInput) (output *CreateHostedZoneOutput, err error) {
	req, out := c.CreateHostedZoneRequest(input)
	output = out
	err = req.Send()
	return
}

var opCreateHostedZone *aws.Operation

// CreateReusableDelegationSetRequest generates a request for the CreateReusableDelegationSet operation.
func (c *Route53) CreateReusableDelegationSetRequest(input *CreateReusableDelegationSetInput) (req *aws.Request, output *CreateReusableDelegationSetOutput) {
	if opCreateReusableDelegationSet == nil {
		opCreateReusableDelegationSet = &aws.Operation{
			Name:       "CreateReusableDelegationSet",
			HTTPMethod: "POST",
			HTTPPath:   "/2013-04-01/delegationset",
		}
	}

	req = aws.NewRequest(c.Service, opCreateReusableDelegationSet, input, output)
	output = &CreateReusableDelegationSetOutput{}
	req.Data = output
	return
}

func (c *Route53) CreateReusableDelegationSet(input *CreateReusableDelegationSetInput) (output *CreateReusableDelegationSetOutput, err error) {
	req, out := c.CreateReusableDelegationSetRequest(input)
	output = out
	err = req.Send()
	return
}

var opCreateReusableDelegationSet *aws.Operation

// DeleteHealthCheckRequest generates a request for the DeleteHealthCheck operation.
func (c *Route53) DeleteHealthCheckRequest(input *DeleteHealthCheckInput) (req *aws.Request, output *DeleteHealthCheckOutput) {
	if opDeleteHealthCheck == nil {
		opDeleteHealthCheck = &aws.Operation{
			Name:       "DeleteHealthCheck",
			HTTPMethod: "DELETE",
			HTTPPath:   "/2013-04-01/healthcheck/{HealthCheckId}",
		}
	}

	req = aws.NewRequest(c.Service, opDeleteHealthCheck, input, output)
	output = &DeleteHealthCheckOutput{}
	req.Data = output
	return
}

func (c *Route53) DeleteHealthCheck(input *DeleteHealthCheckInput) (output *DeleteHealthCheckOutput, err error) {
	req, out := c.DeleteHealthCheckRequest(input)
	output = out
	err = req.Send()
	return
}

var opDeleteHealthCheck *aws.Operation

// DeleteHostedZoneRequest generates a request for the DeleteHostedZone operation.
func (c *Route53) DeleteHostedZoneRequest(input *DeleteHostedZoneInput) (req *aws.Request, output *DeleteHostedZoneOutput) {
	if opDeleteHostedZone == nil {
		opDeleteHostedZone = &aws.Operation{
			Name:       "DeleteHostedZone",
			HTTPMethod: "DELETE",
			HTTPPath:   "/2013-04-01/hostedzone/{Id}",
		}
	}

	req = aws.NewRequest(c.Service, opDeleteHostedZone, input, output)
	output = &DeleteHostedZoneOutput{}
	req.Data = output
	return
}

func (c *Route53) DeleteHostedZone(input *DeleteHostedZoneInput) (output *DeleteHostedZoneOutput, err error) {
	req, out := c.DeleteHostedZoneRequest(input)
	output = out
	err = req.Send()
	return
}

var opDeleteHostedZone *aws.Operation

// DeleteReusableDelegationSetRequest generates a request for the DeleteReusableDelegationSet operation.
func (c *Route53) DeleteReusableDelegationSetRequest(input *DeleteReusableDelegationSetInput) (req *aws.Request, output *DeleteReusableDelegationSetOutput) {
	if opDeleteReusableDelegationSet == nil {
		opDeleteReusableDelegationSet = &aws.Operation{
			Name:       "DeleteReusableDelegationSet",
			HTTPMethod: "DELETE",
			HTTPPath:   "/2013-04-01/delegationset/{Id}",
		}
	}

	req = aws.NewRequest(c.Service, opDeleteReusableDelegationSet, input, output)
	output = &DeleteReusableDelegationSetOutput{}
	req.Data = output
	return
}

func (c *Route53) DeleteReusableDelegationSet(input *DeleteReusableDelegationSetInput) (output *DeleteReusableDelegationSetOutput, err error) {
	req, out := c.DeleteReusableDelegationSetRequest(input)
	output = out
	err = req.Send()
	return
}

var opDeleteReusableDelegationSet *aws.Operation

// DisassociateVPCFromHostedZoneRequest generates a request for the DisassociateVPCFromHostedZone operation.
func (c *Route53) DisassociateVPCFromHostedZoneRequest(input *DisassociateVPCFromHostedZoneInput) (req *aws.Request, output *DisassociateVPCFromHostedZoneOutput) {
	if opDisassociateVPCFromHostedZone == nil {
		opDisassociateVPCFromHostedZone = &aws.Operation{
			Name:       "DisassociateVPCFromHostedZone",
			HTTPMethod: "POST",
			HTTPPath:   "/2013-04-01/hostedzone/{Id}/disassociatevpc",
		}
	}

	req = aws.NewRequest(c.Service, opDisassociateVPCFromHostedZone, input, output)
	output = &DisassociateVPCFromHostedZoneOutput{}
	req.Data = output
	return
}

func (c *Route53) DisassociateVPCFromHostedZone(input *DisassociateVPCFromHostedZoneInput) (output *DisassociateVPCFromHostedZoneOutput, err error) {
	req, out := c.DisassociateVPCFromHostedZoneRequest(input)
	output = out
	err = req.Send()
	return
}

var opDisassociateVPCFromHostedZone *aws.Operation

// GetChangeRequest generates a request for the GetChange operation.
func (c *Route53) GetChangeRequest(input *GetChangeInput) (req *aws.Request, output *GetChangeOutput) {
	if opGetChange == nil {
		opGetChange = &aws.Operation{
			Name:       "GetChange",
			HTTPMethod: "GET",
			HTTPPath:   "/2013-04-01/change/{Id}",
		}
	}

	req = aws.NewRequest(c.Service, opGetChange, input, output)
	output = &GetChangeOutput{}
	req.Data = output
	return
}

func (c *Route53) GetChange(input *GetChangeInput) (output *GetChangeOutput, err error) {
	req, out := c.GetChangeRequest(input)
	output = out
	err = req.Send()
	return
}

var opGetChange *aws.Operation

// GetCheckerIPRangesRequest generates a request for the GetCheckerIPRanges operation.
func (c *Route53) GetCheckerIPRangesRequest(input *GetCheckerIPRangesInput) (req *aws.Request, output *GetCheckerIPRangesOutput) {
	if opGetCheckerIPRanges == nil {
		opGetCheckerIPRanges = &aws.Operation{
			Name:       "GetCheckerIpRanges",
			HTTPMethod: "GET",
			HTTPPath:   "/2013-04-01/checkeripranges",
		}
	}

	req = aws.NewRequest(c.Service, opGetCheckerIPRanges, input, output)
	output = &GetCheckerIPRangesOutput{}
	req.Data = output
	return
}

func (c *Route53) GetCheckerIPRanges(input *GetCheckerIPRangesInput) (output *GetCheckerIPRangesOutput, err error) {
	req, out := c.GetCheckerIPRangesRequest(input)
	output = out
	err = req.Send()
	return
}

var opGetCheckerIPRanges *aws.Operation

// GetGeoLocationRequest generates a request for the GetGeoLocation operation.
func (c *Route53) GetGeoLocationRequest(input *GetGeoLocationInput) (req *aws.Request, output *GetGeoLocationOutput) {
	if opGetGeoLocation == nil {
		opGetGeoLocation = &aws.Operation{
			Name:       "GetGeoLocation",
			HTTPMethod: "GET",
			HTTPPath:   "/2013-04-01/geolocation",
		}
	}

	req = aws.NewRequest(c.Service, opGetGeoLocation, input, output)
	output = &GetGeoLocationOutput{}
	req.Data = output
	return
}

func (c *Route53) GetGeoLocation(input *GetGeoLocationInput) (output *GetGeoLocationOutput, err error) {
	req, out := c.GetGeoLocationRequest(input)
	output = out
	err = req.Send()
	return
}

var opGetGeoLocation *aws.Operation

// GetHealthCheckRequest generates a request for the GetHealthCheck operation.
func (c *Route53) GetHealthCheckRequest(input *GetHealthCheckInput) (req *aws.Request, output *GetHealthCheckOutput) {
	if opGetHealthCheck == nil {
		opGetHealthCheck = &aws.Operation{
			Name:       "GetHealthCheck",
			HTTPMethod: "GET",
			HTTPPath:   "/2013-04-01/healthcheck/{HealthCheckId}",
		}
	}

	req = aws.NewRequest(c.Service, opGetHealthCheck, input, output)
	output = &GetHealthCheckOutput{}
	req.Data = output
	return
}

func (c *Route53) GetHealthCheck(input *GetHealthCheckInput) (output *GetHealthCheckOutput, err error) {
	req, out := c.GetHealthCheckRequest(input)
	output = out
	err = req.Send()
	return
}

var opGetHealthCheck *aws.Operation

// GetHealthCheckCountRequest generates a request for the GetHealthCheckCount operation.
func (c *Route53) GetHealthCheckCountRequest(input *GetHealthCheckCountInput) (req *aws.Request, output *GetHealthCheckCountOutput) {
	if opGetHealthCheckCount == nil {
		opGetHealthCheckCount = &aws.Operation{
			Name:       "GetHealthCheckCount",
			HTTPMethod: "GET",
			HTTPPath:   "/2013-04-01/healthcheckcount",
		}
	}

	req = aws.NewRequest(c.Service, opGetHealthCheckCount, input, output)
	output = &GetHealthCheckCountOutput{}
	req.Data = output
	return
}

func (c *Route53) GetHealthCheckCount(input *GetHealthCheckCountInput) (output *GetHealthCheckCountOutput, err error) {
	req, out := c.GetHealthCheckCountRequest(input)
	output = out
	err = req.Send()
	return
}

var opGetHealthCheckCount *aws.Operation

// GetHealthCheckLastFailureReasonRequest generates a request for the GetHealthCheckLastFailureReason operation.
func (c *Route53) GetHealthCheckLastFailureReasonRequest(input *GetHealthCheckLastFailureReasonInput) (req *aws.Request, output *GetHealthCheckLastFailureReasonOutput) {
	if opGetHealthCheckLastFailureReason == nil {
		opGetHealthCheckLastFailureReason = &aws.Operation{
			Name:       "GetHealthCheckLastFailureReason",
			HTTPMethod: "GET",
			HTTPPath:   "/2013-04-01/healthcheck/{HealthCheckId}/lastfailurereason",
		}
	}

	req = aws.NewRequest(c.Service, opGetHealthCheckLastFailureReason, input, output)
	output = &GetHealthCheckLastFailureReasonOutput{}
	req.Data = output
	return
}

func (c *Route53) GetHealthCheckLastFailureReason(input *GetHealthCheckLastFailureReasonInput) (output *GetHealthCheckLastFailureReasonOutput, err error) {
	req, out := c.GetHealthCheckLastFailureReasonRequest(input)
	output = out
	err = req.Send()
	return
}

var opGetHealthCheckLastFailureReason *aws.Operation

// GetHealthCheckStatusRequest generates a request for the GetHealthCheckStatus operation.
func (c *Route53) GetHealthCheckStatusRequest(input *GetHealthCheckStatusInput) (req *aws.Request, output *GetHealthCheckStatusOutput) {
	if opGetHealthCheckStatus == nil {
		opGetHealthCheckStatus = &aws.Operation{
			Name:       "GetHealthCheckStatus",
			HTTPMethod: "GET",
			HTTPPath:   "/2013-04-01/healthcheck/{HealthCheckId}/status",
		}
	}

	req = aws.NewRequest(c.Service, opGetHealthCheckStatus, input, output)
	output = &GetHealthCheckStatusOutput{}
	req.Data = output
	return
}

func (c *Route53) GetHealthCheckStatus(input *GetHealthCheckStatusInput) (output *GetHealthCheckStatusOutput, err error) {
	req, out := c.GetHealthCheckStatusRequest(input)
	output = out
	err = req.Send()
	return
}

var opGetHealthCheckStatus *aws.Operation

// GetHostedZoneRequest generates a request for the GetHostedZone operation.
func (c *Route53) GetHostedZoneRequest(input *GetHostedZoneInput) (req *aws.Request, output *GetHostedZoneOutput) {
	if opGetHostedZone == nil {
		opGetHostedZone = &aws.Operation{
			Name:       "GetHostedZone",
			HTTPMethod: "GET",
			HTTPPath:   "/2013-04-01/hostedzone/{Id}",
		}
	}

	req = aws.NewRequest(c.Service, opGetHostedZone, input, output)
	output = &GetHostedZoneOutput{}
	req.Data = output
	return
}

func (c *Route53) GetHostedZone(input *GetHostedZoneInput) (output *GetHostedZoneOutput, err error) {
	req, out := c.GetHostedZoneRequest(input)
	output = out
	err = req.Send()
	return
}

var opGetHostedZone *aws.Operation

// GetReusableDelegationSetRequest generates a request for the GetReusableDelegationSet operation.
func (c *Route53) GetReusableDelegationSetRequest(input *GetReusableDelegationSetInput) (req *aws.Request, output *GetReusableDelegationSetOutput) {
	if opGetReusableDelegationSet == nil {
		opGetReusableDelegationSet = &aws.Operation{
			Name:       "GetReusableDelegationSet",
			HTTPMethod: "GET",
			HTTPPath:   "/2013-04-01/delegationset/{Id}",
		}
	}

	req = aws.NewRequest(c.Service, opGetReusableDelegationSet, input, output)
	output = &GetReusableDelegationSetOutput{}
	req.Data = output
	return
}

func (c *Route53) GetReusableDelegationSet(input *GetReusableDelegationSetInput) (output *GetReusableDelegationSetOutput, err error) {
	req, out := c.GetReusableDelegationSetRequest(input)
	output = out
	err = req.Send()
	return
}

var opGetReusableDelegationSet *aws.Operation

// ListGeoLocationsRequest generates a request for the ListGeoLocations operation.
func (c *Route53) ListGeoLocationsRequest(input *ListGeoLocationsInput) (req *aws.Request, output *ListGeoLocationsOutput) {
	if opListGeoLocations == nil {
		opListGeoLocations = &aws.Operation{
			Name:       "ListGeoLocations",
			HTTPMethod: "GET",
			HTTPPath:   "/2013-04-01/geolocations",
		}
	}

	req = aws.NewRequest(c.Service, opListGeoLocations, input, output)
	output = &ListGeoLocationsOutput{}
	req.Data = output
	return
}

func (c *Route53) ListGeoLocations(input *ListGeoLocationsInput) (output *ListGeoLocationsOutput, err error) {
	req, out := c.ListGeoLocationsRequest(input)
	output = out
	err = req.Send()
	return
}

var opListGeoLocations *aws.Operation

// ListHealthChecksRequest generates a request for the ListHealthChecks operation.
func (c *Route53) ListHealthChecksRequest(input *ListHealthChecksInput) (req *aws.Request, output *ListHealthChecksOutput) {
	if opListHealthChecks == nil {
		opListHealthChecks = &aws.Operation{
			Name:       "ListHealthChecks",
			HTTPMethod: "GET",
			HTTPPath:   "/2013-04-01/healthcheck",
		}
	}

	req = aws.NewRequest(c.Service, opListHealthChecks, input, output)
	output = &ListHealthChecksOutput{}
	req.Data = output
	return
}

func (c *Route53) ListHealthChecks(input *ListHealthChecksInput) (output *ListHealthChecksOutput, err error) {
	req, out := c.ListHealthChecksRequest(input)
	output = out
	err = req.Send()
	return
}

var opListHealthChecks *aws.Operation

// ListHostedZonesRequest generates a request for the ListHostedZones operation.
func (c *Route53) ListHostedZonesRequest(input *ListHostedZonesInput) (req *aws.Request, output *ListHostedZonesOutput) {
	if opListHostedZones == nil {
		opListHostedZones = &aws.Operation{
			Name:       "ListHostedZones",
			HTTPMethod: "GET",
			HTTPPath:   "/2013-04-01/hostedzone",
		}
	}

	req = aws.NewRequest(c.Service, opListHostedZones, input, output)
	output = &ListHostedZonesOutput{}
	req.Data = output
	return
}

func (c *Route53) ListHostedZones(input *ListHostedZonesInput) (output *ListHostedZonesOutput, err error) {
	req, out := c.ListHostedZonesRequest(input)
	output = out
	err = req.Send()
	return
}

var opListHostedZones *aws.Operation

// ListResourceRecordSetsRequest generates a request for the ListResourceRecordSets operation.
func (c *Route53) ListResourceRecordSetsRequest(input *ListResourceRecordSetsInput) (req *aws.Request, output *ListResourceRecordSetsOutput) {
	if opListResourceRecordSets == nil {
		opListResourceRecordSets = &aws.Operation{
			Name:       "ListResourceRecordSets",
			HTTPMethod: "GET",
			HTTPPath:   "/2013-04-01/hostedzone/{Id}/rrset",
		}
	}

	req = aws.NewRequest(c.Service, opListResourceRecordSets, input, output)
	output = &ListResourceRecordSetsOutput{}
	req.Data = output
	return
}

func (c *Route53) ListResourceRecordSets(input *ListResourceRecordSetsInput) (output *ListResourceRecordSetsOutput, err error) {
	req, out := c.ListResourceRecordSetsRequest(input)
	output = out
	err = req.Send()
	return
}

var opListResourceRecordSets *aws.Operation

// ListReusableDelegationSetsRequest generates a request for the ListReusableDelegationSets operation.
func (c *Route53) ListReusableDelegationSetsRequest(input *ListReusableDelegationSetsInput) (req *aws.Request, output *ListReusableDelegationSetsOutput) {
	if opListReusableDelegationSets == nil {
		opListReusableDelegationSets = &aws.Operation{
			Name:       "ListReusableDelegationSets",
			HTTPMethod: "GET",
			HTTPPath:   "/2013-04-01/delegationset",
		}
	}

	req = aws.NewRequest(c.Service, opListReusableDelegationSets, input, output)
	output = &ListReusableDelegationSetsOutput{}
	req.Data = output
	return
}

func (c *Route53) ListReusableDelegationSets(input *ListReusableDelegationSetsInput) (output *ListReusableDelegationSetsOutput, err error) {
	req, out := c.ListReusableDelegationSetsRequest(input)
	output = out
	err = req.Send()
	return
}

var opListReusableDelegationSets *aws.Operation

// ListTagsForResourceRequest generates a request for the ListTagsForResource operation.
func (c *Route53) ListTagsForResourceRequest(input *ListTagsForResourceInput) (req *aws.Request, output *ListTagsForResourceOutput) {
	if opListTagsForResource == nil {
		opListTagsForResource = &aws.Operation{
			Name:       "ListTagsForResource",
			HTTPMethod: "GET",
			HTTPPath:   "/2013-04-01/tags/{ResourceType}/{ResourceId}",
		}
	}

	req = aws.NewRequest(c.Service, opListTagsForResource, input, output)
	output = &ListTagsForResourceOutput{}
	req.Data = output
	return
}

func (c *Route53) ListTagsForResource(input *ListTagsForResourceInput) (output *ListTagsForResourceOutput, err error) {
	req, out := c.ListTagsForResourceRequest(input)
	output = out
	err = req.Send()
	return
}

var opListTagsForResource *aws.Operation

// ListTagsForResourcesRequest generates a request for the ListTagsForResources operation.
func (c *Route53) ListTagsForResourcesRequest(input *ListTagsForResourcesInput) (req *aws.Request, output *ListTagsForResourcesOutput) {
	if opListTagsForResources == nil {
		opListTagsForResources = &aws.Operation{
			Name:       "ListTagsForResources",
			HTTPMethod: "POST",
			HTTPPath:   "/2013-04-01/tags/{ResourceType}",
		}
	}

	req = aws.NewRequest(c.Service, opListTagsForResources, input, output)
	output = &ListTagsForResourcesOutput{}
	req.Data = output
	return
}

func (c *Route53) ListTagsForResources(input *ListTagsForResourcesInput) (output *ListTagsForResourcesOutput, err error) {
	req, out := c.ListTagsForResourcesRequest(input)
	output = out
	err = req.Send()
	return
}

var opListTagsForResources *aws.Operation

// UpdateHealthCheckRequest generates a request for the UpdateHealthCheck operation.
func (c *Route53) UpdateHealthCheckRequest(input *UpdateHealthCheckInput) (req *aws.Request, output *UpdateHealthCheckOutput) {
	if opUpdateHealthCheck == nil {
		opUpdateHealthCheck = &aws.Operation{
			Name:       "UpdateHealthCheck",
			HTTPMethod: "POST",
			HTTPPath:   "/2013-04-01/healthcheck/{HealthCheckId}",
		}
	}

	req = aws.NewRequest(c.Service, opUpdateHealthCheck, input, output)
	output = &UpdateHealthCheckOutput{}
	req.Data = output
	return
}

func (c *Route53) UpdateHealthCheck(input *UpdateHealthCheckInput) (output *UpdateHealthCheckOutput, err error) {
	req, out := c.UpdateHealthCheckRequest(input)
	output = out
	err = req.Send()
	return
}

var opUpdateHealthCheck *aws.Operation

// UpdateHostedZoneCommentRequest generates a request for the UpdateHostedZoneComment operation.
func (c *Route53) UpdateHostedZoneCommentRequest(input *UpdateHostedZoneCommentInput) (req *aws.Request, output *UpdateHostedZoneCommentOutput) {
	if opUpdateHostedZoneComment == nil {
		opUpdateHostedZoneComment = &aws.Operation{
			Name:       "UpdateHostedZoneComment",
			HTTPMethod: "POST",
			HTTPPath:   "/2013-04-01/hostedzone/{Id}",
		}
	}

	req = aws.NewRequest(c.Service, opUpdateHostedZoneComment, input, output)
	output = &UpdateHostedZoneCommentOutput{}
	req.Data = output
	return
}

func (c *Route53) UpdateHostedZoneComment(input *UpdateHostedZoneCommentInput) (output *UpdateHostedZoneCommentOutput, err error) {
	req, out := c.UpdateHostedZoneCommentRequest(input)
	output = out
	err = req.Send()
	return
}

var opUpdateHostedZoneComment *aws.Operation

type AliasTarget struct {
	DNSName              *string `type:"string"`
	EvaluateTargetHealth *bool   `type:"boolean"`
	HostedZoneID         *string `locationName:"HostedZoneId" type:"string"`

	metadataAliasTarget `json:"-", xml:"-"`
}

type metadataAliasTarget struct {
	SDKShapeTraits bool `type:"structure" required:"HostedZoneId,DNSName,EvaluateTargetHealth"`
}

type AssociateVPCWithHostedZoneInput struct {
	Comment      *string `type:"string"`
	HostedZoneID *string `location:"uri" locationName:"Id" type:"string" json:"-" xml:"-"`
	VPC          *VPC    `type:"structure"`

	metadataAssociateVPCWithHostedZoneInput `json:"-", xml:"-"`
}

type metadataAssociateVPCWithHostedZoneInput struct {
	SDKShapeTraits bool `locationName:"AssociateVPCWithHostedZoneRequest" type:"structure" required:"HostedZoneId,VPC" xmlURI:"https://route53.amazonaws.com/doc/2013-04-01/"`
}

type AssociateVPCWithHostedZoneOutput struct {
	ChangeInfo *ChangeInfo `type:"structure"`

	metadataAssociateVPCWithHostedZoneOutput `json:"-", xml:"-"`
}

type metadataAssociateVPCWithHostedZoneOutput struct {
	SDKShapeTraits bool `type:"structure" required:"ChangeInfo"`
}

type Change struct {
	Action            *string            `type:"string"`
	ResourceRecordSet *ResourceRecordSet `type:"structure"`

	metadataChange `json:"-", xml:"-"`
}

type metadataChange struct {
	SDKShapeTraits bool `type:"structure" required:"Action,ResourceRecordSet"`
}

type ChangeBatch struct {
	Changes []*Change `locationNameList:"Change" type:"list"`
	Comment *string   `type:"string"`

	metadataChangeBatch `json:"-", xml:"-"`
}

type metadataChangeBatch struct {
	SDKShapeTraits bool `type:"structure" required:"Changes"`
}

type ChangeInfo struct {
	Comment     *string    `type:"string"`
	ID          *string    `locationName:"Id" type:"string"`
	Status      *string    `type:"string"`
	SubmittedAt *time.Time `type:"timestamp" timestampFormat:"iso8601"`

	metadataChangeInfo `json:"-", xml:"-"`
}

type metadataChangeInfo struct {
	SDKShapeTraits bool `type:"structure" required:"Id,Status,SubmittedAt"`
}

type ChangeResourceRecordSetsInput struct {
	ChangeBatch  *ChangeBatch `type:"structure"`
	HostedZoneID *string      `location:"uri" locationName:"Id" type:"string" json:"-" xml:"-"`

	metadataChangeResourceRecordSetsInput `json:"-", xml:"-"`
}

type metadataChangeResourceRecordSetsInput struct {
	SDKShapeTraits bool `locationName:"ChangeResourceRecordSetsRequest" type:"structure" required:"HostedZoneId,ChangeBatch" xmlURI:"https://route53.amazonaws.com/doc/2013-04-01/"`
}

type ChangeResourceRecordSetsOutput struct {
	ChangeInfo *ChangeInfo `type:"structure"`

	metadataChangeResourceRecordSetsOutput `json:"-", xml:"-"`
}

type metadataChangeResourceRecordSetsOutput struct {
	SDKShapeTraits bool `type:"structure" required:"ChangeInfo"`
}

type ChangeTagsForResourceInput struct {
	AddTags       []*Tag    `locationNameList:"Tag" type:"list"`
	RemoveTagKeys []*string `locationNameList:"Key" type:"list"`
	ResourceID    *string   `location:"uri" locationName:"ResourceId" type:"string" json:"-" xml:"-"`
	ResourceType  *string   `location:"uri" locationName:"ResourceType" type:"string" json:"-" xml:"-"`

	metadataChangeTagsForResourceInput `json:"-", xml:"-"`
}

type metadataChangeTagsForResourceInput struct {
	SDKShapeTraits bool `locationName:"ChangeTagsForResourceRequest" type:"structure" required:"ResourceType,ResourceId" xmlURI:"https://route53.amazonaws.com/doc/2013-04-01/"`
}

type ChangeTagsForResourceOutput struct {
	metadataChangeTagsForResourceOutput `json:"-", xml:"-"`
}

type metadataChangeTagsForResourceOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type ConflictingDomainExists struct {
	Message *string `locationName:"message" type:"string"`

	metadataConflictingDomainExists `json:"-", xml:"-"`
}

type metadataConflictingDomainExists struct {
	SDKShapeTraits bool `type:"structure"`
}

type CreateHealthCheckInput struct {
	CallerReference   *string            `type:"string"`
	HealthCheckConfig *HealthCheckConfig `type:"structure"`

	metadataCreateHealthCheckInput `json:"-", xml:"-"`
}

type metadataCreateHealthCheckInput struct {
	SDKShapeTraits bool `locationName:"CreateHealthCheckRequest" type:"structure" required:"CallerReference,HealthCheckConfig" xmlURI:"https://route53.amazonaws.com/doc/2013-04-01/"`
}

type CreateHealthCheckOutput struct {
	HealthCheck *HealthCheck `type:"structure"`
	Location    *string      `location:"header" locationName:"Location" type:"string" json:"-" xml:"-"`

	metadataCreateHealthCheckOutput `json:"-", xml:"-"`
}

type metadataCreateHealthCheckOutput struct {
	SDKShapeTraits bool `type:"structure" required:"HealthCheck,Location"`
}

type CreateHostedZoneInput struct {
	CallerReference  *string           `type:"string"`
	DelegationSetID  *string           `locationName:"DelegationSetId" type:"string"`
	HostedZoneConfig *HostedZoneConfig `type:"structure"`
	Name             *string           `type:"string"`
	VPC              *VPC              `type:"structure"`

	metadataCreateHostedZoneInput `json:"-", xml:"-"`
}

type metadataCreateHostedZoneInput struct {
	SDKShapeTraits bool `locationName:"CreateHostedZoneRequest" type:"structure" required:"Name,CallerReference" xmlURI:"https://route53.amazonaws.com/doc/2013-04-01/"`
}

type CreateHostedZoneOutput struct {
	ChangeInfo    *ChangeInfo    `type:"structure"`
	DelegationSet *DelegationSet `type:"structure"`
	HostedZone    *HostedZone    `type:"structure"`
	Location      *string        `location:"header" locationName:"Location" type:"string" json:"-" xml:"-"`
	VPC           *VPC           `type:"structure"`

	metadataCreateHostedZoneOutput `json:"-", xml:"-"`
}

type metadataCreateHostedZoneOutput struct {
	SDKShapeTraits bool `type:"structure" required:"HostedZone,ChangeInfo,DelegationSet,Location"`
}

type CreateReusableDelegationSetInput struct {
	CallerReference *string `type:"string"`
	HostedZoneID    *string `locationName:"HostedZoneId" type:"string"`

	metadataCreateReusableDelegationSetInput `json:"-", xml:"-"`
}

type metadataCreateReusableDelegationSetInput struct {
	SDKShapeTraits bool `locationName:"CreateReusableDelegationSetRequest" type:"structure" required:"CallerReference" xmlURI:"https://route53.amazonaws.com/doc/2013-04-01/"`
}

type CreateReusableDelegationSetOutput struct {
	DelegationSet *DelegationSet `type:"structure"`
	Location      *string        `location:"header" locationName:"Location" type:"string" json:"-" xml:"-"`

	metadataCreateReusableDelegationSetOutput `json:"-", xml:"-"`
}

type metadataCreateReusableDelegationSetOutput struct {
	SDKShapeTraits bool `type:"structure" required:"DelegationSet,Location"`
}

type DelegationSet struct {
	CallerReference *string   `type:"string"`
	ID              *string   `locationName:"Id" type:"string"`
	NameServers     []*string `locationNameList:"NameServer" type:"list"`

	metadataDelegationSet `json:"-", xml:"-"`
}

type metadataDelegationSet struct {
	SDKShapeTraits bool `type:"structure" required:"NameServers"`
}

type DelegationSetAlreadyCreated struct {
	Message *string `locationName:"message" type:"string"`

	metadataDelegationSetAlreadyCreated `json:"-", xml:"-"`
}

type metadataDelegationSetAlreadyCreated struct {
	SDKShapeTraits bool `type:"structure"`
}

type DelegationSetAlreadyReusable struct {
	Message *string `locationName:"message" type:"string"`

	metadataDelegationSetAlreadyReusable `json:"-", xml:"-"`
}

type metadataDelegationSetAlreadyReusable struct {
	SDKShapeTraits bool `type:"structure"`
}

type DelegationSetInUse struct {
	Message *string `locationName:"message" type:"string"`

	metadataDelegationSetInUse `json:"-", xml:"-"`
}

type metadataDelegationSetInUse struct {
	SDKShapeTraits bool `type:"structure"`
}

type DelegationSetNotAvailable struct {
	Message *string `locationName:"message" type:"string"`

	metadataDelegationSetNotAvailable `json:"-", xml:"-"`
}

type metadataDelegationSetNotAvailable struct {
	SDKShapeTraits bool `type:"structure"`
}

type DelegationSetNotReusable struct {
	Message *string `locationName:"message" type:"string"`

	metadataDelegationSetNotReusable `json:"-", xml:"-"`
}

type metadataDelegationSetNotReusable struct {
	SDKShapeTraits bool `type:"structure"`
}

type DeleteHealthCheckInput struct {
	HealthCheckID *string `location:"uri" locationName:"HealthCheckId" type:"string" json:"-" xml:"-"`

	metadataDeleteHealthCheckInput `json:"-", xml:"-"`
}

type metadataDeleteHealthCheckInput struct {
	SDKShapeTraits bool `type:"structure" required:"HealthCheckId"`
}

type DeleteHealthCheckOutput struct {
	metadataDeleteHealthCheckOutput `json:"-", xml:"-"`
}

type metadataDeleteHealthCheckOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DeleteHostedZoneInput struct {
	ID *string `location:"uri" locationName:"Id" type:"string" json:"-" xml:"-"`

	metadataDeleteHostedZoneInput `json:"-", xml:"-"`
}

type metadataDeleteHostedZoneInput struct {
	SDKShapeTraits bool `type:"structure" required:"Id"`
}

type DeleteHostedZoneOutput struct {
	ChangeInfo *ChangeInfo `type:"structure"`

	metadataDeleteHostedZoneOutput `json:"-", xml:"-"`
}

type metadataDeleteHostedZoneOutput struct {
	SDKShapeTraits bool `type:"structure" required:"ChangeInfo"`
}

type DeleteReusableDelegationSetInput struct {
	ID *string `location:"uri" locationName:"Id" type:"string" json:"-" xml:"-"`

	metadataDeleteReusableDelegationSetInput `json:"-", xml:"-"`
}

type metadataDeleteReusableDelegationSetInput struct {
	SDKShapeTraits bool `type:"structure" required:"Id"`
}

type DeleteReusableDelegationSetOutput struct {
	metadataDeleteReusableDelegationSetOutput `json:"-", xml:"-"`
}

type metadataDeleteReusableDelegationSetOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DisassociateVPCFromHostedZoneInput struct {
	Comment      *string `type:"string"`
	HostedZoneID *string `location:"uri" locationName:"Id" type:"string" json:"-" xml:"-"`
	VPC          *VPC    `type:"structure"`

	metadataDisassociateVPCFromHostedZoneInput `json:"-", xml:"-"`
}

type metadataDisassociateVPCFromHostedZoneInput struct {
	SDKShapeTraits bool `locationName:"DisassociateVPCFromHostedZoneRequest" type:"structure" required:"HostedZoneId,VPC" xmlURI:"https://route53.amazonaws.com/doc/2013-04-01/"`
}

type DisassociateVPCFromHostedZoneOutput struct {
	ChangeInfo *ChangeInfo `type:"structure"`

	metadataDisassociateVPCFromHostedZoneOutput `json:"-", xml:"-"`
}

type metadataDisassociateVPCFromHostedZoneOutput struct {
	SDKShapeTraits bool `type:"structure" required:"ChangeInfo"`
}

type GeoLocation struct {
	ContinentCode   *string `type:"string"`
	CountryCode     *string `type:"string"`
	SubdivisionCode *string `type:"string"`

	metadataGeoLocation `json:"-", xml:"-"`
}

type metadataGeoLocation struct {
	SDKShapeTraits bool `type:"structure"`
}

type GeoLocationDetails struct {
	ContinentCode   *string `type:"string"`
	ContinentName   *string `type:"string"`
	CountryCode     *string `type:"string"`
	CountryName     *string `type:"string"`
	SubdivisionCode *string `type:"string"`
	SubdivisionName *string `type:"string"`

	metadataGeoLocationDetails `json:"-", xml:"-"`
}

type metadataGeoLocationDetails struct {
	SDKShapeTraits bool `type:"structure"`
}

type GetChangeInput struct {
	ID *string `location:"uri" locationName:"Id" type:"string" json:"-" xml:"-"`

	metadataGetChangeInput `json:"-", xml:"-"`
}

type metadataGetChangeInput struct {
	SDKShapeTraits bool `type:"structure" required:"Id"`
}

type GetChangeOutput struct {
	ChangeInfo *ChangeInfo `type:"structure"`

	metadataGetChangeOutput `json:"-", xml:"-"`
}

type metadataGetChangeOutput struct {
	SDKShapeTraits bool `type:"structure" required:"ChangeInfo"`
}

type GetCheckerIPRangesInput struct {
	metadataGetCheckerIPRangesInput `json:"-", xml:"-"`
}

type metadataGetCheckerIPRangesInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type GetCheckerIPRangesOutput struct {
	CheckerIPRanges []*string `locationName:"CheckerIpRanges" type:"list"`

	metadataGetCheckerIPRangesOutput `json:"-", xml:"-"`
}

type metadataGetCheckerIPRangesOutput struct {
	SDKShapeTraits bool `type:"structure" required:"CheckerIpRanges"`
}

type GetGeoLocationInput struct {
	ContinentCode   *string `location:"querystring" locationName:"continentcode" type:"string" json:"-" xml:"-"`
	CountryCode     *string `location:"querystring" locationName:"countrycode" type:"string" json:"-" xml:"-"`
	SubdivisionCode *string `location:"querystring" locationName:"subdivisioncode" type:"string" json:"-" xml:"-"`

	metadataGetGeoLocationInput `json:"-", xml:"-"`
}

type metadataGetGeoLocationInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type GetGeoLocationOutput struct {
	GeoLocationDetails *GeoLocationDetails `type:"structure"`

	metadataGetGeoLocationOutput `json:"-", xml:"-"`
}

type metadataGetGeoLocationOutput struct {
	SDKShapeTraits bool `type:"structure" required:"GeoLocationDetails"`
}

type GetHealthCheckCountInput struct {
	metadataGetHealthCheckCountInput `json:"-", xml:"-"`
}

type metadataGetHealthCheckCountInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type GetHealthCheckCountOutput struct {
	HealthCheckCount *int64 `type:"long"`

	metadataGetHealthCheckCountOutput `json:"-", xml:"-"`
}

type metadataGetHealthCheckCountOutput struct {
	SDKShapeTraits bool `type:"structure" required:"HealthCheckCount"`
}

type GetHealthCheckInput struct {
	HealthCheckID *string `location:"uri" locationName:"HealthCheckId" type:"string" json:"-" xml:"-"`

	metadataGetHealthCheckInput `json:"-", xml:"-"`
}

type metadataGetHealthCheckInput struct {
	SDKShapeTraits bool `type:"structure" required:"HealthCheckId"`
}

type GetHealthCheckLastFailureReasonInput struct {
	HealthCheckID *string `location:"uri" locationName:"HealthCheckId" type:"string" json:"-" xml:"-"`

	metadataGetHealthCheckLastFailureReasonInput `json:"-", xml:"-"`
}

type metadataGetHealthCheckLastFailureReasonInput struct {
	SDKShapeTraits bool `type:"structure" required:"HealthCheckId"`
}

type GetHealthCheckLastFailureReasonOutput struct {
	HealthCheckObservations []*HealthCheckObservation `locationNameList:"HealthCheckObservation" type:"list"`

	metadataGetHealthCheckLastFailureReasonOutput `json:"-", xml:"-"`
}

type metadataGetHealthCheckLastFailureReasonOutput struct {
	SDKShapeTraits bool `type:"structure" required:"HealthCheckObservations"`
}

type GetHealthCheckOutput struct {
	HealthCheck *HealthCheck `type:"structure"`

	metadataGetHealthCheckOutput `json:"-", xml:"-"`
}

type metadataGetHealthCheckOutput struct {
	SDKShapeTraits bool `type:"structure" required:"HealthCheck"`
}

type GetHealthCheckStatusInput struct {
	HealthCheckID *string `location:"uri" locationName:"HealthCheckId" type:"string" json:"-" xml:"-"`

	metadataGetHealthCheckStatusInput `json:"-", xml:"-"`
}

type metadataGetHealthCheckStatusInput struct {
	SDKShapeTraits bool `type:"structure" required:"HealthCheckId"`
}

type GetHealthCheckStatusOutput struct {
	HealthCheckObservations []*HealthCheckObservation `locationNameList:"HealthCheckObservation" type:"list"`

	metadataGetHealthCheckStatusOutput `json:"-", xml:"-"`
}

type metadataGetHealthCheckStatusOutput struct {
	SDKShapeTraits bool `type:"structure" required:"HealthCheckObservations"`
}

type GetHostedZoneInput struct {
	ID *string `location:"uri" locationName:"Id" type:"string" json:"-" xml:"-"`

	metadataGetHostedZoneInput `json:"-", xml:"-"`
}

type metadataGetHostedZoneInput struct {
	SDKShapeTraits bool `type:"structure" required:"Id"`
}

type GetHostedZoneOutput struct {
	DelegationSet *DelegationSet `type:"structure"`
	HostedZone    *HostedZone    `type:"structure"`
	VPCs          []*VPC         `locationNameList:"VPC" type:"list"`

	metadataGetHostedZoneOutput `json:"-", xml:"-"`
}

type metadataGetHostedZoneOutput struct {
	SDKShapeTraits bool `type:"structure" required:"HostedZone"`
}

type GetReusableDelegationSetInput struct {
	ID *string `location:"uri" locationName:"Id" type:"string" json:"-" xml:"-"`

	metadataGetReusableDelegationSetInput `json:"-", xml:"-"`
}

type metadataGetReusableDelegationSetInput struct {
	SDKShapeTraits bool `type:"structure" required:"Id"`
}

type GetReusableDelegationSetOutput struct {
	DelegationSet *DelegationSet `type:"structure"`

	metadataGetReusableDelegationSetOutput `json:"-", xml:"-"`
}

type metadataGetReusableDelegationSetOutput struct {
	SDKShapeTraits bool `type:"structure" required:"DelegationSet"`
}

type HealthCheck struct {
	CallerReference    *string            `type:"string"`
	HealthCheckConfig  *HealthCheckConfig `type:"structure"`
	HealthCheckVersion *int64             `type:"long"`
	ID                 *string            `locationName:"Id" type:"string"`

	metadataHealthCheck `json:"-", xml:"-"`
}

type metadataHealthCheck struct {
	SDKShapeTraits bool `type:"structure" required:"Id,CallerReference,HealthCheckConfig,HealthCheckVersion"`
}

type HealthCheckAlreadyExists struct {
	Message *string `locationName:"message" type:"string"`

	metadataHealthCheckAlreadyExists `json:"-", xml:"-"`
}

type metadataHealthCheckAlreadyExists struct {
	SDKShapeTraits bool `type:"structure"`
}

type HealthCheckConfig struct {
	FailureThreshold         *int    `type:"integer"`
	FullyQualifiedDomainName *string `type:"string"`
	IPAddress                *string `type:"string"`
	Port                     *int    `type:"integer"`
	RequestInterval          *int    `type:"integer"`
	ResourcePath             *string `type:"string"`
	SearchString             *string `type:"string"`
	Type                     *string `type:"string"`

	metadataHealthCheckConfig `json:"-", xml:"-"`
}

type metadataHealthCheckConfig struct {
	SDKShapeTraits bool `type:"structure" required:"Type"`
}

type HealthCheckInUse struct {
	Message *string `locationName:"message" type:"string"`

	metadataHealthCheckInUse `json:"-", xml:"-"`
}

type metadataHealthCheckInUse struct {
	SDKShapeTraits bool `type:"structure"`
}

type HealthCheckObservation struct {
	IPAddress    *string       `type:"string"`
	StatusReport *StatusReport `type:"structure"`

	metadataHealthCheckObservation `json:"-", xml:"-"`
}

type metadataHealthCheckObservation struct {
	SDKShapeTraits bool `type:"structure"`
}

type HealthCheckVersionMismatch struct {
	Message *string `locationName:"message" type:"string"`

	metadataHealthCheckVersionMismatch `json:"-", xml:"-"`
}

type metadataHealthCheckVersionMismatch struct {
	SDKShapeTraits bool `type:"structure"`
}

type HostedZone struct {
	CallerReference        *string           `type:"string"`
	Config                 *HostedZoneConfig `type:"structure"`
	ID                     *string           `locationName:"Id" type:"string"`
	Name                   *string           `type:"string"`
	ResourceRecordSetCount *int64            `type:"long"`

	metadataHostedZone `json:"-", xml:"-"`
}

type metadataHostedZone struct {
	SDKShapeTraits bool `type:"structure" required:"Id,Name,CallerReference"`
}

type HostedZoneAlreadyExists struct {
	Message *string `locationName:"message" type:"string"`

	metadataHostedZoneAlreadyExists `json:"-", xml:"-"`
}

type metadataHostedZoneAlreadyExists struct {
	SDKShapeTraits bool `type:"structure"`
}

type HostedZoneConfig struct {
	Comment     *string `type:"string"`
	PrivateZone *bool   `type:"boolean"`

	metadataHostedZoneConfig `json:"-", xml:"-"`
}

type metadataHostedZoneConfig struct {
	SDKShapeTraits bool `type:"structure"`
}

type HostedZoneNotEmpty struct {
	Message *string `locationName:"message" type:"string"`

	metadataHostedZoneNotEmpty `json:"-", xml:"-"`
}

type metadataHostedZoneNotEmpty struct {
	SDKShapeTraits bool `type:"structure"`
}

type HostedZoneNotFound struct {
	Message *string `locationName:"message" type:"string"`

	metadataHostedZoneNotFound `json:"-", xml:"-"`
}

type metadataHostedZoneNotFound struct {
	SDKShapeTraits bool `type:"structure"`
}

type IncompatibleVersion struct {
	Message *string `locationName:"message" type:"string"`

	metadataIncompatibleVersion `json:"-", xml:"-"`
}

type metadataIncompatibleVersion struct {
	SDKShapeTraits bool `type:"structure"`
}

type InvalidArgument struct {
	Message *string `locationName:"message" type:"string"`

	metadataInvalidArgument `json:"-", xml:"-"`
}

type metadataInvalidArgument struct {
	SDKShapeTraits bool `type:"structure"`
}

type InvalidChangeBatch struct {
	Messages []*string `locationName:"messages" locationNameList:"Message" type:"list"`

	metadataInvalidChangeBatch `json:"-", xml:"-"`
}

type metadataInvalidChangeBatch struct {
	SDKShapeTraits bool `type:"structure"`
}

type InvalidDomainName struct {
	Message *string `locationName:"message" type:"string"`

	metadataInvalidDomainName `json:"-", xml:"-"`
}

type metadataInvalidDomainName struct {
	SDKShapeTraits bool `type:"structure"`
}

type InvalidInput struct {
	Message *string `locationName:"message" type:"string"`

	metadataInvalidInput `json:"-", xml:"-"`
}

type metadataInvalidInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type InvalidVPCID struct {
	Message *string `locationName:"message" type:"string"`

	metadataInvalidVPCID `json:"-", xml:"-"`
}

type metadataInvalidVPCID struct {
	SDKShapeTraits bool `type:"structure"`
}

type LastVPCAssociation struct {
	Message *string `locationName:"message" type:"string"`

	metadataLastVPCAssociation `json:"-", xml:"-"`
}

type metadataLastVPCAssociation struct {
	SDKShapeTraits bool `type:"structure"`
}

type LimitsExceeded struct {
	Message *string `locationName:"message" type:"string"`

	metadataLimitsExceeded `json:"-", xml:"-"`
}

type metadataLimitsExceeded struct {
	SDKShapeTraits bool `type:"structure"`
}

type ListGeoLocationsInput struct {
	MaxItems             *string `location:"querystring" locationName:"maxitems" type:"string" json:"-" xml:"-"`
	StartContinentCode   *string `location:"querystring" locationName:"startcontinentcode" type:"string" json:"-" xml:"-"`
	StartCountryCode     *string `location:"querystring" locationName:"startcountrycode" type:"string" json:"-" xml:"-"`
	StartSubdivisionCode *string `location:"querystring" locationName:"startsubdivisioncode" type:"string" json:"-" xml:"-"`

	metadataListGeoLocationsInput `json:"-", xml:"-"`
}

type metadataListGeoLocationsInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type ListGeoLocationsOutput struct {
	GeoLocationDetailsList []*GeoLocationDetails `locationNameList:"GeoLocationDetails" type:"list"`
	IsTruncated            *bool                 `type:"boolean"`
	MaxItems               *string               `type:"string"`
	NextContinentCode      *string               `type:"string"`
	NextCountryCode        *string               `type:"string"`
	NextSubdivisionCode    *string               `type:"string"`

	metadataListGeoLocationsOutput `json:"-", xml:"-"`
}

type metadataListGeoLocationsOutput struct {
	SDKShapeTraits bool `type:"structure" required:"GeoLocationDetailsList,IsTruncated,MaxItems"`
}

type ListHealthChecksInput struct {
	Marker   *string `location:"querystring" locationName:"marker" type:"string" json:"-" xml:"-"`
	MaxItems *string `location:"querystring" locationName:"maxitems" type:"string" json:"-" xml:"-"`

	metadataListHealthChecksInput `json:"-", xml:"-"`
}

type metadataListHealthChecksInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type ListHealthChecksOutput struct {
	HealthChecks []*HealthCheck `locationNameList:"HealthCheck" type:"list"`
	IsTruncated  *bool          `type:"boolean"`
	Marker       *string        `type:"string"`
	MaxItems     *string        `type:"string"`
	NextMarker   *string        `type:"string"`

	metadataListHealthChecksOutput `json:"-", xml:"-"`
}

type metadataListHealthChecksOutput struct {
	SDKShapeTraits bool `type:"structure" required:"HealthChecks,Marker,IsTruncated,MaxItems"`
}

type ListHostedZonesInput struct {
	DelegationSetID *string `location:"querystring" locationName:"delegationsetid" type:"string" json:"-" xml:"-"`
	Marker          *string `location:"querystring" locationName:"marker" type:"string" json:"-" xml:"-"`
	MaxItems        *string `location:"querystring" locationName:"maxitems" type:"string" json:"-" xml:"-"`

	metadataListHostedZonesInput `json:"-", xml:"-"`
}

type metadataListHostedZonesInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type ListHostedZonesOutput struct {
	HostedZones []*HostedZone `locationNameList:"HostedZone" type:"list"`
	IsTruncated *bool         `type:"boolean"`
	Marker      *string       `type:"string"`
	MaxItems    *string       `type:"string"`
	NextMarker  *string       `type:"string"`

	metadataListHostedZonesOutput `json:"-", xml:"-"`
}

type metadataListHostedZonesOutput struct {
	SDKShapeTraits bool `type:"structure" required:"HostedZones,Marker,IsTruncated,MaxItems"`
}

type ListResourceRecordSetsInput struct {
	HostedZoneID          *string `location:"uri" locationName:"Id" type:"string" json:"-" xml:"-"`
	MaxItems              *string `location:"querystring" locationName:"maxitems" type:"string" json:"-" xml:"-"`
	StartRecordIdentifier *string `location:"querystring" locationName:"identifier" type:"string" json:"-" xml:"-"`
	StartRecordName       *string `location:"querystring" locationName:"name" type:"string" json:"-" xml:"-"`
	StartRecordType       *string `location:"querystring" locationName:"type" type:"string" json:"-" xml:"-"`

	metadataListResourceRecordSetsInput `json:"-", xml:"-"`
}

type metadataListResourceRecordSetsInput struct {
	SDKShapeTraits bool `type:"structure" required:"HostedZoneId"`
}

type ListResourceRecordSetsOutput struct {
	IsTruncated          *bool                `type:"boolean"`
	MaxItems             *string              `type:"string"`
	NextRecordIdentifier *string              `type:"string"`
	NextRecordName       *string              `type:"string"`
	NextRecordType       *string              `type:"string"`
	ResourceRecordSets   []*ResourceRecordSet `locationNameList:"ResourceRecordSet" type:"list"`

	metadataListResourceRecordSetsOutput `json:"-", xml:"-"`
}

type metadataListResourceRecordSetsOutput struct {
	SDKShapeTraits bool `type:"structure" required:"ResourceRecordSets,IsTruncated,MaxItems"`
}

type ListReusableDelegationSetsInput struct {
	Marker   *string `location:"querystring" locationName:"marker" type:"string" json:"-" xml:"-"`
	MaxItems *string `location:"querystring" locationName:"maxitems" type:"string" json:"-" xml:"-"`

	metadataListReusableDelegationSetsInput `json:"-", xml:"-"`
}

type metadataListReusableDelegationSetsInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type ListReusableDelegationSetsOutput struct {
	DelegationSets []*DelegationSet `locationNameList:"DelegationSet" type:"list"`
	IsTruncated    *bool            `type:"boolean"`
	Marker         *string          `type:"string"`
	MaxItems       *string          `type:"string"`
	NextMarker     *string          `type:"string"`

	metadataListReusableDelegationSetsOutput `json:"-", xml:"-"`
}

type metadataListReusableDelegationSetsOutput struct {
	SDKShapeTraits bool `type:"structure" required:"DelegationSets,Marker,IsTruncated,MaxItems"`
}

type ListTagsForResourceInput struct {
	ResourceID   *string `location:"uri" locationName:"ResourceId" type:"string" json:"-" xml:"-"`
	ResourceType *string `location:"uri" locationName:"ResourceType" type:"string" json:"-" xml:"-"`

	metadataListTagsForResourceInput `json:"-", xml:"-"`
}

type metadataListTagsForResourceInput struct {
	SDKShapeTraits bool `type:"structure" required:"ResourceType,ResourceId"`
}

type ListTagsForResourceOutput struct {
	ResourceTagSet *ResourceTagSet `type:"structure"`

	metadataListTagsForResourceOutput `json:"-", xml:"-"`
}

type metadataListTagsForResourceOutput struct {
	SDKShapeTraits bool `type:"structure" required:"ResourceTagSet"`
}

type ListTagsForResourcesInput struct {
	ResourceIDs  []*string `locationName:"ResourceIds" locationNameList:"ResourceId" type:"list"`
	ResourceType *string   `location:"uri" locationName:"ResourceType" type:"string" json:"-" xml:"-"`

	metadataListTagsForResourcesInput `json:"-", xml:"-"`
}

type metadataListTagsForResourcesInput struct {
	SDKShapeTraits bool `locationName:"ListTagsForResourcesRequest" type:"structure" required:"ResourceType,ResourceIds" xmlURI:"https://route53.amazonaws.com/doc/2013-04-01/"`
}

type ListTagsForResourcesOutput struct {
	ResourceTagSets []*ResourceTagSet `locationNameList:"ResourceTagSet" type:"list"`

	metadataListTagsForResourcesOutput `json:"-", xml:"-"`
}

type metadataListTagsForResourcesOutput struct {
	SDKShapeTraits bool `type:"structure" required:"ResourceTagSets"`
}

type NoSuchChange struct {
	Message *string `locationName:"message" type:"string"`

	metadataNoSuchChange `json:"-", xml:"-"`
}

type metadataNoSuchChange struct {
	SDKShapeTraits bool `type:"structure"`
}

type NoSuchDelegationSet struct {
	Message *string `locationName:"message" type:"string"`

	metadataNoSuchDelegationSet `json:"-", xml:"-"`
}

type metadataNoSuchDelegationSet struct {
	SDKShapeTraits bool `type:"structure"`
}

type NoSuchGeoLocation struct {
	Message *string `locationName:"message" type:"string"`

	metadataNoSuchGeoLocation `json:"-", xml:"-"`
}

type metadataNoSuchGeoLocation struct {
	SDKShapeTraits bool `type:"structure"`
}

type NoSuchHealthCheck struct {
	Message *string `locationName:"message" type:"string"`

	metadataNoSuchHealthCheck `json:"-", xml:"-"`
}

type metadataNoSuchHealthCheck struct {
	SDKShapeTraits bool `type:"structure"`
}

type NoSuchHostedZone struct {
	Message *string `locationName:"message" type:"string"`

	metadataNoSuchHostedZone `json:"-", xml:"-"`
}

type metadataNoSuchHostedZone struct {
	SDKShapeTraits bool `type:"structure"`
}

type PriorRequestNotComplete struct {
	Message *string `locationName:"message" type:"string"`

	metadataPriorRequestNotComplete `json:"-", xml:"-"`
}

type metadataPriorRequestNotComplete struct {
	SDKShapeTraits bool `type:"structure"`
}

type PublicZoneVPCAssociation struct {
	Message *string `locationName:"message" type:"string"`

	metadataPublicZoneVPCAssociation `json:"-", xml:"-"`
}

type metadataPublicZoneVPCAssociation struct {
	SDKShapeTraits bool `type:"structure"`
}

type ResourceRecord struct {
	Value *string `type:"string"`

	metadataResourceRecord `json:"-", xml:"-"`
}

type metadataResourceRecord struct {
	SDKShapeTraits bool `type:"structure" required:"Value"`
}

type ResourceRecordSet struct {
	AliasTarget     *AliasTarget      `type:"structure"`
	Failover        *string           `type:"string"`
	GeoLocation     *GeoLocation      `type:"structure"`
	HealthCheckID   *string           `locationName:"HealthCheckId" type:"string"`
	Name            *string           `type:"string"`
	Region          *string           `type:"string"`
	ResourceRecords []*ResourceRecord `locationNameList:"ResourceRecord" type:"list"`
	SetIdentifier   *string           `type:"string"`
	TTL             *int64            `type:"long"`
	Type            *string           `type:"string"`
	Weight          *int64            `type:"long"`

	metadataResourceRecordSet `json:"-", xml:"-"`
}

type metadataResourceRecordSet struct {
	SDKShapeTraits bool `type:"structure" required:"Name,Type"`
}

type ResourceTagSet struct {
	ResourceID   *string `locationName:"ResourceId" type:"string"`
	ResourceType *string `type:"string"`
	Tags         []*Tag  `locationNameList:"Tag" type:"list"`

	metadataResourceTagSet `json:"-", xml:"-"`
}

type metadataResourceTagSet struct {
	SDKShapeTraits bool `type:"structure"`
}

type StatusReport struct {
	CheckedTime *time.Time `type:"timestamp" timestampFormat:"iso8601"`
	Status      *string    `type:"string"`

	metadataStatusReport `json:"-", xml:"-"`
}

type metadataStatusReport struct {
	SDKShapeTraits bool `type:"structure"`
}

type Tag struct {
	Key   *string `type:"string"`
	Value *string `type:"string"`

	metadataTag `json:"-", xml:"-"`
}

type metadataTag struct {
	SDKShapeTraits bool `type:"structure"`
}

type ThrottlingException struct {
	Message *string `locationName:"message" type:"string"`

	metadataThrottlingException `json:"-", xml:"-"`
}

type metadataThrottlingException struct {
	SDKShapeTraits bool `type:"structure"`
}

type TooManyHealthChecks struct {
	Message *string `locationName:"message" type:"string"`

	metadataTooManyHealthChecks `json:"-", xml:"-"`
}

type metadataTooManyHealthChecks struct {
	SDKShapeTraits bool `type:"structure"`
}

type TooManyHostedZones struct {
	Message *string `locationName:"message" type:"string"`

	metadataTooManyHostedZones `json:"-", xml:"-"`
}

type metadataTooManyHostedZones struct {
	SDKShapeTraits bool `type:"structure"`
}

type UpdateHealthCheckInput struct {
	FailureThreshold         *int    `type:"integer"`
	FullyQualifiedDomainName *string `type:"string"`
	HealthCheckID            *string `location:"uri" locationName:"HealthCheckId" type:"string" json:"-" xml:"-"`
	HealthCheckVersion       *int64  `type:"long"`
	IPAddress                *string `type:"string"`
	Port                     *int    `type:"integer"`
	ResourcePath             *string `type:"string"`
	SearchString             *string `type:"string"`

	metadataUpdateHealthCheckInput `json:"-", xml:"-"`
}

type metadataUpdateHealthCheckInput struct {
	SDKShapeTraits bool `locationName:"UpdateHealthCheckRequest" type:"structure" required:"HealthCheckId" xmlURI:"https://route53.amazonaws.com/doc/2013-04-01/"`
}

type UpdateHealthCheckOutput struct {
	HealthCheck *HealthCheck `type:"structure"`

	metadataUpdateHealthCheckOutput `json:"-", xml:"-"`
}

type metadataUpdateHealthCheckOutput struct {
	SDKShapeTraits bool `type:"structure" required:"HealthCheck"`
}

type UpdateHostedZoneCommentInput struct {
	Comment *string `type:"string"`
	ID      *string `location:"uri" locationName:"Id" type:"string" json:"-" xml:"-"`

	metadataUpdateHostedZoneCommentInput `json:"-", xml:"-"`
}

type metadataUpdateHostedZoneCommentInput struct {
	SDKShapeTraits bool `locationName:"UpdateHostedZoneCommentRequest" type:"structure" required:"Id" xmlURI:"https://route53.amazonaws.com/doc/2013-04-01/"`
}

type UpdateHostedZoneCommentOutput struct {
	HostedZone *HostedZone `type:"structure"`

	metadataUpdateHostedZoneCommentOutput `json:"-", xml:"-"`
}

type metadataUpdateHostedZoneCommentOutput struct {
	SDKShapeTraits bool `type:"structure" required:"HostedZone"`
}

type VPC struct {
	VPCID     *string `locationName:"VPCId" type:"string"`
	VPCRegion *string `type:"string"`

	metadataVPC `json:"-", xml:"-"`
}

type metadataVPC struct {
	SDKShapeTraits bool `type:"structure"`
}

type VPCAssociationNotFound struct {
	Message *string `locationName:"message" type:"string"`

	metadataVPCAssociationNotFound `json:"-", xml:"-"`
}

type metadataVPCAssociationNotFound struct {
	SDKShapeTraits bool `type:"structure"`
}