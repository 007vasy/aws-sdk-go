package s3

// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.

import (
	"github.com/awslabs/aws-sdk-go/aws"
	"time"
)

// AbortMultipartUploadRequest generates a request for the AbortMultipartUpload operation.
func (c *S3) AbortMultipartUploadRequest(input *AbortMultipartUploadInput) (req *aws.Request) {
	if opAbortMultipartUpload == nil {
		opAbortMultipartUpload = &aws.Operation{
			Name:       "AbortMultipartUpload",
			HTTPMethod: "DELETE",
			HTTPPath:   "/{Bucket}/{Key+}",
		}
	}

	req = aws.NewRequest(c.Service, opAbortMultipartUpload, input, nil)

	return
}

func (c *S3) AbortMultipartUpload(input *AbortMultipartUploadInput) (err error) {
	req := c.AbortMultipartUploadRequest(input)
	err = req.Send()
	return
}

var opAbortMultipartUpload *aws.Operation

// CompleteMultipartUploadRequest generates a request for the CompleteMultipartUpload operation.
func (c *S3) CompleteMultipartUploadRequest(input *CompleteMultipartUploadInput) (req *aws.Request, output *CompleteMultipartUploadOutput) {
	if opCompleteMultipartUpload == nil {
		opCompleteMultipartUpload = &aws.Operation{
			Name:       "CompleteMultipartUpload",
			HTTPMethod: "POST",
			HTTPPath:   "/{Bucket}/{Key+}",
		}
	}

	req = aws.NewRequest(c.Service, opCompleteMultipartUpload, input, output)
	output = &CompleteMultipartUploadOutput{}
	req.Data = output
	return
}

func (c *S3) CompleteMultipartUpload(input *CompleteMultipartUploadInput) (output *CompleteMultipartUploadOutput, err error) {
	req, out := c.CompleteMultipartUploadRequest(input)
	output = out
	err = req.Send()
	return
}

var opCompleteMultipartUpload *aws.Operation

// CopyObjectRequest generates a request for the CopyObject operation.
func (c *S3) CopyObjectRequest(input *CopyObjectInput) (req *aws.Request, output *CopyObjectOutput) {
	if opCopyObject == nil {
		opCopyObject = &aws.Operation{
			Name:       "CopyObject",
			HTTPMethod: "PUT",
			HTTPPath:   "/{Bucket}/{Key+}",
		}
	}

	req = aws.NewRequest(c.Service, opCopyObject, input, output)
	output = &CopyObjectOutput{}
	req.Data = output
	return
}

func (c *S3) CopyObject(input *CopyObjectInput) (output *CopyObjectOutput, err error) {
	req, out := c.CopyObjectRequest(input)
	output = out
	err = req.Send()
	return
}

var opCopyObject *aws.Operation

// CreateBucketRequest generates a request for the CreateBucket operation.
func (c *S3) CreateBucketRequest(input *CreateBucketInput) (req *aws.Request, output *CreateBucketOutput) {
	if opCreateBucket == nil {
		opCreateBucket = &aws.Operation{
			Name:       "CreateBucket",
			HTTPMethod: "PUT",
			HTTPPath:   "/{Bucket}",
		}
	}

	req = aws.NewRequest(c.Service, opCreateBucket, input, output)
	output = &CreateBucketOutput{}
	req.Data = output
	return
}

func (c *S3) CreateBucket(input *CreateBucketInput) (output *CreateBucketOutput, err error) {
	req, out := c.CreateBucketRequest(input)
	output = out
	err = req.Send()
	return
}

var opCreateBucket *aws.Operation

// CreateMultipartUploadRequest generates a request for the CreateMultipartUpload operation.
func (c *S3) CreateMultipartUploadRequest(input *CreateMultipartUploadInput) (req *aws.Request, output *CreateMultipartUploadOutput) {
	if opCreateMultipartUpload == nil {
		opCreateMultipartUpload = &aws.Operation{
			Name:       "CreateMultipartUpload",
			HTTPMethod: "POST",
			HTTPPath:   "/{Bucket}/{Key+}?uploads",
		}
	}

	req = aws.NewRequest(c.Service, opCreateMultipartUpload, input, output)
	output = &CreateMultipartUploadOutput{}
	req.Data = output
	return
}

func (c *S3) CreateMultipartUpload(input *CreateMultipartUploadInput) (output *CreateMultipartUploadOutput, err error) {
	req, out := c.CreateMultipartUploadRequest(input)
	output = out
	err = req.Send()
	return
}

var opCreateMultipartUpload *aws.Operation

// DeleteBucketRequest generates a request for the DeleteBucket operation.
func (c *S3) DeleteBucketRequest(input *DeleteBucketInput) (req *aws.Request) {
	if opDeleteBucket == nil {
		opDeleteBucket = &aws.Operation{
			Name:       "DeleteBucket",
			HTTPMethod: "DELETE",
			HTTPPath:   "/{Bucket}",
		}
	}

	req = aws.NewRequest(c.Service, opDeleteBucket, input, nil)

	return
}

func (c *S3) DeleteBucket(input *DeleteBucketInput) (err error) {
	req := c.DeleteBucketRequest(input)
	err = req.Send()
	return
}

var opDeleteBucket *aws.Operation

// DeleteBucketCORSRequest generates a request for the DeleteBucketCORS operation.
func (c *S3) DeleteBucketCORSRequest(input *DeleteBucketCORSInput) (req *aws.Request) {
	if opDeleteBucketCORS == nil {
		opDeleteBucketCORS = &aws.Operation{
			Name:       "DeleteBucketCors",
			HTTPMethod: "DELETE",
			HTTPPath:   "/{Bucket}?cors",
		}
	}

	req = aws.NewRequest(c.Service, opDeleteBucketCORS, input, nil)

	return
}

func (c *S3) DeleteBucketCORS(input *DeleteBucketCORSInput) (err error) {
	req := c.DeleteBucketCORSRequest(input)
	err = req.Send()
	return
}

var opDeleteBucketCORS *aws.Operation

// DeleteBucketLifecycleRequest generates a request for the DeleteBucketLifecycle operation.
func (c *S3) DeleteBucketLifecycleRequest(input *DeleteBucketLifecycleInput) (req *aws.Request) {
	if opDeleteBucketLifecycle == nil {
		opDeleteBucketLifecycle = &aws.Operation{
			Name:       "DeleteBucketLifecycle",
			HTTPMethod: "DELETE",
			HTTPPath:   "/{Bucket}?lifecycle",
		}
	}

	req = aws.NewRequest(c.Service, opDeleteBucketLifecycle, input, nil)

	return
}

func (c *S3) DeleteBucketLifecycle(input *DeleteBucketLifecycleInput) (err error) {
	req := c.DeleteBucketLifecycleRequest(input)
	err = req.Send()
	return
}

var opDeleteBucketLifecycle *aws.Operation

// DeleteBucketPolicyRequest generates a request for the DeleteBucketPolicy operation.
func (c *S3) DeleteBucketPolicyRequest(input *DeleteBucketPolicyInput) (req *aws.Request) {
	if opDeleteBucketPolicy == nil {
		opDeleteBucketPolicy = &aws.Operation{
			Name:       "DeleteBucketPolicy",
			HTTPMethod: "DELETE",
			HTTPPath:   "/{Bucket}?policy",
		}
	}

	req = aws.NewRequest(c.Service, opDeleteBucketPolicy, input, nil)

	return
}

func (c *S3) DeleteBucketPolicy(input *DeleteBucketPolicyInput) (err error) {
	req := c.DeleteBucketPolicyRequest(input)
	err = req.Send()
	return
}

var opDeleteBucketPolicy *aws.Operation

// DeleteBucketTaggingRequest generates a request for the DeleteBucketTagging operation.
func (c *S3) DeleteBucketTaggingRequest(input *DeleteBucketTaggingInput) (req *aws.Request) {
	if opDeleteBucketTagging == nil {
		opDeleteBucketTagging = &aws.Operation{
			Name:       "DeleteBucketTagging",
			HTTPMethod: "DELETE",
			HTTPPath:   "/{Bucket}?tagging",
		}
	}

	req = aws.NewRequest(c.Service, opDeleteBucketTagging, input, nil)

	return
}

func (c *S3) DeleteBucketTagging(input *DeleteBucketTaggingInput) (err error) {
	req := c.DeleteBucketTaggingRequest(input)
	err = req.Send()
	return
}

var opDeleteBucketTagging *aws.Operation

// DeleteBucketWebsiteRequest generates a request for the DeleteBucketWebsite operation.
func (c *S3) DeleteBucketWebsiteRequest(input *DeleteBucketWebsiteInput) (req *aws.Request) {
	if opDeleteBucketWebsite == nil {
		opDeleteBucketWebsite = &aws.Operation{
			Name:       "DeleteBucketWebsite",
			HTTPMethod: "DELETE",
			HTTPPath:   "/{Bucket}?website",
		}
	}

	req = aws.NewRequest(c.Service, opDeleteBucketWebsite, input, nil)

	return
}

func (c *S3) DeleteBucketWebsite(input *DeleteBucketWebsiteInput) (err error) {
	req := c.DeleteBucketWebsiteRequest(input)
	err = req.Send()
	return
}

var opDeleteBucketWebsite *aws.Operation

// DeleteObjectRequest generates a request for the DeleteObject operation.
func (c *S3) DeleteObjectRequest(input *DeleteObjectInput) (req *aws.Request, output *DeleteObjectOutput) {
	if opDeleteObject == nil {
		opDeleteObject = &aws.Operation{
			Name:       "DeleteObject",
			HTTPMethod: "DELETE",
			HTTPPath:   "/{Bucket}/{Key+}",
		}
	}

	req = aws.NewRequest(c.Service, opDeleteObject, input, output)
	output = &DeleteObjectOutput{}
	req.Data = output
	return
}

func (c *S3) DeleteObject(input *DeleteObjectInput) (output *DeleteObjectOutput, err error) {
	req, out := c.DeleteObjectRequest(input)
	output = out
	err = req.Send()
	return
}

var opDeleteObject *aws.Operation

// DeleteObjectsRequest generates a request for the DeleteObjects operation.
func (c *S3) DeleteObjectsRequest(input *DeleteObjectsInput) (req *aws.Request, output *DeleteObjectsOutput) {
	if opDeleteObjects == nil {
		opDeleteObjects = &aws.Operation{
			Name:       "DeleteObjects",
			HTTPMethod: "POST",
			HTTPPath:   "/{Bucket}?delete",
		}
	}

	req = aws.NewRequest(c.Service, opDeleteObjects, input, output)
	output = &DeleteObjectsOutput{}
	req.Data = output
	return
}

func (c *S3) DeleteObjects(input *DeleteObjectsInput) (output *DeleteObjectsOutput, err error) {
	req, out := c.DeleteObjectsRequest(input)
	output = out
	err = req.Send()
	return
}

var opDeleteObjects *aws.Operation

// GetBucketACLRequest generates a request for the GetBucketACL operation.
func (c *S3) GetBucketACLRequest(input *GetBucketACLInput) (req *aws.Request, output *GetBucketACLOutput) {
	if opGetBucketACL == nil {
		opGetBucketACL = &aws.Operation{
			Name:       "GetBucketAcl",
			HTTPMethod: "GET",
			HTTPPath:   "/{Bucket}?acl",
		}
	}

	req = aws.NewRequest(c.Service, opGetBucketACL, input, output)
	output = &GetBucketACLOutput{}
	req.Data = output
	return
}

func (c *S3) GetBucketACL(input *GetBucketACLInput) (output *GetBucketACLOutput, err error) {
	req, out := c.GetBucketACLRequest(input)
	output = out
	err = req.Send()
	return
}

var opGetBucketACL *aws.Operation

// GetBucketCORSRequest generates a request for the GetBucketCORS operation.
func (c *S3) GetBucketCORSRequest(input *GetBucketCORSInput) (req *aws.Request, output *GetBucketCORSOutput) {
	if opGetBucketCORS == nil {
		opGetBucketCORS = &aws.Operation{
			Name:       "GetBucketCors",
			HTTPMethod: "GET",
			HTTPPath:   "/{Bucket}?cors",
		}
	}

	req = aws.NewRequest(c.Service, opGetBucketCORS, input, output)
	output = &GetBucketCORSOutput{}
	req.Data = output
	return
}

func (c *S3) GetBucketCORS(input *GetBucketCORSInput) (output *GetBucketCORSOutput, err error) {
	req, out := c.GetBucketCORSRequest(input)
	output = out
	err = req.Send()
	return
}

var opGetBucketCORS *aws.Operation

// GetBucketLifecycleRequest generates a request for the GetBucketLifecycle operation.
func (c *S3) GetBucketLifecycleRequest(input *GetBucketLifecycleInput) (req *aws.Request, output *GetBucketLifecycleOutput) {
	if opGetBucketLifecycle == nil {
		opGetBucketLifecycle = &aws.Operation{
			Name:       "GetBucketLifecycle",
			HTTPMethod: "GET",
			HTTPPath:   "/{Bucket}?lifecycle",
		}
	}

	req = aws.NewRequest(c.Service, opGetBucketLifecycle, input, output)
	output = &GetBucketLifecycleOutput{}
	req.Data = output
	return
}

func (c *S3) GetBucketLifecycle(input *GetBucketLifecycleInput) (output *GetBucketLifecycleOutput, err error) {
	req, out := c.GetBucketLifecycleRequest(input)
	output = out
	err = req.Send()
	return
}

var opGetBucketLifecycle *aws.Operation

// GetBucketLocationRequest generates a request for the GetBucketLocation operation.
func (c *S3) GetBucketLocationRequest(input *GetBucketLocationInput) (req *aws.Request, output *GetBucketLocationOutput) {
	if opGetBucketLocation == nil {
		opGetBucketLocation = &aws.Operation{
			Name:       "GetBucketLocation",
			HTTPMethod: "GET",
			HTTPPath:   "/{Bucket}?location",
		}
	}

	req = aws.NewRequest(c.Service, opGetBucketLocation, input, output)
	output = &GetBucketLocationOutput{}
	req.Data = output
	return
}

func (c *S3) GetBucketLocation(input *GetBucketLocationInput) (output *GetBucketLocationOutput, err error) {
	req, out := c.GetBucketLocationRequest(input)
	output = out
	err = req.Send()
	return
}

var opGetBucketLocation *aws.Operation

// GetBucketLoggingRequest generates a request for the GetBucketLogging operation.
func (c *S3) GetBucketLoggingRequest(input *GetBucketLoggingInput) (req *aws.Request, output *GetBucketLoggingOutput) {
	if opGetBucketLogging == nil {
		opGetBucketLogging = &aws.Operation{
			Name:       "GetBucketLogging",
			HTTPMethod: "GET",
			HTTPPath:   "/{Bucket}?logging",
		}
	}

	req = aws.NewRequest(c.Service, opGetBucketLogging, input, output)
	output = &GetBucketLoggingOutput{}
	req.Data = output
	return
}

func (c *S3) GetBucketLogging(input *GetBucketLoggingInput) (output *GetBucketLoggingOutput, err error) {
	req, out := c.GetBucketLoggingRequest(input)
	output = out
	err = req.Send()
	return
}

var opGetBucketLogging *aws.Operation

// GetBucketNotificationRequest generates a request for the GetBucketNotification operation.
func (c *S3) GetBucketNotificationRequest(input *GetBucketNotificationInput) (req *aws.Request, output *GetBucketNotificationOutput) {
	if opGetBucketNotification == nil {
		opGetBucketNotification = &aws.Operation{
			Name:       "GetBucketNotification",
			HTTPMethod: "GET",
			HTTPPath:   "/{Bucket}?notification",
		}
	}

	req = aws.NewRequest(c.Service, opGetBucketNotification, input, output)
	output = &GetBucketNotificationOutput{}
	req.Data = output
	return
}

func (c *S3) GetBucketNotification(input *GetBucketNotificationInput) (output *GetBucketNotificationOutput, err error) {
	req, out := c.GetBucketNotificationRequest(input)
	output = out
	err = req.Send()
	return
}

var opGetBucketNotification *aws.Operation

// GetBucketPolicyRequest generates a request for the GetBucketPolicy operation.
func (c *S3) GetBucketPolicyRequest(input *GetBucketPolicyInput) (req *aws.Request, output *GetBucketPolicyOutput) {
	if opGetBucketPolicy == nil {
		opGetBucketPolicy = &aws.Operation{
			Name:       "GetBucketPolicy",
			HTTPMethod: "GET",
			HTTPPath:   "/{Bucket}?policy",
		}
	}

	req = aws.NewRequest(c.Service, opGetBucketPolicy, input, output)
	output = &GetBucketPolicyOutput{}
	req.Data = output
	return
}

func (c *S3) GetBucketPolicy(input *GetBucketPolicyInput) (output *GetBucketPolicyOutput, err error) {
	req, out := c.GetBucketPolicyRequest(input)
	output = out
	err = req.Send()
	return
}

var opGetBucketPolicy *aws.Operation

// GetBucketRequestPaymentRequest generates a request for the GetBucketRequestPayment operation.
func (c *S3) GetBucketRequestPaymentRequest(input *GetBucketInputPaymentInput) (req *aws.Request, output *GetBucketRequestPaymentOutput) {
	if opGetBucketRequestPayment == nil {
		opGetBucketRequestPayment = &aws.Operation{
			Name:       "GetBucketRequestPayment",
			HTTPMethod: "GET",
			HTTPPath:   "/{Bucket}?requestPayment",
		}
	}

	req = aws.NewRequest(c.Service, opGetBucketRequestPayment, input, output)
	output = &GetBucketRequestPaymentOutput{}
	req.Data = output
	return
}

func (c *S3) GetBucketRequestPayment(input *GetBucketInputPaymentInput) (output *GetBucketRequestPaymentOutput, err error) {
	req, out := c.GetBucketRequestPaymentRequest(input)
	output = out
	err = req.Send()
	return
}

var opGetBucketRequestPayment *aws.Operation

// GetBucketTaggingRequest generates a request for the GetBucketTagging operation.
func (c *S3) GetBucketTaggingRequest(input *GetBucketTaggingInput) (req *aws.Request, output *GetBucketTaggingOutput) {
	if opGetBucketTagging == nil {
		opGetBucketTagging = &aws.Operation{
			Name:       "GetBucketTagging",
			HTTPMethod: "GET",
			HTTPPath:   "/{Bucket}?tagging",
		}
	}

	req = aws.NewRequest(c.Service, opGetBucketTagging, input, output)
	output = &GetBucketTaggingOutput{}
	req.Data = output
	return
}

func (c *S3) GetBucketTagging(input *GetBucketTaggingInput) (output *GetBucketTaggingOutput, err error) {
	req, out := c.GetBucketTaggingRequest(input)
	output = out
	err = req.Send()
	return
}

var opGetBucketTagging *aws.Operation

// GetBucketVersioningRequest generates a request for the GetBucketVersioning operation.
func (c *S3) GetBucketVersioningRequest(input *GetBucketVersioningInput) (req *aws.Request, output *GetBucketVersioningOutput) {
	if opGetBucketVersioning == nil {
		opGetBucketVersioning = &aws.Operation{
			Name:       "GetBucketVersioning",
			HTTPMethod: "GET",
			HTTPPath:   "/{Bucket}?versioning",
		}
	}

	req = aws.NewRequest(c.Service, opGetBucketVersioning, input, output)
	output = &GetBucketVersioningOutput{}
	req.Data = output
	return
}

func (c *S3) GetBucketVersioning(input *GetBucketVersioningInput) (output *GetBucketVersioningOutput, err error) {
	req, out := c.GetBucketVersioningRequest(input)
	output = out
	err = req.Send()
	return
}

var opGetBucketVersioning *aws.Operation

// GetBucketWebsiteRequest generates a request for the GetBucketWebsite operation.
func (c *S3) GetBucketWebsiteRequest(input *GetBucketWebsiteInput) (req *aws.Request, output *GetBucketWebsiteOutput) {
	if opGetBucketWebsite == nil {
		opGetBucketWebsite = &aws.Operation{
			Name:       "GetBucketWebsite",
			HTTPMethod: "GET",
			HTTPPath:   "/{Bucket}?website",
		}
	}

	req = aws.NewRequest(c.Service, opGetBucketWebsite, input, output)
	output = &GetBucketWebsiteOutput{}
	req.Data = output
	return
}

func (c *S3) GetBucketWebsite(input *GetBucketWebsiteInput) (output *GetBucketWebsiteOutput, err error) {
	req, out := c.GetBucketWebsiteRequest(input)
	output = out
	err = req.Send()
	return
}

var opGetBucketWebsite *aws.Operation

// GetObjectRequest generates a request for the GetObject operation.
func (c *S3) GetObjectRequest(input *GetObjectInput) (req *aws.Request, output *GetObjectOutput) {
	if opGetObject == nil {
		opGetObject = &aws.Operation{
			Name:       "GetObject",
			HTTPMethod: "GET",
			HTTPPath:   "/{Bucket}/{Key+}",
		}
	}

	req = aws.NewRequest(c.Service, opGetObject, input, output)
	output = &GetObjectOutput{}
	req.Data = output
	return
}

func (c *S3) GetObject(input *GetObjectInput) (output *GetObjectOutput, err error) {
	req, out := c.GetObjectRequest(input)
	output = out
	err = req.Send()
	return
}

var opGetObject *aws.Operation

// GetObjectACLRequest generates a request for the GetObjectACL operation.
func (c *S3) GetObjectACLRequest(input *GetObjectACLInput) (req *aws.Request, output *GetObjectACLOutput) {
	if opGetObjectACL == nil {
		opGetObjectACL = &aws.Operation{
			Name:       "GetObjectAcl",
			HTTPMethod: "GET",
			HTTPPath:   "/{Bucket}/{Key+}?acl",
		}
	}

	req = aws.NewRequest(c.Service, opGetObjectACL, input, output)
	output = &GetObjectACLOutput{}
	req.Data = output
	return
}

func (c *S3) GetObjectACL(input *GetObjectACLInput) (output *GetObjectACLOutput, err error) {
	req, out := c.GetObjectACLRequest(input)
	output = out
	err = req.Send()
	return
}

var opGetObjectACL *aws.Operation

// GetObjectTorrentRequest generates a request for the GetObjectTorrent operation.
func (c *S3) GetObjectTorrentRequest(input *GetObjectTorrentInput) (req *aws.Request, output *GetObjectTorrentOutput) {
	if opGetObjectTorrent == nil {
		opGetObjectTorrent = &aws.Operation{
			Name:       "GetObjectTorrent",
			HTTPMethod: "GET",
			HTTPPath:   "/{Bucket}/{Key+}?torrent",
		}
	}

	req = aws.NewRequest(c.Service, opGetObjectTorrent, input, output)
	output = &GetObjectTorrentOutput{}
	req.Data = output
	return
}

func (c *S3) GetObjectTorrent(input *GetObjectTorrentInput) (output *GetObjectTorrentOutput, err error) {
	req, out := c.GetObjectTorrentRequest(input)
	output = out
	err = req.Send()
	return
}

var opGetObjectTorrent *aws.Operation

// HeadBucketRequest generates a request for the HeadBucket operation.
func (c *S3) HeadBucketRequest(input *HeadBucketInput) (req *aws.Request) {
	if opHeadBucket == nil {
		opHeadBucket = &aws.Operation{
			Name:       "HeadBucket",
			HTTPMethod: "HEAD",
			HTTPPath:   "/{Bucket}",
		}
	}

	req = aws.NewRequest(c.Service, opHeadBucket, input, nil)

	return
}

func (c *S3) HeadBucket(input *HeadBucketInput) (err error) {
	req := c.HeadBucketRequest(input)
	err = req.Send()
	return
}

var opHeadBucket *aws.Operation

// HeadObjectRequest generates a request for the HeadObject operation.
func (c *S3) HeadObjectRequest(input *HeadObjectInput) (req *aws.Request, output *HeadObjectOutput) {
	if opHeadObject == nil {
		opHeadObject = &aws.Operation{
			Name:       "HeadObject",
			HTTPMethod: "HEAD",
			HTTPPath:   "/{Bucket}/{Key+}",
		}
	}

	req = aws.NewRequest(c.Service, opHeadObject, input, output)
	output = &HeadObjectOutput{}
	req.Data = output
	return
}

func (c *S3) HeadObject(input *HeadObjectInput) (output *HeadObjectOutput, err error) {
	req, out := c.HeadObjectRequest(input)
	output = out
	err = req.Send()
	return
}

var opHeadObject *aws.Operation

// ListBucketsRequest generates a request for the ListBuckets operation.
func (c *S3) ListBucketsRequest() (req *aws.Request, output *ListBucketsOutput) {
	if opListBuckets == nil {
		opListBuckets = &aws.Operation{
			Name:       "ListBuckets",
			HTTPMethod: "GET",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opListBuckets, nil, output)
	output = &ListBucketsOutput{}
	req.Data = output
	return
}

func (c *S3) ListBuckets() (output *ListBucketsOutput, err error) {
	req, out := c.ListBucketsRequest()
	output = out
	err = req.Send()
	return
}

var opListBuckets *aws.Operation

// ListMultipartUploadsRequest generates a request for the ListMultipartUploads operation.
func (c *S3) ListMultipartUploadsRequest(input *ListMultipartUploadsInput) (req *aws.Request, output *ListMultipartUploadsOutput) {
	if opListMultipartUploads == nil {
		opListMultipartUploads = &aws.Operation{
			Name:       "ListMultipartUploads",
			HTTPMethod: "GET",
			HTTPPath:   "/{Bucket}?uploads",
		}
	}

	req = aws.NewRequest(c.Service, opListMultipartUploads, input, output)
	output = &ListMultipartUploadsOutput{}
	req.Data = output
	return
}

func (c *S3) ListMultipartUploads(input *ListMultipartUploadsInput) (output *ListMultipartUploadsOutput, err error) {
	req, out := c.ListMultipartUploadsRequest(input)
	output = out
	err = req.Send()
	return
}

var opListMultipartUploads *aws.Operation

// ListObjectVersionsRequest generates a request for the ListObjectVersions operation.
func (c *S3) ListObjectVersionsRequest(input *ListObjectVersionsInput) (req *aws.Request, output *ListObjectVersionsOutput) {
	if opListObjectVersions == nil {
		opListObjectVersions = &aws.Operation{
			Name:       "ListObjectVersions",
			HTTPMethod: "GET",
			HTTPPath:   "/{Bucket}?versions",
		}
	}

	req = aws.NewRequest(c.Service, opListObjectVersions, input, output)
	output = &ListObjectVersionsOutput{}
	req.Data = output
	return
}

func (c *S3) ListObjectVersions(input *ListObjectVersionsInput) (output *ListObjectVersionsOutput, err error) {
	req, out := c.ListObjectVersionsRequest(input)
	output = out
	err = req.Send()
	return
}

var opListObjectVersions *aws.Operation

// ListObjectsRequest generates a request for the ListObjects operation.
func (c *S3) ListObjectsRequest(input *ListObjectsInput) (req *aws.Request, output *ListObjectsOutput) {
	if opListObjects == nil {
		opListObjects = &aws.Operation{
			Name:       "ListObjects",
			HTTPMethod: "GET",
			HTTPPath:   "/{Bucket}",
		}
	}

	req = aws.NewRequest(c.Service, opListObjects, input, output)
	output = &ListObjectsOutput{}
	req.Data = output
	return
}

func (c *S3) ListObjects(input *ListObjectsInput) (output *ListObjectsOutput, err error) {
	req, out := c.ListObjectsRequest(input)
	output = out
	err = req.Send()
	return
}

var opListObjects *aws.Operation

// ListPartsRequest generates a request for the ListParts operation.
func (c *S3) ListPartsRequest(input *ListPartsInput) (req *aws.Request, output *ListPartsOutput) {
	if opListParts == nil {
		opListParts = &aws.Operation{
			Name:       "ListParts",
			HTTPMethod: "GET",
			HTTPPath:   "/{Bucket}/{Key+}",
		}
	}

	req = aws.NewRequest(c.Service, opListParts, input, output)
	output = &ListPartsOutput{}
	req.Data = output
	return
}

func (c *S3) ListParts(input *ListPartsInput) (output *ListPartsOutput, err error) {
	req, out := c.ListPartsRequest(input)
	output = out
	err = req.Send()
	return
}

var opListParts *aws.Operation

// PutBucketACLRequest generates a request for the PutBucketACL operation.
func (c *S3) PutBucketACLRequest(input *PutBucketACLInput) (req *aws.Request) {
	if opPutBucketACL == nil {
		opPutBucketACL = &aws.Operation{
			Name:       "PutBucketAcl",
			HTTPMethod: "PUT",
			HTTPPath:   "/{Bucket}?acl",
		}
	}

	req = aws.NewRequest(c.Service, opPutBucketACL, input, nil)

	return
}

func (c *S3) PutBucketACL(input *PutBucketACLInput) (err error) {
	req := c.PutBucketACLRequest(input)
	err = req.Send()
	return
}

var opPutBucketACL *aws.Operation

// PutBucketCORSRequest generates a request for the PutBucketCORS operation.
func (c *S3) PutBucketCORSRequest(input *PutBucketCORSInput) (req *aws.Request) {
	if opPutBucketCORS == nil {
		opPutBucketCORS = &aws.Operation{
			Name:       "PutBucketCors",
			HTTPMethod: "PUT",
			HTTPPath:   "/{Bucket}?cors",
		}
	}

	req = aws.NewRequest(c.Service, opPutBucketCORS, input, nil)

	return
}

func (c *S3) PutBucketCORS(input *PutBucketCORSInput) (err error) {
	req := c.PutBucketCORSRequest(input)
	err = req.Send()
	return
}

var opPutBucketCORS *aws.Operation

// PutBucketLifecycleRequest generates a request for the PutBucketLifecycle operation.
func (c *S3) PutBucketLifecycleRequest(input *PutBucketLifecycleInput) (req *aws.Request) {
	if opPutBucketLifecycle == nil {
		opPutBucketLifecycle = &aws.Operation{
			Name:       "PutBucketLifecycle",
			HTTPMethod: "PUT",
			HTTPPath:   "/{Bucket}?lifecycle",
		}
	}

	req = aws.NewRequest(c.Service, opPutBucketLifecycle, input, nil)

	return
}

func (c *S3) PutBucketLifecycle(input *PutBucketLifecycleInput) (err error) {
	req := c.PutBucketLifecycleRequest(input)
	err = req.Send()
	return
}

var opPutBucketLifecycle *aws.Operation

// PutBucketLoggingRequest generates a request for the PutBucketLogging operation.
func (c *S3) PutBucketLoggingRequest(input *PutBucketLoggingInput) (req *aws.Request) {
	if opPutBucketLogging == nil {
		opPutBucketLogging = &aws.Operation{
			Name:       "PutBucketLogging",
			HTTPMethod: "PUT",
			HTTPPath:   "/{Bucket}?logging",
		}
	}

	req = aws.NewRequest(c.Service, opPutBucketLogging, input, nil)

	return
}

func (c *S3) PutBucketLogging(input *PutBucketLoggingInput) (err error) {
	req := c.PutBucketLoggingRequest(input)
	err = req.Send()
	return
}

var opPutBucketLogging *aws.Operation

// PutBucketNotificationRequest generates a request for the PutBucketNotification operation.
func (c *S3) PutBucketNotificationRequest(input *PutBucketNotificationInput) (req *aws.Request) {
	if opPutBucketNotification == nil {
		opPutBucketNotification = &aws.Operation{
			Name:       "PutBucketNotification",
			HTTPMethod: "PUT",
			HTTPPath:   "/{Bucket}?notification",
		}
	}

	req = aws.NewRequest(c.Service, opPutBucketNotification, input, nil)

	return
}

func (c *S3) PutBucketNotification(input *PutBucketNotificationInput) (err error) {
	req := c.PutBucketNotificationRequest(input)
	err = req.Send()
	return
}

var opPutBucketNotification *aws.Operation

// PutBucketPolicyRequest generates a request for the PutBucketPolicy operation.
func (c *S3) PutBucketPolicyRequest(input *PutBucketPolicyInput) (req *aws.Request) {
	if opPutBucketPolicy == nil {
		opPutBucketPolicy = &aws.Operation{
			Name:       "PutBucketPolicy",
			HTTPMethod: "PUT",
			HTTPPath:   "/{Bucket}?policy",
		}
	}

	req = aws.NewRequest(c.Service, opPutBucketPolicy, input, nil)

	return
}

func (c *S3) PutBucketPolicy(input *PutBucketPolicyInput) (err error) {
	req := c.PutBucketPolicyRequest(input)
	err = req.Send()
	return
}

var opPutBucketPolicy *aws.Operation

// PutBucketRequestPaymentRequest generates a request for the PutBucketRequestPayment operation.
func (c *S3) PutBucketRequestPaymentRequest(input *PutBucketInputPaymentInput) (req *aws.Request) {
	if opPutBucketRequestPayment == nil {
		opPutBucketRequestPayment = &aws.Operation{
			Name:       "PutBucketRequestPayment",
			HTTPMethod: "PUT",
			HTTPPath:   "/{Bucket}?requestPayment",
		}
	}

	req = aws.NewRequest(c.Service, opPutBucketRequestPayment, input, nil)

	return
}

func (c *S3) PutBucketRequestPayment(input *PutBucketInputPaymentInput) (err error) {
	req := c.PutBucketRequestPaymentRequest(input)
	err = req.Send()
	return
}

var opPutBucketRequestPayment *aws.Operation

// PutBucketTaggingRequest generates a request for the PutBucketTagging operation.
func (c *S3) PutBucketTaggingRequest(input *PutBucketTaggingInput) (req *aws.Request) {
	if opPutBucketTagging == nil {
		opPutBucketTagging = &aws.Operation{
			Name:       "PutBucketTagging",
			HTTPMethod: "PUT",
			HTTPPath:   "/{Bucket}?tagging",
		}
	}

	req = aws.NewRequest(c.Service, opPutBucketTagging, input, nil)

	return
}

func (c *S3) PutBucketTagging(input *PutBucketTaggingInput) (err error) {
	req := c.PutBucketTaggingRequest(input)
	err = req.Send()
	return
}

var opPutBucketTagging *aws.Operation

// PutBucketVersioningRequest generates a request for the PutBucketVersioning operation.
func (c *S3) PutBucketVersioningRequest(input *PutBucketVersioningInput) (req *aws.Request) {
	if opPutBucketVersioning == nil {
		opPutBucketVersioning = &aws.Operation{
			Name:       "PutBucketVersioning",
			HTTPMethod: "PUT",
			HTTPPath:   "/{Bucket}?versioning",
		}
	}

	req = aws.NewRequest(c.Service, opPutBucketVersioning, input, nil)

	return
}

func (c *S3) PutBucketVersioning(input *PutBucketVersioningInput) (err error) {
	req := c.PutBucketVersioningRequest(input)
	err = req.Send()
	return
}

var opPutBucketVersioning *aws.Operation

// PutBucketWebsiteRequest generates a request for the PutBucketWebsite operation.
func (c *S3) PutBucketWebsiteRequest(input *PutBucketWebsiteInput) (req *aws.Request) {
	if opPutBucketWebsite == nil {
		opPutBucketWebsite = &aws.Operation{
			Name:       "PutBucketWebsite",
			HTTPMethod: "PUT",
			HTTPPath:   "/{Bucket}?website",
		}
	}

	req = aws.NewRequest(c.Service, opPutBucketWebsite, input, nil)

	return
}

func (c *S3) PutBucketWebsite(input *PutBucketWebsiteInput) (err error) {
	req := c.PutBucketWebsiteRequest(input)
	err = req.Send()
	return
}

var opPutBucketWebsite *aws.Operation

// PutObjectRequest generates a request for the PutObject operation.
func (c *S3) PutObjectRequest(input *PutObjectInput) (req *aws.Request, output *PutObjectOutput) {
	if opPutObject == nil {
		opPutObject = &aws.Operation{
			Name:       "PutObject",
			HTTPMethod: "PUT",
			HTTPPath:   "/{Bucket}/{Key+}",
		}
	}

	req = aws.NewRequest(c.Service, opPutObject, input, output)
	output = &PutObjectOutput{}
	req.Data = output
	return
}

func (c *S3) PutObject(input *PutObjectInput) (output *PutObjectOutput, err error) {
	req, out := c.PutObjectRequest(input)
	output = out
	err = req.Send()
	return
}

var opPutObject *aws.Operation

// PutObjectACLRequest generates a request for the PutObjectACL operation.
func (c *S3) PutObjectACLRequest(input *PutObjectACLInput) (req *aws.Request) {
	if opPutObjectACL == nil {
		opPutObjectACL = &aws.Operation{
			Name:       "PutObjectAcl",
			HTTPMethod: "PUT",
			HTTPPath:   "/{Bucket}/{Key+}?acl",
		}
	}

	req = aws.NewRequest(c.Service, opPutObjectACL, input, nil)

	return
}

func (c *S3) PutObjectACL(input *PutObjectACLInput) (err error) {
	req := c.PutObjectACLRequest(input)
	err = req.Send()
	return
}

var opPutObjectACL *aws.Operation

// RestoreObjectRequest generates a request for the RestoreObject operation.
func (c *S3) RestoreObjectRequest(input *RestoreObjectInput) (req *aws.Request) {
	if opRestoreObject == nil {
		opRestoreObject = &aws.Operation{
			Name:       "RestoreObject",
			HTTPMethod: "POST",
			HTTPPath:   "/{Bucket}/{Key+}?restore",
		}
	}

	req = aws.NewRequest(c.Service, opRestoreObject, input, nil)

	return
}

func (c *S3) RestoreObject(input *RestoreObjectInput) (err error) {
	req := c.RestoreObjectRequest(input)
	err = req.Send()
	return
}

var opRestoreObject *aws.Operation

// UploadPartRequest generates a request for the UploadPart operation.
func (c *S3) UploadPartRequest(input *UploadPartInput) (req *aws.Request, output *UploadPartOutput) {
	if opUploadPart == nil {
		opUploadPart = &aws.Operation{
			Name:       "UploadPart",
			HTTPMethod: "PUT",
			HTTPPath:   "/{Bucket}/{Key+}",
		}
	}

	req = aws.NewRequest(c.Service, opUploadPart, input, output)
	output = &UploadPartOutput{}
	req.Data = output
	return
}

func (c *S3) UploadPart(input *UploadPartInput) (output *UploadPartOutput, err error) {
	req, out := c.UploadPartRequest(input)
	output = out
	err = req.Send()
	return
}

var opUploadPart *aws.Operation

// UploadPartCopyRequest generates a request for the UploadPartCopy operation.
func (c *S3) UploadPartCopyRequest(input *UploadPartCopyInput) (req *aws.Request, output *UploadPartCopyOutput) {
	if opUploadPartCopy == nil {
		opUploadPartCopy = &aws.Operation{
			Name:       "UploadPartCopy",
			HTTPMethod: "PUT",
			HTTPPath:   "/{Bucket}/{Key+}",
		}
	}

	req = aws.NewRequest(c.Service, opUploadPartCopy, input, output)
	output = &UploadPartCopyOutput{}
	req.Data = output
	return
}

func (c *S3) UploadPartCopy(input *UploadPartCopyInput) (output *UploadPartCopyOutput, err error) {
	req, out := c.UploadPartCopyRequest(input)
	output = out
	err = req.Send()
	return
}

var opUploadPartCopy *aws.Operation

type AbortMultipartUploadInput struct {
	Bucket   *string `location:"uri" locationName:"Bucket" type:"string" json:"-" xml:"-"`
	Key      *string `location:"uri" locationName:"Key" type:"string" json:"-" xml:"-"`
	UploadID *string `location:"querystring" locationName:"uploadId" type:"string" json:"-" xml:"-"`

	metadataAbortMultipartUploadInput `json:"-", xml:"-"`
}

type metadataAbortMultipartUploadInput struct {
	SDKShapeTraits bool `type:"structure" required:"Bucket,Key,UploadId"`
}

type AccessControlPolicy struct {
	Grants []*Grant `locationName:"AccessControlList" locationNameList:"Grant" type:"list"`
	Owner  *Owner   `type:"structure"`

	metadataAccessControlPolicy `json:"-", xml:"-"`
}

type metadataAccessControlPolicy struct {
	SDKShapeTraits bool `type:"structure"`
}

type Bucket struct {
	CreationDate *time.Time `type:"timestamp" timestampFormat:"iso8601"`
	Name         *string    `type:"string"`

	metadataBucket `json:"-", xml:"-"`
}

type metadataBucket struct {
	SDKShapeTraits bool `type:"structure"`
}

type BucketAlreadyExists struct {
	metadataBucketAlreadyExists `json:"-", xml:"-"`
}

type metadataBucketAlreadyExists struct {
	SDKShapeTraits bool `type:"structure"`
}

type BucketLoggingStatus struct {
	LoggingEnabled *LoggingEnabled `type:"structure"`

	metadataBucketLoggingStatus `json:"-", xml:"-"`
}

type metadataBucketLoggingStatus struct {
	SDKShapeTraits bool `type:"structure"`
}

type CORSConfiguration struct {
	CORSRules []*CORSRule `locationName:"CORSRule" type:"list" flattened:"true"`

	metadataCORSConfiguration `json:"-", xml:"-"`
}

type metadataCORSConfiguration struct {
	SDKShapeTraits bool `type:"structure"`
}

type CORSRule struct {
	AllowedHeaders []*string `locationName:"AllowedHeader" type:"list" flattened:"true"`
	AllowedMethods []*string `locationName:"AllowedMethod" type:"list" flattened:"true"`
	AllowedOrigins []*string `locationName:"AllowedOrigin" type:"list" flattened:"true"`
	ExposeHeaders  []*string `locationName:"ExposeHeader" type:"list" flattened:"true"`
	MaxAgeSeconds  *int      `type:"integer"`

	metadataCORSRule `json:"-", xml:"-"`
}

type metadataCORSRule struct {
	SDKShapeTraits bool `type:"structure"`
}

type CloudFunctionConfiguration struct {
	CloudFunction  *string   `type:"string"`
	Event          *string   `type:"string"`
	Events         []*string `locationName:"Event" type:"list" flattened:"true"`
	ID             *string   `locationName:"Id" type:"string"`
	InvocationRole *string   `type:"string"`

	metadataCloudFunctionConfiguration `json:"-", xml:"-"`
}

type metadataCloudFunctionConfiguration struct {
	SDKShapeTraits bool `type:"structure"`
}

type CommonPrefix struct {
	Prefix *string `type:"string"`

	metadataCommonPrefix `json:"-", xml:"-"`
}

type metadataCommonPrefix struct {
	SDKShapeTraits bool `type:"structure"`
}

type CompleteMultipartUploadInput struct {
	Bucket          *string                   `location:"uri" locationName:"Bucket" type:"string" json:"-" xml:"-"`
	Key             *string                   `location:"uri" locationName:"Key" type:"string" json:"-" xml:"-"`
	MultipartUpload *CompletedMultipartUpload `locationName:"CompleteMultipartUpload" type:"structure"`
	UploadID        *string                   `location:"querystring" locationName:"uploadId" type:"string" json:"-" xml:"-"`

	metadataCompleteMultipartUploadInput `json:"-", xml:"-"`
}

type metadataCompleteMultipartUploadInput struct {
	SDKShapeTraits bool `type:"structure" payload:"MultipartUpload" required:"Bucket,Key,UploadId"`
}

type CompleteMultipartUploadOutput struct {
	Bucket               *string    `type:"string"`
	ETag                 *string    `type:"string"`
	Expiration           *time.Time `location:"header" locationName:"x-amz-expiration" type:"timestamp" timestampFormat:"rfc822" json:"-" xml:"-"`
	Key                  *string    `type:"string"`
	Location             *string    `type:"string"`
	SSEKMSKeyID          *string    `location:"header" locationName:"x-amz-server-side-encryption-aws-kms-key-id" type:"string" json:"-" xml:"-"`
	ServerSideEncryption *string    `location:"header" locationName:"x-amz-server-side-encryption" type:"string" json:"-" xml:"-"`
	VersionID            *string    `location:"header" locationName:"x-amz-version-id" type:"string" json:"-" xml:"-"`

	metadataCompleteMultipartUploadOutput `json:"-", xml:"-"`
}

type metadataCompleteMultipartUploadOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type CompletedMultipartUpload struct {
	Parts []*CompletedPart `locationName:"Part" type:"list" flattened:"true"`

	metadataCompletedMultipartUpload `json:"-", xml:"-"`
}

type metadataCompletedMultipartUpload struct {
	SDKShapeTraits bool `type:"structure"`
}

type CompletedPart struct {
	ETag       *string `type:"string"`
	PartNumber *int    `type:"integer"`

	metadataCompletedPart `json:"-", xml:"-"`
}

type metadataCompletedPart struct {
	SDKShapeTraits bool `type:"structure"`
}

type Condition struct {
	HTTPErrorCodeReturnedEquals *string `locationName:"HttpErrorCodeReturnedEquals" type:"string"`
	KeyPrefixEquals             *string `type:"string"`

	metadataCondition `json:"-", xml:"-"`
}

type metadataCondition struct {
	SDKShapeTraits bool `type:"structure"`
}

type CopyObjectInput struct {
	ACL                            *string             `location:"header" locationName:"x-amz-acl" type:"string" json:"-" xml:"-"`
	Bucket                         *string             `location:"uri" locationName:"Bucket" type:"string" json:"-" xml:"-"`
	CacheControl                   *string             `location:"header" locationName:"Cache-Control" type:"string" json:"-" xml:"-"`
	ContentDisposition             *string             `location:"header" locationName:"Content-Disposition" type:"string" json:"-" xml:"-"`
	ContentEncoding                *string             `location:"header" locationName:"Content-Encoding" type:"string" json:"-" xml:"-"`
	ContentLanguage                *string             `location:"header" locationName:"Content-Language" type:"string" json:"-" xml:"-"`
	ContentType                    *string             `location:"header" locationName:"Content-Type" type:"string" json:"-" xml:"-"`
	CopySource                     *string             `location:"header" locationName:"x-amz-copy-source" type:"string" json:"-" xml:"-"`
	CopySourceIfMatch              *string             `location:"header" locationName:"x-amz-copy-source-if-match" type:"string" json:"-" xml:"-"`
	CopySourceIfModifiedSince      *time.Time          `location:"header" locationName:"x-amz-copy-source-if-modified-since" type:"timestamp" timestampFormat:"rfc822" json:"-" xml:"-"`
	CopySourceIfNoneMatch          *string             `location:"header" locationName:"x-amz-copy-source-if-none-match" type:"string" json:"-" xml:"-"`
	CopySourceIfUnmodifiedSince    *time.Time          `location:"header" locationName:"x-amz-copy-source-if-unmodified-since" type:"timestamp" timestampFormat:"rfc822" json:"-" xml:"-"`
	CopySourceSSECustomerAlgorithm *string             `location:"header" locationName:"x-amz-copy-source-server-side-encryption-customer-algorithm" type:"string" json:"-" xml:"-"`
	CopySourceSSECustomerKey       *string             `location:"header" locationName:"x-amz-copy-source-server-side-encryption-customer-key" type:"string" json:"-" xml:"-"`
	CopySourceSSECustomerKeyMD5    *string             `location:"header" locationName:"x-amz-copy-source-server-side-encryption-customer-key-MD5" type:"string" json:"-" xml:"-"`
	Expires                        *time.Time          `location:"header" locationName:"Expires" type:"timestamp" timestampFormat:"rfc822" json:"-" xml:"-"`
	GrantFullControl               *string             `location:"header" locationName:"x-amz-grant-full-control" type:"string" json:"-" xml:"-"`
	GrantRead                      *string             `location:"header" locationName:"x-amz-grant-read" type:"string" json:"-" xml:"-"`
	GrantReadACP                   *string             `location:"header" locationName:"x-amz-grant-read-acp" type:"string" json:"-" xml:"-"`
	GrantWriteACP                  *string             `location:"header" locationName:"x-amz-grant-write-acp" type:"string" json:"-" xml:"-"`
	Key                            *string             `location:"uri" locationName:"Key" type:"string" json:"-" xml:"-"`
	Metadata                       *map[string]*string `location:"headers" locationName:"x-amz-meta-" type:"map" json:"-" xml:"-"`
	MetadataDirective              *string             `location:"header" locationName:"x-amz-metadata-directive" type:"string" json:"-" xml:"-"`
	SSECustomerAlgorithm           *string             `location:"header" locationName:"x-amz-server-side-encryption-customer-algorithm" type:"string" json:"-" xml:"-"`
	SSECustomerKey                 *string             `location:"header" locationName:"x-amz-server-side-encryption-customer-key" type:"string" json:"-" xml:"-"`
	SSECustomerKeyMD5              *string             `location:"header" locationName:"x-amz-server-side-encryption-customer-key-MD5" type:"string" json:"-" xml:"-"`
	SSEKMSKeyID                    *string             `location:"header" locationName:"x-amz-server-side-encryption-aws-kms-key-id" type:"string" json:"-" xml:"-"`
	ServerSideEncryption           *string             `location:"header" locationName:"x-amz-server-side-encryption" type:"string" json:"-" xml:"-"`
	StorageClass                   *string             `location:"header" locationName:"x-amz-storage-class" type:"string" json:"-" xml:"-"`
	WebsiteRedirectLocation        *string             `location:"header" locationName:"x-amz-website-redirect-location" type:"string" json:"-" xml:"-"`

	metadataCopyObjectInput `json:"-", xml:"-"`
}

type metadataCopyObjectInput struct {
	SDKShapeTraits bool `type:"structure" required:"Bucket,CopySource,Key"`
}

type CopyObjectOutput struct {
	CopyObjectResult     *CopyObjectResult `type:"structure"`
	CopySourceVersionID  *string           `location:"header" locationName:"x-amz-copy-source-version-id" type:"string" json:"-" xml:"-"`
	Expiration           *time.Time        `location:"header" locationName:"x-amz-expiration" type:"timestamp" timestampFormat:"rfc822" json:"-" xml:"-"`
	SSECustomerAlgorithm *string           `location:"header" locationName:"x-amz-server-side-encryption-customer-algorithm" type:"string" json:"-" xml:"-"`
	SSECustomerKeyMD5    *string           `location:"header" locationName:"x-amz-server-side-encryption-customer-key-MD5" type:"string" json:"-" xml:"-"`
	SSEKMSKeyID          *string           `location:"header" locationName:"x-amz-server-side-encryption-aws-kms-key-id" type:"string" json:"-" xml:"-"`
	ServerSideEncryption *string           `location:"header" locationName:"x-amz-server-side-encryption" type:"string" json:"-" xml:"-"`

	metadataCopyObjectOutput `json:"-", xml:"-"`
}

type metadataCopyObjectOutput struct {
	SDKShapeTraits bool `type:"structure" payload:"CopyObjectResult"`
}

type CopyObjectResult struct {
	ETag         *string    `type:"string"`
	LastModified *time.Time `type:"timestamp" timestampFormat:"iso8601"`

	metadataCopyObjectResult `json:"-", xml:"-"`
}

type metadataCopyObjectResult struct {
	SDKShapeTraits bool `type:"structure"`
}

type CopyPartResult struct {
	ETag         *string    `type:"string"`
	LastModified *time.Time `type:"timestamp" timestampFormat:"iso8601"`

	metadataCopyPartResult `json:"-", xml:"-"`
}

type metadataCopyPartResult struct {
	SDKShapeTraits bool `type:"structure"`
}

type CreateBucketConfiguration struct {
	LocationConstraint *string `type:"string"`

	metadataCreateBucketConfiguration `json:"-", xml:"-"`
}

type metadataCreateBucketConfiguration struct {
	SDKShapeTraits bool `type:"structure"`
}

type CreateBucketInput struct {
	ACL                       *string                    `location:"header" locationName:"x-amz-acl" type:"string" json:"-" xml:"-"`
	Bucket                    *string                    `location:"uri" locationName:"Bucket" type:"string" json:"-" xml:"-"`
	CreateBucketConfiguration *CreateBucketConfiguration `locationName:"CreateBucketConfiguration" type:"structure"`
	GrantFullControl          *string                    `location:"header" locationName:"x-amz-grant-full-control" type:"string" json:"-" xml:"-"`
	GrantRead                 *string                    `location:"header" locationName:"x-amz-grant-read" type:"string" json:"-" xml:"-"`
	GrantReadACP              *string                    `location:"header" locationName:"x-amz-grant-read-acp" type:"string" json:"-" xml:"-"`
	GrantWrite                *string                    `location:"header" locationName:"x-amz-grant-write" type:"string" json:"-" xml:"-"`
	GrantWriteACP             *string                    `location:"header" locationName:"x-amz-grant-write-acp" type:"string" json:"-" xml:"-"`

	metadataCreateBucketInput `json:"-", xml:"-"`
}

type metadataCreateBucketInput struct {
	SDKShapeTraits bool `type:"structure" payload:"CreateBucketConfiguration" required:"Bucket"`
}

type CreateBucketOutput struct {
	Location *string `location:"header" locationName:"Location" type:"string" json:"-" xml:"-"`

	metadataCreateBucketOutput `json:"-", xml:"-"`
}

type metadataCreateBucketOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type CreateMultipartUploadInput struct {
	ACL                     *string             `location:"header" locationName:"x-amz-acl" type:"string" json:"-" xml:"-"`
	Bucket                  *string             `location:"uri" locationName:"Bucket" type:"string" json:"-" xml:"-"`
	CacheControl            *string             `location:"header" locationName:"Cache-Control" type:"string" json:"-" xml:"-"`
	ContentDisposition      *string             `location:"header" locationName:"Content-Disposition" type:"string" json:"-" xml:"-"`
	ContentEncoding         *string             `location:"header" locationName:"Content-Encoding" type:"string" json:"-" xml:"-"`
	ContentLanguage         *string             `location:"header" locationName:"Content-Language" type:"string" json:"-" xml:"-"`
	ContentType             *string             `location:"header" locationName:"Content-Type" type:"string" json:"-" xml:"-"`
	Expires                 *time.Time          `location:"header" locationName:"Expires" type:"timestamp" timestampFormat:"rfc822" json:"-" xml:"-"`
	GrantFullControl        *string             `location:"header" locationName:"x-amz-grant-full-control" type:"string" json:"-" xml:"-"`
	GrantRead               *string             `location:"header" locationName:"x-amz-grant-read" type:"string" json:"-" xml:"-"`
	GrantReadACP            *string             `location:"header" locationName:"x-amz-grant-read-acp" type:"string" json:"-" xml:"-"`
	GrantWriteACP           *string             `location:"header" locationName:"x-amz-grant-write-acp" type:"string" json:"-" xml:"-"`
	Key                     *string             `location:"uri" locationName:"Key" type:"string" json:"-" xml:"-"`
	Metadata                *map[string]*string `location:"headers" locationName:"x-amz-meta-" type:"map" json:"-" xml:"-"`
	SSECustomerAlgorithm    *string             `location:"header" locationName:"x-amz-server-side-encryption-customer-algorithm" type:"string" json:"-" xml:"-"`
	SSECustomerKey          *string             `location:"header" locationName:"x-amz-server-side-encryption-customer-key" type:"string" json:"-" xml:"-"`
	SSECustomerKeyMD5       *string             `location:"header" locationName:"x-amz-server-side-encryption-customer-key-MD5" type:"string" json:"-" xml:"-"`
	SSEKMSKeyID             *string             `location:"header" locationName:"x-amz-server-side-encryption-aws-kms-key-id" type:"string" json:"-" xml:"-"`
	ServerSideEncryption    *string             `location:"header" locationName:"x-amz-server-side-encryption" type:"string" json:"-" xml:"-"`
	StorageClass            *string             `location:"header" locationName:"x-amz-storage-class" type:"string" json:"-" xml:"-"`
	WebsiteRedirectLocation *string             `location:"header" locationName:"x-amz-website-redirect-location" type:"string" json:"-" xml:"-"`

	metadataCreateMultipartUploadInput `json:"-", xml:"-"`
}

type metadataCreateMultipartUploadInput struct {
	SDKShapeTraits bool `type:"structure" required:"Bucket,Key"`
}

type CreateMultipartUploadOutput struct {
	Bucket               *string `locationName:"Bucket" type:"string"`
	Key                  *string `type:"string"`
	SSECustomerAlgorithm *string `location:"header" locationName:"x-amz-server-side-encryption-customer-algorithm" type:"string" json:"-" xml:"-"`
	SSECustomerKeyMD5    *string `location:"header" locationName:"x-amz-server-side-encryption-customer-key-MD5" type:"string" json:"-" xml:"-"`
	SSEKMSKeyID          *string `location:"header" locationName:"x-amz-server-side-encryption-aws-kms-key-id" type:"string" json:"-" xml:"-"`
	ServerSideEncryption *string `location:"header" locationName:"x-amz-server-side-encryption" type:"string" json:"-" xml:"-"`
	UploadID             *string `locationName:"UploadId" type:"string"`

	metadataCreateMultipartUploadOutput `json:"-", xml:"-"`
}

type metadataCreateMultipartUploadOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type Delete struct {
	Objects []*ObjectIdentifier `locationName:"Object" type:"list" flattened:"true"`
	Quiet   *bool               `type:"boolean"`

	metadataDelete `json:"-", xml:"-"`
}

type metadataDelete struct {
	SDKShapeTraits bool `type:"structure" required:"Objects"`
}

type DeleteBucketCORSInput struct {
	Bucket *string `location:"uri" locationName:"Bucket" type:"string" json:"-" xml:"-"`

	metadataDeleteBucketCORSInput `json:"-", xml:"-"`
}

type metadataDeleteBucketCORSInput struct {
	SDKShapeTraits bool `type:"structure" required:"Bucket"`
}

type DeleteBucketInput struct {
	Bucket *string `location:"uri" locationName:"Bucket" type:"string" json:"-" xml:"-"`

	metadataDeleteBucketInput `json:"-", xml:"-"`
}

type metadataDeleteBucketInput struct {
	SDKShapeTraits bool `type:"structure" required:"Bucket"`
}

type DeleteBucketLifecycleInput struct {
	Bucket *string `location:"uri" locationName:"Bucket" type:"string" json:"-" xml:"-"`

	metadataDeleteBucketLifecycleInput `json:"-", xml:"-"`
}

type metadataDeleteBucketLifecycleInput struct {
	SDKShapeTraits bool `type:"structure" required:"Bucket"`
}

type DeleteBucketPolicyInput struct {
	Bucket *string `location:"uri" locationName:"Bucket" type:"string" json:"-" xml:"-"`

	metadataDeleteBucketPolicyInput `json:"-", xml:"-"`
}

type metadataDeleteBucketPolicyInput struct {
	SDKShapeTraits bool `type:"structure" required:"Bucket"`
}

type DeleteBucketTaggingInput struct {
	Bucket *string `location:"uri" locationName:"Bucket" type:"string" json:"-" xml:"-"`

	metadataDeleteBucketTaggingInput `json:"-", xml:"-"`
}

type metadataDeleteBucketTaggingInput struct {
	SDKShapeTraits bool `type:"structure" required:"Bucket"`
}

type DeleteBucketWebsiteInput struct {
	Bucket *string `location:"uri" locationName:"Bucket" type:"string" json:"-" xml:"-"`

	metadataDeleteBucketWebsiteInput `json:"-", xml:"-"`
}

type metadataDeleteBucketWebsiteInput struct {
	SDKShapeTraits bool `type:"structure" required:"Bucket"`
}

type DeleteMarkerEntry struct {
	IsLatest     *bool      `type:"boolean"`
	Key          *string    `type:"string"`
	LastModified *time.Time `type:"timestamp" timestampFormat:"iso8601"`
	Owner        *Owner     `type:"structure"`
	VersionID    *string    `locationName:"VersionId" type:"string"`

	metadataDeleteMarkerEntry `json:"-", xml:"-"`
}

type metadataDeleteMarkerEntry struct {
	SDKShapeTraits bool `type:"structure"`
}

type DeleteObjectInput struct {
	Bucket    *string `location:"uri" locationName:"Bucket" type:"string" json:"-" xml:"-"`
	Key       *string `location:"uri" locationName:"Key" type:"string" json:"-" xml:"-"`
	MFA       *string `location:"header" locationName:"x-amz-mfa" type:"string" json:"-" xml:"-"`
	VersionID *string `location:"querystring" locationName:"versionId" type:"string" json:"-" xml:"-"`

	metadataDeleteObjectInput `json:"-", xml:"-"`
}

type metadataDeleteObjectInput struct {
	SDKShapeTraits bool `type:"structure" required:"Bucket,Key"`
}

type DeleteObjectOutput struct {
	DeleteMarker *bool   `location:"header" locationName:"x-amz-delete-marker" type:"boolean" json:"-" xml:"-"`
	VersionID    *string `location:"header" locationName:"x-amz-version-id" type:"string" json:"-" xml:"-"`

	metadataDeleteObjectOutput `json:"-", xml:"-"`
}

type metadataDeleteObjectOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DeleteObjectsInput struct {
	Bucket *string `location:"uri" locationName:"Bucket" type:"string" json:"-" xml:"-"`
	Delete *Delete `locationName:"Delete" type:"structure"`
	MFA    *string `location:"header" locationName:"x-amz-mfa" type:"string" json:"-" xml:"-"`

	metadataDeleteObjectsInput `json:"-", xml:"-"`
}

type metadataDeleteObjectsInput struct {
	SDKShapeTraits bool `type:"structure" payload:"Delete" required:"Bucket,Delete"`
}

type DeleteObjectsOutput struct {
	Deleted []*DeletedObject `type:"list" flattened:"true"`
	Errors  []*Error         `locationName:"Error" type:"list" flattened:"true"`

	metadataDeleteObjectsOutput `json:"-", xml:"-"`
}

type metadataDeleteObjectsOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DeletedObject struct {
	DeleteMarker          *bool   `type:"boolean"`
	DeleteMarkerVersionID *string `locationName:"DeleteMarkerVersionId" type:"string"`
	Key                   *string `type:"string"`
	VersionID             *string `locationName:"VersionId" type:"string"`

	metadataDeletedObject `json:"-", xml:"-"`
}

type metadataDeletedObject struct {
	SDKShapeTraits bool `type:"structure"`
}

type Error struct {
	Code      *string `type:"string"`
	Key       *string `type:"string"`
	Message   *string `type:"string"`
	VersionID *string `locationName:"VersionId" type:"string"`

	metadataError `json:"-", xml:"-"`
}

type metadataError struct {
	SDKShapeTraits bool `type:"structure"`
}

type ErrorDocument struct {
	Key *string `type:"string"`

	metadataErrorDocument `json:"-", xml:"-"`
}

type metadataErrorDocument struct {
	SDKShapeTraits bool `type:"structure" required:"Key"`
}

type GetBucketACLInput struct {
	Bucket *string `location:"uri" locationName:"Bucket" type:"string" json:"-" xml:"-"`

	metadataGetBucketACLInput `json:"-", xml:"-"`
}

type metadataGetBucketACLInput struct {
	SDKShapeTraits bool `type:"structure" required:"Bucket"`
}

type GetBucketACLOutput struct {
	Grants []*Grant `locationName:"AccessControlList" locationNameList:"Grant" type:"list"`
	Owner  *Owner   `type:"structure"`

	metadataGetBucketACLOutput `json:"-", xml:"-"`
}

type metadataGetBucketACLOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type GetBucketCORSInput struct {
	Bucket *string `location:"uri" locationName:"Bucket" type:"string" json:"-" xml:"-"`

	metadataGetBucketCORSInput `json:"-", xml:"-"`
}

type metadataGetBucketCORSInput struct {
	SDKShapeTraits bool `type:"structure" required:"Bucket"`
}

type GetBucketCORSOutput struct {
	CORSRules []*CORSRule `locationName:"CORSRule" type:"list" flattened:"true"`

	metadataGetBucketCORSOutput `json:"-", xml:"-"`
}

type metadataGetBucketCORSOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type GetBucketInputPaymentInput struct {
	Bucket *string `location:"uri" locationName:"Bucket" type:"string" json:"-" xml:"-"`

	metadataGetBucketInputPaymentInput `json:"-", xml:"-"`
}

type metadataGetBucketInputPaymentInput struct {
	SDKShapeTraits bool `type:"structure" required:"Bucket"`
}

type GetBucketLifecycleInput struct {
	Bucket *string `location:"uri" locationName:"Bucket" type:"string" json:"-" xml:"-"`

	metadataGetBucketLifecycleInput `json:"-", xml:"-"`
}

type metadataGetBucketLifecycleInput struct {
	SDKShapeTraits bool `type:"structure" required:"Bucket"`
}

type GetBucketLifecycleOutput struct {
	Rules []*Rule `locationName:"Rule" type:"list" flattened:"true"`

	metadataGetBucketLifecycleOutput `json:"-", xml:"-"`
}

type metadataGetBucketLifecycleOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type GetBucketLocationInput struct {
	Bucket *string `location:"uri" locationName:"Bucket" type:"string" json:"-" xml:"-"`

	metadataGetBucketLocationInput `json:"-", xml:"-"`
}

type metadataGetBucketLocationInput struct {
	SDKShapeTraits bool `type:"structure" required:"Bucket"`
}

type GetBucketLocationOutput struct {
	LocationConstraint *string `type:"string"`

	metadataGetBucketLocationOutput `json:"-", xml:"-"`
}

type metadataGetBucketLocationOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type GetBucketLoggingInput struct {
	Bucket *string `location:"uri" locationName:"Bucket" type:"string" json:"-" xml:"-"`

	metadataGetBucketLoggingInput `json:"-", xml:"-"`
}

type metadataGetBucketLoggingInput struct {
	SDKShapeTraits bool `type:"structure" required:"Bucket"`
}

type GetBucketLoggingOutput struct {
	LoggingEnabled *LoggingEnabled `type:"structure"`

	metadataGetBucketLoggingOutput `json:"-", xml:"-"`
}

type metadataGetBucketLoggingOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type GetBucketNotificationInput struct {
	Bucket *string `location:"uri" locationName:"Bucket" type:"string" json:"-" xml:"-"`

	metadataGetBucketNotificationInput `json:"-", xml:"-"`
}

type metadataGetBucketNotificationInput struct {
	SDKShapeTraits bool `type:"structure" required:"Bucket"`
}

type GetBucketNotificationOutput struct {
	CloudFunctionConfiguration *CloudFunctionConfiguration `type:"structure"`
	QueueConfiguration         *QueueConfiguration         `type:"structure"`
	TopicConfiguration         *TopicConfiguration         `type:"structure"`

	metadataGetBucketNotificationOutput `json:"-", xml:"-"`
}

type metadataGetBucketNotificationOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type GetBucketPolicyInput struct {
	Bucket *string `location:"uri" locationName:"Bucket" type:"string" json:"-" xml:"-"`

	metadataGetBucketPolicyInput `json:"-", xml:"-"`
}

type metadataGetBucketPolicyInput struct {
	SDKShapeTraits bool `type:"structure" required:"Bucket"`
}

type GetBucketPolicyOutput struct {
	Policy *string `type:"string"`

	metadataGetBucketPolicyOutput `json:"-", xml:"-"`
}

type metadataGetBucketPolicyOutput struct {
	SDKShapeTraits bool `type:"structure" payload:"Policy"`
}

type GetBucketRequestPaymentOutput struct {
	Payer *string `type:"string"`

	metadataGetBucketRequestPaymentOutput `json:"-", xml:"-"`
}

type metadataGetBucketRequestPaymentOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type GetBucketTaggingInput struct {
	Bucket *string `location:"uri" locationName:"Bucket" type:"string" json:"-" xml:"-"`

	metadataGetBucketTaggingInput `json:"-", xml:"-"`
}

type metadataGetBucketTaggingInput struct {
	SDKShapeTraits bool `type:"structure" required:"Bucket"`
}

type GetBucketTaggingOutput struct {
	TagSet []*Tag `locationNameList:"Tag" type:"list"`

	metadataGetBucketTaggingOutput `json:"-", xml:"-"`
}

type metadataGetBucketTaggingOutput struct {
	SDKShapeTraits bool `type:"structure" required:"TagSet"`
}

type GetBucketVersioningInput struct {
	Bucket *string `location:"uri" locationName:"Bucket" type:"string" json:"-" xml:"-"`

	metadataGetBucketVersioningInput `json:"-", xml:"-"`
}

type metadataGetBucketVersioningInput struct {
	SDKShapeTraits bool `type:"structure" required:"Bucket"`
}

type GetBucketVersioningOutput struct {
	MFADelete *string `locationName:"MfaDelete" type:"string"`
	Status    *string `type:"string"`

	metadataGetBucketVersioningOutput `json:"-", xml:"-"`
}

type metadataGetBucketVersioningOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type GetBucketWebsiteInput struct {
	Bucket *string `location:"uri" locationName:"Bucket" type:"string" json:"-" xml:"-"`

	metadataGetBucketWebsiteInput `json:"-", xml:"-"`
}

type metadataGetBucketWebsiteInput struct {
	SDKShapeTraits bool `type:"structure" required:"Bucket"`
}

type GetBucketWebsiteOutput struct {
	ErrorDocument         *ErrorDocument         `type:"structure"`
	IndexDocument         *IndexDocument         `type:"structure"`
	RedirectAllRequestsTo *RedirectAllRequestsTo `type:"structure"`
	RoutingRules          []*RoutingRule         `locationNameList:"RoutingRule" type:"list"`

	metadataGetBucketWebsiteOutput `json:"-", xml:"-"`
}

type metadataGetBucketWebsiteOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type GetObjectACLInput struct {
	Bucket    *string `location:"uri" locationName:"Bucket" type:"string" json:"-" xml:"-"`
	Key       *string `location:"uri" locationName:"Key" type:"string" json:"-" xml:"-"`
	VersionID *string `location:"querystring" locationName:"versionId" type:"string" json:"-" xml:"-"`

	metadataGetObjectACLInput `json:"-", xml:"-"`
}

type metadataGetObjectACLInput struct {
	SDKShapeTraits bool `type:"structure" required:"Bucket,Key"`
}

type GetObjectACLOutput struct {
	Grants []*Grant `locationName:"AccessControlList" locationNameList:"Grant" type:"list"`
	Owner  *Owner   `type:"structure"`

	metadataGetObjectACLOutput `json:"-", xml:"-"`
}

type metadataGetObjectACLOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type GetObjectInput struct {
	Bucket                     *string    `location:"uri" locationName:"Bucket" type:"string" json:"-" xml:"-"`
	IfMatch                    *string    `location:"header" locationName:"If-Match" type:"string" json:"-" xml:"-"`
	IfModifiedSince            *time.Time `location:"header" locationName:"If-Modified-Since" type:"timestamp" timestampFormat:"rfc822" json:"-" xml:"-"`
	IfNoneMatch                *string    `location:"header" locationName:"If-None-Match" type:"string" json:"-" xml:"-"`
	IfUnmodifiedSince          *time.Time `location:"header" locationName:"If-Unmodified-Since" type:"timestamp" timestampFormat:"rfc822" json:"-" xml:"-"`
	Key                        *string    `location:"uri" locationName:"Key" type:"string" json:"-" xml:"-"`
	Range                      *string    `location:"header" locationName:"Range" type:"string" json:"-" xml:"-"`
	ResponseCacheControl       *string    `location:"querystring" locationName:"response-cache-control" type:"string" json:"-" xml:"-"`
	ResponseContentDisposition *string    `location:"querystring" locationName:"response-content-disposition" type:"string" json:"-" xml:"-"`
	ResponseContentEncoding    *string    `location:"querystring" locationName:"response-content-encoding" type:"string" json:"-" xml:"-"`
	ResponseContentLanguage    *string    `location:"querystring" locationName:"response-content-language" type:"string" json:"-" xml:"-"`
	ResponseContentType        *string    `location:"querystring" locationName:"response-content-type" type:"string" json:"-" xml:"-"`
	ResponseExpires            *time.Time `location:"querystring" locationName:"response-expires" type:"timestamp" timestampFormat:"iso8601" json:"-" xml:"-"`
	SSECustomerAlgorithm       *string    `location:"header" locationName:"x-amz-server-side-encryption-customer-algorithm" type:"string" json:"-" xml:"-"`
	SSECustomerKey             *string    `location:"header" locationName:"x-amz-server-side-encryption-customer-key" type:"string" json:"-" xml:"-"`
	SSECustomerKeyMD5          *string    `location:"header" locationName:"x-amz-server-side-encryption-customer-key-MD5" type:"string" json:"-" xml:"-"`
	VersionID                  *string    `location:"querystring" locationName:"versionId" type:"string" json:"-" xml:"-"`

	metadataGetObjectInput `json:"-", xml:"-"`
}

type metadataGetObjectInput struct {
	SDKShapeTraits bool `type:"structure" required:"Bucket,Key"`
}

type GetObjectOutput struct {
	AcceptRanges            *string             `location:"header" locationName:"accept-ranges" type:"string" json:"-" xml:"-"`
	Body                    []byte              `type:"blob"`
	CacheControl            *string             `location:"header" locationName:"Cache-Control" type:"string" json:"-" xml:"-"`
	ContentDisposition      *string             `location:"header" locationName:"Content-Disposition" type:"string" json:"-" xml:"-"`
	ContentEncoding         *string             `location:"header" locationName:"Content-Encoding" type:"string" json:"-" xml:"-"`
	ContentLanguage         *string             `location:"header" locationName:"Content-Language" type:"string" json:"-" xml:"-"`
	ContentLength           *int                `location:"header" locationName:"Content-Length" type:"integer" json:"-" xml:"-"`
	ContentType             *string             `location:"header" locationName:"Content-Type" type:"string" json:"-" xml:"-"`
	DeleteMarker            *bool               `location:"header" locationName:"x-amz-delete-marker" type:"boolean" json:"-" xml:"-"`
	ETag                    *string             `location:"header" locationName:"ETag" type:"string" json:"-" xml:"-"`
	Expiration              *time.Time          `location:"header" locationName:"x-amz-expiration" type:"timestamp" timestampFormat:"rfc822" json:"-" xml:"-"`
	Expires                 *time.Time          `location:"header" locationName:"Expires" type:"timestamp" timestampFormat:"rfc822" json:"-" xml:"-"`
	LastModified            *time.Time          `location:"header" locationName:"Last-Modified" type:"timestamp" timestampFormat:"rfc822" json:"-" xml:"-"`
	Metadata                *map[string]*string `location:"headers" locationName:"x-amz-meta-" type:"map" json:"-" xml:"-"`
	MissingMeta             *int                `location:"header" locationName:"x-amz-missing-meta" type:"integer" json:"-" xml:"-"`
	Restore                 *string             `location:"header" locationName:"x-amz-restore" type:"string" json:"-" xml:"-"`
	SSECustomerAlgorithm    *string             `location:"header" locationName:"x-amz-server-side-encryption-customer-algorithm" type:"string" json:"-" xml:"-"`
	SSECustomerKeyMD5       *string             `location:"header" locationName:"x-amz-server-side-encryption-customer-key-MD5" type:"string" json:"-" xml:"-"`
	SSEKMSKeyID             *string             `location:"header" locationName:"x-amz-server-side-encryption-aws-kms-key-id" type:"string" json:"-" xml:"-"`
	ServerSideEncryption    *string             `location:"header" locationName:"x-amz-server-side-encryption" type:"string" json:"-" xml:"-"`
	VersionID               *string             `location:"header" locationName:"x-amz-version-id" type:"string" json:"-" xml:"-"`
	WebsiteRedirectLocation *string             `location:"header" locationName:"x-amz-website-redirect-location" type:"string" json:"-" xml:"-"`

	metadataGetObjectOutput `json:"-", xml:"-"`
}

type metadataGetObjectOutput struct {
	SDKShapeTraits bool `type:"structure" payload:"Body"`
}

type GetObjectTorrentInput struct {
	Bucket *string `location:"uri" locationName:"Bucket" type:"string" json:"-" xml:"-"`
	Key    *string `location:"uri" locationName:"Key" type:"string" json:"-" xml:"-"`

	metadataGetObjectTorrentInput `json:"-", xml:"-"`
}

type metadataGetObjectTorrentInput struct {
	SDKShapeTraits bool `type:"structure" required:"Bucket,Key"`
}

type GetObjectTorrentOutput struct {
	Body []byte `type:"blob"`

	metadataGetObjectTorrentOutput `json:"-", xml:"-"`
}

type metadataGetObjectTorrentOutput struct {
	SDKShapeTraits bool `type:"structure" payload:"Body"`
}

type Grant struct {
	Grantee    *Grantee `type:"structure"`
	Permission *string  `type:"string"`

	metadataGrant `json:"-", xml:"-"`
}

type metadataGrant struct {
	SDKShapeTraits bool `type:"structure"`
}

type Grantee struct {
	DisplayName  *string `type:"string"`
	EmailAddress *string `type:"string"`
	ID           *string `type:"string"`
	Type         *string `locationName:"xsi:type" type:"string"`
	URI          *string `type:"string"`

	metadataGrantee `json:"-", xml:"-"`
}

type metadataGrantee struct {
	SDKShapeTraits bool `type:"structure" required:"Type" xmlPrefix:"xsi" xmlURI:"http://www.w3.org/2001/XMLSchema-instance"`
}

type HeadBucketInput struct {
	Bucket *string `location:"uri" locationName:"Bucket" type:"string" json:"-" xml:"-"`

	metadataHeadBucketInput `json:"-", xml:"-"`
}

type metadataHeadBucketInput struct {
	SDKShapeTraits bool `type:"structure" required:"Bucket"`
}

type HeadObjectInput struct {
	Bucket               *string    `location:"uri" locationName:"Bucket" type:"string" json:"-" xml:"-"`
	IfMatch              *string    `location:"header" locationName:"If-Match" type:"string" json:"-" xml:"-"`
	IfModifiedSince      *time.Time `location:"header" locationName:"If-Modified-Since" type:"timestamp" timestampFormat:"rfc822" json:"-" xml:"-"`
	IfNoneMatch          *string    `location:"header" locationName:"If-None-Match" type:"string" json:"-" xml:"-"`
	IfUnmodifiedSince    *time.Time `location:"header" locationName:"If-Unmodified-Since" type:"timestamp" timestampFormat:"rfc822" json:"-" xml:"-"`
	Key                  *string    `location:"uri" locationName:"Key" type:"string" json:"-" xml:"-"`
	Range                *string    `location:"header" locationName:"Range" type:"string" json:"-" xml:"-"`
	SSECustomerAlgorithm *string    `location:"header" locationName:"x-amz-server-side-encryption-customer-algorithm" type:"string" json:"-" xml:"-"`
	SSECustomerKey       *string    `location:"header" locationName:"x-amz-server-side-encryption-customer-key" type:"string" json:"-" xml:"-"`
	SSECustomerKeyMD5    *string    `location:"header" locationName:"x-amz-server-side-encryption-customer-key-MD5" type:"string" json:"-" xml:"-"`
	VersionID            *string    `location:"querystring" locationName:"versionId" type:"string" json:"-" xml:"-"`

	metadataHeadObjectInput `json:"-", xml:"-"`
}

type metadataHeadObjectInput struct {
	SDKShapeTraits bool `type:"structure" required:"Bucket,Key"`
}

type HeadObjectOutput struct {
	AcceptRanges            *string             `location:"header" locationName:"accept-ranges" type:"string" json:"-" xml:"-"`
	CacheControl            *string             `location:"header" locationName:"Cache-Control" type:"string" json:"-" xml:"-"`
	ContentDisposition      *string             `location:"header" locationName:"Content-Disposition" type:"string" json:"-" xml:"-"`
	ContentEncoding         *string             `location:"header" locationName:"Content-Encoding" type:"string" json:"-" xml:"-"`
	ContentLanguage         *string             `location:"header" locationName:"Content-Language" type:"string" json:"-" xml:"-"`
	ContentLength           *int                `location:"header" locationName:"Content-Length" type:"integer" json:"-" xml:"-"`
	ContentType             *string             `location:"header" locationName:"Content-Type" type:"string" json:"-" xml:"-"`
	DeleteMarker            *bool               `location:"header" locationName:"x-amz-delete-marker" type:"boolean" json:"-" xml:"-"`
	ETag                    *string             `location:"header" locationName:"ETag" type:"string" json:"-" xml:"-"`
	Expiration              *time.Time          `location:"header" locationName:"x-amz-expiration" type:"timestamp" timestampFormat:"rfc822" json:"-" xml:"-"`
	Expires                 *time.Time          `location:"header" locationName:"Expires" type:"timestamp" timestampFormat:"rfc822" json:"-" xml:"-"`
	LastModified            *time.Time          `location:"header" locationName:"Last-Modified" type:"timestamp" timestampFormat:"rfc822" json:"-" xml:"-"`
	Metadata                *map[string]*string `location:"headers" locationName:"x-amz-meta-" type:"map" json:"-" xml:"-"`
	MissingMeta             *int                `location:"header" locationName:"x-amz-missing-meta" type:"integer" json:"-" xml:"-"`
	Restore                 *string             `location:"header" locationName:"x-amz-restore" type:"string" json:"-" xml:"-"`
	SSECustomerAlgorithm    *string             `location:"header" locationName:"x-amz-server-side-encryption-customer-algorithm" type:"string" json:"-" xml:"-"`
	SSECustomerKeyMD5       *string             `location:"header" locationName:"x-amz-server-side-encryption-customer-key-MD5" type:"string" json:"-" xml:"-"`
	SSEKMSKeyID             *string             `location:"header" locationName:"x-amz-server-side-encryption-aws-kms-key-id" type:"string" json:"-" xml:"-"`
	ServerSideEncryption    *string             `location:"header" locationName:"x-amz-server-side-encryption" type:"string" json:"-" xml:"-"`
	VersionID               *string             `location:"header" locationName:"x-amz-version-id" type:"string" json:"-" xml:"-"`
	WebsiteRedirectLocation *string             `location:"header" locationName:"x-amz-website-redirect-location" type:"string" json:"-" xml:"-"`

	metadataHeadObjectOutput `json:"-", xml:"-"`
}

type metadataHeadObjectOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type IndexDocument struct {
	Suffix *string `type:"string"`

	metadataIndexDocument `json:"-", xml:"-"`
}

type metadataIndexDocument struct {
	SDKShapeTraits bool `type:"structure" required:"Suffix"`
}

type Initiator struct {
	DisplayName *string `type:"string"`
	ID          *string `type:"string"`

	metadataInitiator `json:"-", xml:"-"`
}

type metadataInitiator struct {
	SDKShapeTraits bool `type:"structure"`
}

type LifecycleConfiguration struct {
	Rules []*Rule `locationName:"Rule" type:"list" flattened:"true"`

	metadataLifecycleConfiguration `json:"-", xml:"-"`
}

type metadataLifecycleConfiguration struct {
	SDKShapeTraits bool `type:"structure" required:"Rules"`
}

type LifecycleExpiration struct {
	Date *time.Time `type:"timestamp" timestampFormat:"iso8601"`
	Days *int       `type:"integer"`

	metadataLifecycleExpiration `json:"-", xml:"-"`
}

type metadataLifecycleExpiration struct {
	SDKShapeTraits bool `type:"structure"`
}

type ListBucketsOutput struct {
	Buckets []*Bucket `locationNameList:"Bucket" type:"list"`
	Owner   *Owner    `type:"structure"`

	metadataListBucketsOutput `json:"-", xml:"-"`
}

type metadataListBucketsOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type ListMultipartUploadsInput struct {
	Bucket         *string `location:"uri" locationName:"Bucket" type:"string" json:"-" xml:"-"`
	Delimiter      *string `location:"querystring" locationName:"delimiter" type:"string" json:"-" xml:"-"`
	EncodingType   *string `location:"querystring" locationName:"encoding-type" type:"string" json:"-" xml:"-"`
	KeyMarker      *string `location:"querystring" locationName:"key-marker" type:"string" json:"-" xml:"-"`
	MaxUploads     *int    `location:"querystring" locationName:"max-uploads" type:"integer" json:"-" xml:"-"`
	Prefix         *string `location:"querystring" locationName:"prefix" type:"string" json:"-" xml:"-"`
	UploadIDMarker *string `location:"querystring" locationName:"upload-id-marker" type:"string" json:"-" xml:"-"`

	metadataListMultipartUploadsInput `json:"-", xml:"-"`
}

type metadataListMultipartUploadsInput struct {
	SDKShapeTraits bool `type:"structure" required:"Bucket"`
}

type ListMultipartUploadsOutput struct {
	Bucket             *string            `type:"string"`
	CommonPrefixes     []*CommonPrefix    `type:"list" flattened:"true"`
	Delimiter          *string            `type:"string"`
	EncodingType       *string            `type:"string"`
	IsTruncated        *bool              `type:"boolean"`
	KeyMarker          *string            `type:"string"`
	MaxUploads         *int               `type:"integer"`
	NextKeyMarker      *string            `type:"string"`
	NextUploadIDMarker *string            `locationName:"NextUploadIdMarker" type:"string"`
	Prefix             *string            `type:"string"`
	UploadIDMarker     *string            `locationName:"UploadIdMarker" type:"string"`
	Uploads            []*MultipartUpload `locationName:"Upload" type:"list" flattened:"true"`

	metadataListMultipartUploadsOutput `json:"-", xml:"-"`
}

type metadataListMultipartUploadsOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type ListObjectVersionsInput struct {
	Bucket          *string `location:"uri" locationName:"Bucket" type:"string" json:"-" xml:"-"`
	Delimiter       *string `location:"querystring" locationName:"delimiter" type:"string" json:"-" xml:"-"`
	EncodingType    *string `location:"querystring" locationName:"encoding-type" type:"string" json:"-" xml:"-"`
	KeyMarker       *string `location:"querystring" locationName:"key-marker" type:"string" json:"-" xml:"-"`
	MaxKeys         *int    `location:"querystring" locationName:"max-keys" type:"integer" json:"-" xml:"-"`
	Prefix          *string `location:"querystring" locationName:"prefix" type:"string" json:"-" xml:"-"`
	VersionIDMarker *string `location:"querystring" locationName:"version-id-marker" type:"string" json:"-" xml:"-"`

	metadataListObjectVersionsInput `json:"-", xml:"-"`
}

type metadataListObjectVersionsInput struct {
	SDKShapeTraits bool `type:"structure" required:"Bucket"`
}

type ListObjectVersionsOutput struct {
	CommonPrefixes      []*CommonPrefix      `type:"list" flattened:"true"`
	DeleteMarkers       []*DeleteMarkerEntry `locationName:"DeleteMarker" type:"list" flattened:"true"`
	Delimiter           *string              `type:"string"`
	EncodingType        *string              `type:"string"`
	IsTruncated         *bool                `type:"boolean"`
	KeyMarker           *string              `type:"string"`
	MaxKeys             *int                 `type:"integer"`
	Name                *string              `type:"string"`
	NextKeyMarker       *string              `type:"string"`
	NextVersionIDMarker *string              `locationName:"NextVersionIdMarker" type:"string"`
	Prefix              *string              `type:"string"`
	VersionIDMarker     *string              `locationName:"VersionIdMarker" type:"string"`
	Versions            []*ObjectVersion     `locationName:"Version" type:"list" flattened:"true"`

	metadataListObjectVersionsOutput `json:"-", xml:"-"`
}

type metadataListObjectVersionsOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type ListObjectsInput struct {
	Bucket       *string `location:"uri" locationName:"Bucket" type:"string" json:"-" xml:"-"`
	Delimiter    *string `location:"querystring" locationName:"delimiter" type:"string" json:"-" xml:"-"`
	EncodingType *string `location:"querystring" locationName:"encoding-type" type:"string" json:"-" xml:"-"`
	Marker       *string `location:"querystring" locationName:"marker" type:"string" json:"-" xml:"-"`
	MaxKeys      *int    `location:"querystring" locationName:"max-keys" type:"integer" json:"-" xml:"-"`
	Prefix       *string `location:"querystring" locationName:"prefix" type:"string" json:"-" xml:"-"`

	metadataListObjectsInput `json:"-", xml:"-"`
}

type metadataListObjectsInput struct {
	SDKShapeTraits bool `type:"structure" required:"Bucket"`
}

type ListObjectsOutput struct {
	CommonPrefixes []*CommonPrefix `type:"list" flattened:"true"`
	Contents       []*Object       `type:"list" flattened:"true"`
	Delimiter      *string         `type:"string"`
	EncodingType   *string         `type:"string"`
	IsTruncated    *bool           `type:"boolean"`
	Marker         *string         `type:"string"`
	MaxKeys        *int            `type:"integer"`
	Name           *string         `type:"string"`
	NextMarker     *string         `type:"string"`
	Prefix         *string         `type:"string"`

	metadataListObjectsOutput `json:"-", xml:"-"`
}

type metadataListObjectsOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type ListPartsInput struct {
	Bucket           *string `location:"uri" locationName:"Bucket" type:"string" json:"-" xml:"-"`
	Key              *string `location:"uri" locationName:"Key" type:"string" json:"-" xml:"-"`
	MaxParts         *int    `location:"querystring" locationName:"max-parts" type:"integer" json:"-" xml:"-"`
	PartNumberMarker *int    `location:"querystring" locationName:"part-number-marker" type:"integer" json:"-" xml:"-"`
	UploadID         *string `location:"querystring" locationName:"uploadId" type:"string" json:"-" xml:"-"`

	metadataListPartsInput `json:"-", xml:"-"`
}

type metadataListPartsInput struct {
	SDKShapeTraits bool `type:"structure" required:"Bucket,Key,UploadId"`
}

type ListPartsOutput struct {
	Bucket               *string    `type:"string"`
	Initiator            *Initiator `type:"structure"`
	IsTruncated          *bool      `type:"boolean"`
	Key                  *string    `type:"string"`
	MaxParts             *int       `type:"integer"`
	NextPartNumberMarker *int       `type:"integer"`
	Owner                *Owner     `type:"structure"`
	PartNumberMarker     *int       `type:"integer"`
	Parts                []*Part    `locationName:"Part" type:"list" flattened:"true"`
	StorageClass         *string    `type:"string"`
	UploadID             *string    `locationName:"UploadId" type:"string"`

	metadataListPartsOutput `json:"-", xml:"-"`
}

type metadataListPartsOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type LoggingEnabled struct {
	TargetBucket *string        `type:"string"`
	TargetGrants []*TargetGrant `locationNameList:"Grant" type:"list"`
	TargetPrefix *string        `type:"string"`

	metadataLoggingEnabled `json:"-", xml:"-"`
}

type metadataLoggingEnabled struct {
	SDKShapeTraits bool `type:"structure"`
}

type MultipartUpload struct {
	Initiated    *time.Time `type:"timestamp" timestampFormat:"iso8601"`
	Initiator    *Initiator `type:"structure"`
	Key          *string    `type:"string"`
	Owner        *Owner     `type:"structure"`
	StorageClass *string    `type:"string"`
	UploadID     *string    `locationName:"UploadId" type:"string"`

	metadataMultipartUpload `json:"-", xml:"-"`
}

type metadataMultipartUpload struct {
	SDKShapeTraits bool `type:"structure"`
}

type NoSuchBucket struct {
	metadataNoSuchBucket `json:"-", xml:"-"`
}

type metadataNoSuchBucket struct {
	SDKShapeTraits bool `type:"structure"`
}

type NoSuchKey struct {
	metadataNoSuchKey `json:"-", xml:"-"`
}

type metadataNoSuchKey struct {
	SDKShapeTraits bool `type:"structure"`
}

type NoSuchUpload struct {
	metadataNoSuchUpload `json:"-", xml:"-"`
}

type metadataNoSuchUpload struct {
	SDKShapeTraits bool `type:"structure"`
}

type NoncurrentVersionExpiration struct {
	NoncurrentDays *int `type:"integer"`

	metadataNoncurrentVersionExpiration `json:"-", xml:"-"`
}

type metadataNoncurrentVersionExpiration struct {
	SDKShapeTraits bool `type:"structure"`
}

type NoncurrentVersionTransition struct {
	NoncurrentDays *int    `type:"integer"`
	StorageClass   *string `type:"string"`

	metadataNoncurrentVersionTransition `json:"-", xml:"-"`
}

type metadataNoncurrentVersionTransition struct {
	SDKShapeTraits bool `type:"structure"`
}

type NotificationConfiguration struct {
	CloudFunctionConfiguration *CloudFunctionConfiguration `type:"structure"`
	QueueConfiguration         *QueueConfiguration         `type:"structure"`
	TopicConfiguration         *TopicConfiguration         `type:"structure"`

	metadataNotificationConfiguration `json:"-", xml:"-"`
}

type metadataNotificationConfiguration struct {
	SDKShapeTraits bool `type:"structure"`
}

type Object struct {
	ETag         *string    `type:"string"`
	Key          *string    `type:"string"`
	LastModified *time.Time `type:"timestamp" timestampFormat:"iso8601"`
	Owner        *Owner     `type:"structure"`
	Size         *int       `type:"integer"`
	StorageClass *string    `type:"string"`

	metadataObject `json:"-", xml:"-"`
}

type metadataObject struct {
	SDKShapeTraits bool `type:"structure"`
}

type ObjectAlreadyInActiveTierError struct {
	metadataObjectAlreadyInActiveTierError `json:"-", xml:"-"`
}

type metadataObjectAlreadyInActiveTierError struct {
	SDKShapeTraits bool `type:"structure"`
}

type ObjectIdentifier struct {
	Key       *string `type:"string"`
	VersionID *string `locationName:"VersionId" type:"string"`

	metadataObjectIdentifier `json:"-", xml:"-"`
}

type metadataObjectIdentifier struct {
	SDKShapeTraits bool `type:"structure" required:"Key"`
}

type ObjectNotInActiveTierError struct {
	metadataObjectNotInActiveTierError `json:"-", xml:"-"`
}

type metadataObjectNotInActiveTierError struct {
	SDKShapeTraits bool `type:"structure"`
}

type ObjectVersion struct {
	ETag         *string    `type:"string"`
	IsLatest     *bool      `type:"boolean"`
	Key          *string    `type:"string"`
	LastModified *time.Time `type:"timestamp" timestampFormat:"iso8601"`
	Owner        *Owner     `type:"structure"`
	Size         *int       `type:"integer"`
	StorageClass *string    `type:"string"`
	VersionID    *string    `locationName:"VersionId" type:"string"`

	metadataObjectVersion `json:"-", xml:"-"`
}

type metadataObjectVersion struct {
	SDKShapeTraits bool `type:"structure"`
}

type Owner struct {
	DisplayName *string `type:"string"`
	ID          *string `type:"string"`

	metadataOwner `json:"-", xml:"-"`
}

type metadataOwner struct {
	SDKShapeTraits bool `type:"structure"`
}

type Part struct {
	ETag         *string    `type:"string"`
	LastModified *time.Time `type:"timestamp" timestampFormat:"iso8601"`
	PartNumber   *int       `type:"integer"`
	Size         *int       `type:"integer"`

	metadataPart `json:"-", xml:"-"`
}

type metadataPart struct {
	SDKShapeTraits bool `type:"structure"`
}

type PutBucketACLInput struct {
	ACL                 *string              `location:"header" locationName:"x-amz-acl" type:"string" json:"-" xml:"-"`
	AccessControlPolicy *AccessControlPolicy `locationName:"AccessControlPolicy" type:"structure"`
	Bucket              *string              `location:"uri" locationName:"Bucket" type:"string" json:"-" xml:"-"`
	ContentMD5          *string              `location:"header" locationName:"Content-MD5" type:"string" json:"-" xml:"-"`
	GrantFullControl    *string              `location:"header" locationName:"x-amz-grant-full-control" type:"string" json:"-" xml:"-"`
	GrantRead           *string              `location:"header" locationName:"x-amz-grant-read" type:"string" json:"-" xml:"-"`
	GrantReadACP        *string              `location:"header" locationName:"x-amz-grant-read-acp" type:"string" json:"-" xml:"-"`
	GrantWrite          *string              `location:"header" locationName:"x-amz-grant-write" type:"string" json:"-" xml:"-"`
	GrantWriteACP       *string              `location:"header" locationName:"x-amz-grant-write-acp" type:"string" json:"-" xml:"-"`

	metadataPutBucketACLInput `json:"-", xml:"-"`
}

type metadataPutBucketACLInput struct {
	SDKShapeTraits bool `type:"structure" payload:"AccessControlPolicy" required:"Bucket"`
}

type PutBucketCORSInput struct {
	Bucket            *string            `location:"uri" locationName:"Bucket" type:"string" json:"-" xml:"-"`
	CORSConfiguration *CORSConfiguration `locationName:"CORSConfiguration" type:"structure"`
	ContentMD5        *string            `location:"header" locationName:"Content-MD5" type:"string" json:"-" xml:"-"`

	metadataPutBucketCORSInput `json:"-", xml:"-"`
}

type metadataPutBucketCORSInput struct {
	SDKShapeTraits bool `type:"structure" payload:"CORSConfiguration" required:"Bucket"`
}

type PutBucketInputPaymentInput struct {
	Bucket                      *string                      `location:"uri" locationName:"Bucket" type:"string" json:"-" xml:"-"`
	ContentMD5                  *string                      `location:"header" locationName:"Content-MD5" type:"string" json:"-" xml:"-"`
	RequestPaymentConfiguration *RequestPaymentConfiguration `locationName:"RequestPaymentConfiguration" type:"structure"`

	metadataPutBucketInputPaymentInput `json:"-", xml:"-"`
}

type metadataPutBucketInputPaymentInput struct {
	SDKShapeTraits bool `type:"structure" payload:"RequestPaymentConfiguration" required:"Bucket,RequestPaymentConfiguration"`
}

type PutBucketLifecycleInput struct {
	Bucket                 *string                 `location:"uri" locationName:"Bucket" type:"string" json:"-" xml:"-"`
	ContentMD5             *string                 `location:"header" locationName:"Content-MD5" type:"string" json:"-" xml:"-"`
	LifecycleConfiguration *LifecycleConfiguration `locationName:"LifecycleConfiguration" type:"structure"`

	metadataPutBucketLifecycleInput `json:"-", xml:"-"`
}

type metadataPutBucketLifecycleInput struct {
	SDKShapeTraits bool `type:"structure" payload:"LifecycleConfiguration" required:"Bucket"`
}

type PutBucketLoggingInput struct {
	Bucket              *string              `location:"uri" locationName:"Bucket" type:"string" json:"-" xml:"-"`
	BucketLoggingStatus *BucketLoggingStatus `locationName:"BucketLoggingStatus" type:"structure"`
	ContentMD5          *string              `location:"header" locationName:"Content-MD5" type:"string" json:"-" xml:"-"`

	metadataPutBucketLoggingInput `json:"-", xml:"-"`
}

type metadataPutBucketLoggingInput struct {
	SDKShapeTraits bool `type:"structure" payload:"BucketLoggingStatus" required:"Bucket,BucketLoggingStatus"`
}

type PutBucketNotificationInput struct {
	Bucket                    *string                    `location:"uri" locationName:"Bucket" type:"string" json:"-" xml:"-"`
	ContentMD5                *string                    `location:"header" locationName:"Content-MD5" type:"string" json:"-" xml:"-"`
	NotificationConfiguration *NotificationConfiguration `locationName:"NotificationConfiguration" type:"structure"`

	metadataPutBucketNotificationInput `json:"-", xml:"-"`
}

type metadataPutBucketNotificationInput struct {
	SDKShapeTraits bool `type:"structure" payload:"NotificationConfiguration" required:"Bucket,NotificationConfiguration"`
}

type PutBucketPolicyInput struct {
	Bucket     *string `location:"uri" locationName:"Bucket" type:"string" json:"-" xml:"-"`
	ContentMD5 *string `location:"header" locationName:"Content-MD5" type:"string" json:"-" xml:"-"`
	Policy     *string `type:"string"`

	metadataPutBucketPolicyInput `json:"-", xml:"-"`
}

type metadataPutBucketPolicyInput struct {
	SDKShapeTraits bool `type:"structure" payload:"Policy" required:"Bucket,Policy"`
}

type PutBucketTaggingInput struct {
	Bucket     *string  `location:"uri" locationName:"Bucket" type:"string" json:"-" xml:"-"`
	ContentMD5 *string  `location:"header" locationName:"Content-MD5" type:"string" json:"-" xml:"-"`
	Tagging    *Tagging `locationName:"Tagging" type:"structure"`

	metadataPutBucketTaggingInput `json:"-", xml:"-"`
}

type metadataPutBucketTaggingInput struct {
	SDKShapeTraits bool `type:"structure" payload:"Tagging" required:"Bucket,Tagging"`
}

type PutBucketVersioningInput struct {
	Bucket                  *string                  `location:"uri" locationName:"Bucket" type:"string" json:"-" xml:"-"`
	ContentMD5              *string                  `location:"header" locationName:"Content-MD5" type:"string" json:"-" xml:"-"`
	MFA                     *string                  `location:"header" locationName:"x-amz-mfa" type:"string" json:"-" xml:"-"`
	VersioningConfiguration *VersioningConfiguration `locationName:"VersioningConfiguration" type:"structure"`

	metadataPutBucketVersioningInput `json:"-", xml:"-"`
}

type metadataPutBucketVersioningInput struct {
	SDKShapeTraits bool `type:"structure" payload:"VersioningConfiguration" required:"Bucket,VersioningConfiguration"`
}

type PutBucketWebsiteInput struct {
	Bucket               *string               `location:"uri" locationName:"Bucket" type:"string" json:"-" xml:"-"`
	ContentMD5           *string               `location:"header" locationName:"Content-MD5" type:"string" json:"-" xml:"-"`
	WebsiteConfiguration *WebsiteConfiguration `locationName:"WebsiteConfiguration" type:"structure"`

	metadataPutBucketWebsiteInput `json:"-", xml:"-"`
}

type metadataPutBucketWebsiteInput struct {
	SDKShapeTraits bool `type:"structure" payload:"WebsiteConfiguration" required:"Bucket,WebsiteConfiguration"`
}

type PutObjectACLInput struct {
	ACL                 *string              `location:"header" locationName:"x-amz-acl" type:"string" json:"-" xml:"-"`
	AccessControlPolicy *AccessControlPolicy `locationName:"AccessControlPolicy" type:"structure"`
	Bucket              *string              `location:"uri" locationName:"Bucket" type:"string" json:"-" xml:"-"`
	ContentMD5          *string              `location:"header" locationName:"Content-MD5" type:"string" json:"-" xml:"-"`
	GrantFullControl    *string              `location:"header" locationName:"x-amz-grant-full-control" type:"string" json:"-" xml:"-"`
	GrantRead           *string              `location:"header" locationName:"x-amz-grant-read" type:"string" json:"-" xml:"-"`
	GrantReadACP        *string              `location:"header" locationName:"x-amz-grant-read-acp" type:"string" json:"-" xml:"-"`
	GrantWrite          *string              `location:"header" locationName:"x-amz-grant-write" type:"string" json:"-" xml:"-"`
	GrantWriteACP       *string              `location:"header" locationName:"x-amz-grant-write-acp" type:"string" json:"-" xml:"-"`
	Key                 *string              `location:"uri" locationName:"Key" type:"string" json:"-" xml:"-"`

	metadataPutObjectACLInput `json:"-", xml:"-"`
}

type metadataPutObjectACLInput struct {
	SDKShapeTraits bool `type:"structure" payload:"AccessControlPolicy" required:"Bucket,Key"`
}

type PutObjectInput struct {
	ACL                     *string             `location:"header" locationName:"x-amz-acl" type:"string" json:"-" xml:"-"`
	Body                    []byte              `type:"blob"`
	Bucket                  *string             `location:"uri" locationName:"Bucket" type:"string" json:"-" xml:"-"`
	CacheControl            *string             `location:"header" locationName:"Cache-Control" type:"string" json:"-" xml:"-"`
	ContentDisposition      *string             `location:"header" locationName:"Content-Disposition" type:"string" json:"-" xml:"-"`
	ContentEncoding         *string             `location:"header" locationName:"Content-Encoding" type:"string" json:"-" xml:"-"`
	ContentLanguage         *string             `location:"header" locationName:"Content-Language" type:"string" json:"-" xml:"-"`
	ContentLength           *int                `location:"header" locationName:"Content-Length" type:"integer" json:"-" xml:"-"`
	ContentMD5              *string             `location:"header" locationName:"Content-MD5" type:"string" json:"-" xml:"-"`
	ContentType             *string             `location:"header" locationName:"Content-Type" type:"string" json:"-" xml:"-"`
	Expires                 *time.Time          `location:"header" locationName:"Expires" type:"timestamp" timestampFormat:"rfc822" json:"-" xml:"-"`
	GrantFullControl        *string             `location:"header" locationName:"x-amz-grant-full-control" type:"string" json:"-" xml:"-"`
	GrantRead               *string             `location:"header" locationName:"x-amz-grant-read" type:"string" json:"-" xml:"-"`
	GrantReadACP            *string             `location:"header" locationName:"x-amz-grant-read-acp" type:"string" json:"-" xml:"-"`
	GrantWriteACP           *string             `location:"header" locationName:"x-amz-grant-write-acp" type:"string" json:"-" xml:"-"`
	Key                     *string             `location:"uri" locationName:"Key" type:"string" json:"-" xml:"-"`
	Metadata                *map[string]*string `location:"headers" locationName:"x-amz-meta-" type:"map" json:"-" xml:"-"`
	SSECustomerAlgorithm    *string             `location:"header" locationName:"x-amz-server-side-encryption-customer-algorithm" type:"string" json:"-" xml:"-"`
	SSECustomerKey          *string             `location:"header" locationName:"x-amz-server-side-encryption-customer-key" type:"string" json:"-" xml:"-"`
	SSECustomerKeyMD5       *string             `location:"header" locationName:"x-amz-server-side-encryption-customer-key-MD5" type:"string" json:"-" xml:"-"`
	SSEKMSKeyID             *string             `location:"header" locationName:"x-amz-server-side-encryption-aws-kms-key-id" type:"string" json:"-" xml:"-"`
	ServerSideEncryption    *string             `location:"header" locationName:"x-amz-server-side-encryption" type:"string" json:"-" xml:"-"`
	StorageClass            *string             `location:"header" locationName:"x-amz-storage-class" type:"string" json:"-" xml:"-"`
	WebsiteRedirectLocation *string             `location:"header" locationName:"x-amz-website-redirect-location" type:"string" json:"-" xml:"-"`

	metadataPutObjectInput `json:"-", xml:"-"`
}

type metadataPutObjectInput struct {
	SDKShapeTraits bool `type:"structure" payload:"Body" required:"Bucket,Key"`
}

type PutObjectOutput struct {
	ETag                 *string    `location:"header" locationName:"ETag" type:"string" json:"-" xml:"-"`
	Expiration           *time.Time `location:"header" locationName:"x-amz-expiration" type:"timestamp" timestampFormat:"rfc822" json:"-" xml:"-"`
	SSECustomerAlgorithm *string    `location:"header" locationName:"x-amz-server-side-encryption-customer-algorithm" type:"string" json:"-" xml:"-"`
	SSECustomerKeyMD5    *string    `location:"header" locationName:"x-amz-server-side-encryption-customer-key-MD5" type:"string" json:"-" xml:"-"`
	SSEKMSKeyID          *string    `location:"header" locationName:"x-amz-server-side-encryption-aws-kms-key-id" type:"string" json:"-" xml:"-"`
	ServerSideEncryption *string    `location:"header" locationName:"x-amz-server-side-encryption" type:"string" json:"-" xml:"-"`
	VersionID            *string    `location:"header" locationName:"x-amz-version-id" type:"string" json:"-" xml:"-"`

	metadataPutObjectOutput `json:"-", xml:"-"`
}

type metadataPutObjectOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type QueueConfiguration struct {
	Event  *string   `type:"string"`
	Events []*string `locationName:"Event" type:"list" flattened:"true"`
	ID     *string   `locationName:"Id" type:"string"`
	Queue  *string   `type:"string"`

	metadataQueueConfiguration `json:"-", xml:"-"`
}

type metadataQueueConfiguration struct {
	SDKShapeTraits bool `type:"structure"`
}

type Redirect struct {
	HTTPRedirectCode     *string `locationName:"HttpRedirectCode" type:"string"`
	HostName             *string `type:"string"`
	Protocol             *string `type:"string"`
	ReplaceKeyPrefixWith *string `type:"string"`
	ReplaceKeyWith       *string `type:"string"`

	metadataRedirect `json:"-", xml:"-"`
}

type metadataRedirect struct {
	SDKShapeTraits bool `type:"structure"`
}

type RedirectAllRequestsTo struct {
	HostName *string `type:"string"`
	Protocol *string `type:"string"`

	metadataRedirectAllRequestsTo `json:"-", xml:"-"`
}

type metadataRedirectAllRequestsTo struct {
	SDKShapeTraits bool `type:"structure" required:"HostName"`
}

type RequestPaymentConfiguration struct {
	Payer *string `type:"string"`

	metadataRequestPaymentConfiguration `json:"-", xml:"-"`
}

type metadataRequestPaymentConfiguration struct {
	SDKShapeTraits bool `type:"structure" required:"Payer"`
}

type RestoreObjectInput struct {
	Bucket         *string         `location:"uri" locationName:"Bucket" type:"string" json:"-" xml:"-"`
	Key            *string         `location:"uri" locationName:"Key" type:"string" json:"-" xml:"-"`
	RestoreRequest *RestoreRequest `locationName:"RestoreRequest" type:"structure"`
	VersionID      *string         `location:"querystring" locationName:"versionId" type:"string" json:"-" xml:"-"`

	metadataRestoreObjectInput `json:"-", xml:"-"`
}

type metadataRestoreObjectInput struct {
	SDKShapeTraits bool `type:"structure" payload:"RestoreRequest" required:"Bucket,Key"`
}

type RestoreRequest struct {
	Days *int `type:"integer"`

	metadataRestoreRequest `json:"-", xml:"-"`
}

type metadataRestoreRequest struct {
	SDKShapeTraits bool `type:"structure" required:"Days"`
}

type RoutingRule struct {
	Condition *Condition `type:"structure"`
	Redirect  *Redirect  `type:"structure"`

	metadataRoutingRule `json:"-", xml:"-"`
}

type metadataRoutingRule struct {
	SDKShapeTraits bool `type:"structure" required:"Redirect"`
}

type Rule struct {
	Expiration                  *LifecycleExpiration         `type:"structure"`
	ID                          *string                      `type:"string"`
	NoncurrentVersionExpiration *NoncurrentVersionExpiration `type:"structure"`
	NoncurrentVersionTransition *NoncurrentVersionTransition `type:"structure"`
	Prefix                      *string                      `type:"string"`
	Status                      *string                      `type:"string"`
	Transition                  *Transition                  `type:"structure"`

	metadataRule `json:"-", xml:"-"`
}

type metadataRule struct {
	SDKShapeTraits bool `type:"structure" required:"Prefix,Status"`
}

type Tag struct {
	Key   *string `type:"string"`
	Value *string `type:"string"`

	metadataTag `json:"-", xml:"-"`
}

type metadataTag struct {
	SDKShapeTraits bool `type:"structure" required:"Key,Value"`
}

type Tagging struct {
	TagSet []*Tag `locationNameList:"Tag" type:"list"`

	metadataTagging `json:"-", xml:"-"`
}

type metadataTagging struct {
	SDKShapeTraits bool `type:"structure" required:"TagSet"`
}

type TargetGrant struct {
	Grantee    *Grantee `type:"structure"`
	Permission *string  `type:"string"`

	metadataTargetGrant `json:"-", xml:"-"`
}

type metadataTargetGrant struct {
	SDKShapeTraits bool `type:"structure"`
}

type TopicConfiguration struct {
	Event  *string   `type:"string"`
	Events []*string `locationName:"Event" type:"list" flattened:"true"`
	ID     *string   `locationName:"Id" type:"string"`
	Topic  *string   `type:"string"`

	metadataTopicConfiguration `json:"-", xml:"-"`
}

type metadataTopicConfiguration struct {
	SDKShapeTraits bool `type:"structure"`
}

type Transition struct {
	Date         *time.Time `type:"timestamp" timestampFormat:"iso8601"`
	Days         *int       `type:"integer"`
	StorageClass *string    `type:"string"`

	metadataTransition `json:"-", xml:"-"`
}

type metadataTransition struct {
	SDKShapeTraits bool `type:"structure"`
}

type UploadPartCopyInput struct {
	Bucket                         *string    `location:"uri" locationName:"Bucket" type:"string" json:"-" xml:"-"`
	CopySource                     *string    `location:"header" locationName:"x-amz-copy-source" type:"string" json:"-" xml:"-"`
	CopySourceIfMatch              *string    `location:"header" locationName:"x-amz-copy-source-if-match" type:"string" json:"-" xml:"-"`
	CopySourceIfModifiedSince      *time.Time `location:"header" locationName:"x-amz-copy-source-if-modified-since" type:"timestamp" timestampFormat:"rfc822" json:"-" xml:"-"`
	CopySourceIfNoneMatch          *string    `location:"header" locationName:"x-amz-copy-source-if-none-match" type:"string" json:"-" xml:"-"`
	CopySourceIfUnmodifiedSince    *time.Time `location:"header" locationName:"x-amz-copy-source-if-unmodified-since" type:"timestamp" timestampFormat:"rfc822" json:"-" xml:"-"`
	CopySourceRange                *string    `location:"header" locationName:"x-amz-copy-source-range" type:"string" json:"-" xml:"-"`
	CopySourceSSECustomerAlgorithm *string    `location:"header" locationName:"x-amz-copy-source-server-side-encryption-customer-algorithm" type:"string" json:"-" xml:"-"`
	CopySourceSSECustomerKey       *string    `location:"header" locationName:"x-amz-copy-source-server-side-encryption-customer-key" type:"string" json:"-" xml:"-"`
	CopySourceSSECustomerKeyMD5    *string    `location:"header" locationName:"x-amz-copy-source-server-side-encryption-customer-key-MD5" type:"string" json:"-" xml:"-"`
	Key                            *string    `location:"uri" locationName:"Key" type:"string" json:"-" xml:"-"`
	PartNumber                     *int       `location:"querystring" locationName:"partNumber" type:"integer" json:"-" xml:"-"`
	SSECustomerAlgorithm           *string    `location:"header" locationName:"x-amz-server-side-encryption-customer-algorithm" type:"string" json:"-" xml:"-"`
	SSECustomerKey                 *string    `location:"header" locationName:"x-amz-server-side-encryption-customer-key" type:"string" json:"-" xml:"-"`
	SSECustomerKeyMD5              *string    `location:"header" locationName:"x-amz-server-side-encryption-customer-key-MD5" type:"string" json:"-" xml:"-"`
	UploadID                       *string    `location:"querystring" locationName:"uploadId" type:"string" json:"-" xml:"-"`

	metadataUploadPartCopyInput `json:"-", xml:"-"`
}

type metadataUploadPartCopyInput struct {
	SDKShapeTraits bool `type:"structure" required:"Bucket,CopySource,Key,PartNumber,UploadId"`
}

type UploadPartCopyOutput struct {
	CopyPartResult       *CopyPartResult `type:"structure"`
	CopySourceVersionID  *string         `location:"header" locationName:"x-amz-copy-source-version-id" type:"string" json:"-" xml:"-"`
	SSECustomerAlgorithm *string         `location:"header" locationName:"x-amz-server-side-encryption-customer-algorithm" type:"string" json:"-" xml:"-"`
	SSECustomerKeyMD5    *string         `location:"header" locationName:"x-amz-server-side-encryption-customer-key-MD5" type:"string" json:"-" xml:"-"`
	SSEKMSKeyID          *string         `location:"header" locationName:"x-amz-server-side-encryption-aws-kms-key-id" type:"string" json:"-" xml:"-"`
	ServerSideEncryption *string         `location:"header" locationName:"x-amz-server-side-encryption" type:"string" json:"-" xml:"-"`

	metadataUploadPartCopyOutput `json:"-", xml:"-"`
}

type metadataUploadPartCopyOutput struct {
	SDKShapeTraits bool `type:"structure" payload:"CopyPartResult"`
}

type UploadPartInput struct {
	Body                 []byte  `type:"blob"`
	Bucket               *string `location:"uri" locationName:"Bucket" type:"string" json:"-" xml:"-"`
	ContentLength        *int    `location:"header" locationName:"Content-Length" type:"integer" json:"-" xml:"-"`
	ContentMD5           *string `location:"header" locationName:"Content-MD5" type:"string" json:"-" xml:"-"`
	Key                  *string `location:"uri" locationName:"Key" type:"string" json:"-" xml:"-"`
	PartNumber           *int    `location:"querystring" locationName:"partNumber" type:"integer" json:"-" xml:"-"`
	SSECustomerAlgorithm *string `location:"header" locationName:"x-amz-server-side-encryption-customer-algorithm" type:"string" json:"-" xml:"-"`
	SSECustomerKey       *string `location:"header" locationName:"x-amz-server-side-encryption-customer-key" type:"string" json:"-" xml:"-"`
	SSECustomerKeyMD5    *string `location:"header" locationName:"x-amz-server-side-encryption-customer-key-MD5" type:"string" json:"-" xml:"-"`
	UploadID             *string `location:"querystring" locationName:"uploadId" type:"string" json:"-" xml:"-"`

	metadataUploadPartInput `json:"-", xml:"-"`
}

type metadataUploadPartInput struct {
	SDKShapeTraits bool `type:"structure" payload:"Body" required:"Bucket,Key,PartNumber,UploadId"`
}

type UploadPartOutput struct {
	ETag                 *string `location:"header" locationName:"ETag" type:"string" json:"-" xml:"-"`
	SSECustomerAlgorithm *string `location:"header" locationName:"x-amz-server-side-encryption-customer-algorithm" type:"string" json:"-" xml:"-"`
	SSECustomerKeyMD5    *string `location:"header" locationName:"x-amz-server-side-encryption-customer-key-MD5" type:"string" json:"-" xml:"-"`
	SSEKMSKeyID          *string `location:"header" locationName:"x-amz-server-side-encryption-aws-kms-key-id" type:"string" json:"-" xml:"-"`
	ServerSideEncryption *string `location:"header" locationName:"x-amz-server-side-encryption" type:"string" json:"-" xml:"-"`

	metadataUploadPartOutput `json:"-", xml:"-"`
}

type metadataUploadPartOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type VersioningConfiguration struct {
	MFADelete *string `locationName:"MfaDelete" type:"string"`
	Status    *string `type:"string"`

	metadataVersioningConfiguration `json:"-", xml:"-"`
}

type metadataVersioningConfiguration struct {
	SDKShapeTraits bool `type:"structure"`
}

type WebsiteConfiguration struct {
	ErrorDocument         *ErrorDocument         `type:"structure"`
	IndexDocument         *IndexDocument         `type:"structure"`
	RedirectAllRequestsTo *RedirectAllRequestsTo `type:"structure"`
	RoutingRules          []*RoutingRule         `locationNameList:"RoutingRule" type:"list"`

	metadataWebsiteConfiguration `json:"-", xml:"-"`
}

type metadataWebsiteConfiguration struct {
	SDKShapeTraits bool `type:"structure"`
}