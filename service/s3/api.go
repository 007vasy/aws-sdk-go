////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT. //
////////////////////////////////////////////////////////

// S3 <nil>
package s3

import (
	"time"

	"github.com/awslabs/aws-sdk-go/aws"
)

import (
	"encoding/xml"
	"io"
)

// AbortMultipartUploadRequest generates a request for the AbortMultipartUpload operation.
func (c *S3) AbortMultipartUploadRequest(input *AbortMultipartUploadInput) (req *aws.Request) {
	if opAbortMultipartUpload == nil {
		opAbortMultipartUpload = &aws.Operation{
			Name:       "AbortMultipartUpload",
			HTTPMethod: "DELETE",
			HTTPPath:   "/{Bucket}/{Key+}",

			OperationBindings: &aws.OperationBindings{
				InPayload: "",

				Required:    []string{"Bucket", "Key", "UploadId"},
				QueryParams: []string{},
				URIParams:   []string{"Bucket", "Key"},
				InHeaders:   []string{},
				OutHeaders:  []string{},
			},
		}
	}

	req = aws.NewRequest(c.Service, opAbortMultipartUpload, input, nil)

	return
}

// AbortMultipartUpload aborts a multipart upload. To verify that all parts
// have been removed, so you don't get charged for the part storage, you
// should call the List Parts operation and ensure the parts list is empty.
func (c *S3) AbortMultipartUpload(input *AbortMultipartUploadInput) (err error) {
	req := c.AbortMultipartUploadRequest(input)
	err = req.Send()
	return
}

// CompleteMultipartUploadRequest generates a request for the CompleteMultipartUpload operation.
func (c *S3) CompleteMultipartUploadRequest(input *CompleteMultipartUploadInput) (req *aws.Request, output *CompleteMultipartUploadOutput) {
	if opCompleteMultipartUpload == nil {
		opCompleteMultipartUpload = &aws.Operation{
			Name:       "CompleteMultipartUpload",
			HTTPMethod: "POST",
			HTTPPath:   "/{Bucket}/{Key+}",

			OperationBindings: &aws.OperationBindings{
				InPayload:   "MultipartUpload",
				OutPayload:  "",
				Required:    []string{"Bucket", "Key", "UploadId"},
				QueryParams: []string{},
				URIParams:   []string{"Bucket", "Key"},
				InHeaders:   []string{},
				OutHeaders:  []string{"Expiration", "SSEKMSKeyId", "ServerSideEncryption", "VersionId"},
			},
		}
	}

	req = aws.NewRequest(c.Service, opCompleteMultipartUpload, input, output)
	output = &CompleteMultipartUploadOutput{}
	req.Data = output
	return
}

// CompleteMultipartUpload completes a multipart upload by assembling
// previously uploaded parts.
func (c *S3) CompleteMultipartUpload(input *CompleteMultipartUploadInput) (output *CompleteMultipartUploadOutput, err error) {
	req, out := c.CompleteMultipartUploadRequest(input)
	output = out
	err = req.Send()
	return
}

// CopyObjectRequest generates a request for the CopyObject operation.
func (c *S3) CopyObjectRequest(input *CopyObjectInput) (req *aws.Request, output *CopyObjectOutput) {
	if opCopyObject == nil {
		opCopyObject = &aws.Operation{
			Name:       "CopyObject",
			HTTPMethod: "PUT",
			HTTPPath:   "/{Bucket}/{Key+}",

			OperationBindings: &aws.OperationBindings{
				InPayload:   "",
				OutPayload:  "CopyObjectResult",
				Required:    []string{"Bucket", "CopySource", "Key"},
				QueryParams: []string{},
				URIParams:   []string{"Bucket", "Key"},
				InHeaders:   []string{"ACL", "CacheControl", "ContentDisposition", "ContentEncoding", "ContentLanguage", "ContentType", "CopySource", "CopySourceIfMatch", "CopySourceIfModifiedSince", "CopySourceIfNoneMatch", "CopySourceIfUnmodifiedSince", "CopySourceSSECustomerAlgorithm", "CopySourceSSECustomerKey", "CopySourceSSECustomerKeyMD5", "Expires", "GrantFullControl", "GrantRead", "GrantReadACP", "GrantWriteACP", "MetadataDirective", "SSECustomerAlgorithm", "SSECustomerKey", "SSECustomerKeyMD5", "SSEKMSKeyId", "ServerSideEncryption", "StorageClass", "WebsiteRedirectLocation"},
				OutHeaders:  []string{"CopySourceVersionId", "Expiration", "SSECustomerAlgorithm", "SSECustomerKeyMD5", "SSEKMSKeyId", "ServerSideEncryption"},
			},
		}
	}

	req = aws.NewRequest(c.Service, opCopyObject, input, output)
	output = &CopyObjectOutput{}
	req.Data = output
	return
}

// CopyObject creates a copy of an object that is already stored in Amazon
// S3.
func (c *S3) CopyObject(input *CopyObjectInput) (output *CopyObjectOutput, err error) {
	req, out := c.CopyObjectRequest(input)
	output = out
	err = req.Send()
	return
}

// CreateBucketRequest generates a request for the CreateBucket operation.
func (c *S3) CreateBucketRequest(input *CreateBucketInput) (req *aws.Request, output *CreateBucketOutput) {
	if opCreateBucket == nil {
		opCreateBucket = &aws.Operation{
			Name:       "CreateBucket",
			HTTPMethod: "PUT",
			HTTPPath:   "/{Bucket}",

			OperationBindings: &aws.OperationBindings{
				InPayload:   "CreateBucketConfiguration",
				OutPayload:  "",
				Required:    []string{"Bucket"},
				QueryParams: []string{},
				URIParams:   []string{"Bucket"},
				InHeaders:   []string{"ACL", "GrantFullControl", "GrantRead", "GrantReadACP", "GrantWrite", "GrantWriteACP"},
				OutHeaders:  []string{"Location"},
			},
		}
	}

	req = aws.NewRequest(c.Service, opCreateBucket, input, output)
	output = &CreateBucketOutput{}
	req.Data = output
	return
}

// CreateBucket is undocumented.
func (c *S3) CreateBucket(input *CreateBucketInput) (output *CreateBucketOutput, err error) {
	req, out := c.CreateBucketRequest(input)
	output = out
	err = req.Send()
	return
}

// CreateMultipartUploadRequest generates a request for the CreateMultipartUpload operation.
func (c *S3) CreateMultipartUploadRequest(input *CreateMultipartUploadInput) (req *aws.Request, output *CreateMultipartUploadOutput) {
	if opCreateMultipartUpload == nil {
		opCreateMultipartUpload = &aws.Operation{
			Name:       "CreateMultipartUpload",
			HTTPMethod: "POST",
			HTTPPath:   "/{Bucket}/{Key+}?uploads",

			OperationBindings: &aws.OperationBindings{
				InPayload:   "",
				OutPayload:  "",
				Required:    []string{"Bucket", "Key"},
				QueryParams: []string{},
				URIParams:   []string{"Bucket", "Key"},
				InHeaders:   []string{"ACL", "CacheControl", "ContentDisposition", "ContentEncoding", "ContentLanguage", "ContentType", "Expires", "GrantFullControl", "GrantRead", "GrantReadACP", "GrantWriteACP", "SSECustomerAlgorithm", "SSECustomerKey", "SSECustomerKeyMD5", "SSEKMSKeyId", "ServerSideEncryption", "StorageClass", "WebsiteRedirectLocation"},
				OutHeaders:  []string{"SSECustomerAlgorithm", "SSECustomerKeyMD5", "SSEKMSKeyId", "ServerSideEncryption"},
			},
		}
	}

	req = aws.NewRequest(c.Service, opCreateMultipartUpload, input, output)
	output = &CreateMultipartUploadOutput{}
	req.Data = output
	return
}

// CreateMultipartUpload initiates a multipart upload and returns an upload
// Note: After you initiate multipart upload and upload one or more parts,
// you must either complete or abort multipart upload in order to stop
// getting charged for storage of the uploaded parts. Only after you either
// complete or abort multipart upload, Amazon S3 frees up the parts storage
// and stops charging you for the parts storage.
func (c *S3) CreateMultipartUpload(input *CreateMultipartUploadInput) (output *CreateMultipartUploadOutput, err error) {
	req, out := c.CreateMultipartUploadRequest(input)
	output = out
	err = req.Send()
	return
}

// DeleteBucketRequest generates a request for the DeleteBucket operation.
func (c *S3) DeleteBucketRequest(input *DeleteBucketInput) (req *aws.Request) {
	if opDeleteBucket == nil {
		opDeleteBucket = &aws.Operation{
			Name:       "DeleteBucket",
			HTTPMethod: "DELETE",
			HTTPPath:   "/{Bucket}",

			OperationBindings: &aws.OperationBindings{
				InPayload: "",

				Required:    []string{"Bucket"},
				QueryParams: []string{},
				URIParams:   []string{"Bucket"},
				InHeaders:   []string{},
				OutHeaders:  []string{},
			},
		}
	}

	req = aws.NewRequest(c.Service, opDeleteBucket, input, nil)

	return
}

// DeleteBucket deletes the bucket. All objects (including all object
// versions and Delete Markers) in the bucket must be deleted before the
// bucket itself can be deleted.
func (c *S3) DeleteBucket(input *DeleteBucketInput) (err error) {
	req := c.DeleteBucketRequest(input)
	err = req.Send()
	return
}

// DeleteBucketCORSRequest generates a request for the DeleteBucketCORS operation.
func (c *S3) DeleteBucketCORSRequest(input *DeleteBucketCORSInput) (req *aws.Request) {
	if opDeleteBucketCORS == nil {
		opDeleteBucketCORS = &aws.Operation{
			Name:       "DeleteBucketCors",
			HTTPMethod: "DELETE",
			HTTPPath:   "/{Bucket}?cors",

			OperationBindings: &aws.OperationBindings{
				InPayload: "",

				Required:    []string{"Bucket"},
				QueryParams: []string{},
				URIParams:   []string{"Bucket"},
				InHeaders:   []string{},
				OutHeaders:  []string{},
			},
		}
	}

	req = aws.NewRequest(c.Service, opDeleteBucketCORS, input, nil)

	return
}

// DeleteBucketCORS deletes the cors configuration information set for the
// bucket.
func (c *S3) DeleteBucketCORS(input *DeleteBucketCORSInput) (err error) {
	req := c.DeleteBucketCORSRequest(input)
	err = req.Send()
	return
}

// DeleteBucketLifecycleRequest generates a request for the DeleteBucketLifecycle operation.
func (c *S3) DeleteBucketLifecycleRequest(input *DeleteBucketLifecycleInput) (req *aws.Request) {
	if opDeleteBucketLifecycle == nil {
		opDeleteBucketLifecycle = &aws.Operation{
			Name:       "DeleteBucketLifecycle",
			HTTPMethod: "DELETE",
			HTTPPath:   "/{Bucket}?lifecycle",

			OperationBindings: &aws.OperationBindings{
				InPayload: "",

				Required:    []string{"Bucket"},
				QueryParams: []string{},
				URIParams:   []string{"Bucket"},
				InHeaders:   []string{},
				OutHeaders:  []string{},
			},
		}
	}

	req = aws.NewRequest(c.Service, opDeleteBucketLifecycle, input, nil)

	return
}

// DeleteBucketLifecycle deletes the lifecycle configuration from the
// bucket.
func (c *S3) DeleteBucketLifecycle(input *DeleteBucketLifecycleInput) (err error) {
	req := c.DeleteBucketLifecycleRequest(input)
	err = req.Send()
	return
}

// DeleteBucketPolicyRequest generates a request for the DeleteBucketPolicy operation.
func (c *S3) DeleteBucketPolicyRequest(input *DeleteBucketPolicyInput) (req *aws.Request) {
	if opDeleteBucketPolicy == nil {
		opDeleteBucketPolicy = &aws.Operation{
			Name:       "DeleteBucketPolicy",
			HTTPMethod: "DELETE",
			HTTPPath:   "/{Bucket}?policy",

			OperationBindings: &aws.OperationBindings{
				InPayload: "",

				Required:    []string{"Bucket"},
				QueryParams: []string{},
				URIParams:   []string{"Bucket"},
				InHeaders:   []string{},
				OutHeaders:  []string{},
			},
		}
	}

	req = aws.NewRequest(c.Service, opDeleteBucketPolicy, input, nil)

	return
}

// DeleteBucketPolicy is undocumented.
func (c *S3) DeleteBucketPolicy(input *DeleteBucketPolicyInput) (err error) {
	req := c.DeleteBucketPolicyRequest(input)
	err = req.Send()
	return
}

// DeleteBucketTaggingRequest generates a request for the DeleteBucketTagging operation.
func (c *S3) DeleteBucketTaggingRequest(input *DeleteBucketTaggingInput) (req *aws.Request) {
	if opDeleteBucketTagging == nil {
		opDeleteBucketTagging = &aws.Operation{
			Name:       "DeleteBucketTagging",
			HTTPMethod: "DELETE",
			HTTPPath:   "/{Bucket}?tagging",

			OperationBindings: &aws.OperationBindings{
				InPayload: "",

				Required:    []string{"Bucket"},
				QueryParams: []string{},
				URIParams:   []string{"Bucket"},
				InHeaders:   []string{},
				OutHeaders:  []string{},
			},
		}
	}

	req = aws.NewRequest(c.Service, opDeleteBucketTagging, input, nil)

	return
}

// DeleteBucketTagging is undocumented.
func (c *S3) DeleteBucketTagging(input *DeleteBucketTaggingInput) (err error) {
	req := c.DeleteBucketTaggingRequest(input)
	err = req.Send()
	return
}

// DeleteBucketWebsiteRequest generates a request for the DeleteBucketWebsite operation.
func (c *S3) DeleteBucketWebsiteRequest(input *DeleteBucketWebsiteInput) (req *aws.Request) {
	if opDeleteBucketWebsite == nil {
		opDeleteBucketWebsite = &aws.Operation{
			Name:       "DeleteBucketWebsite",
			HTTPMethod: "DELETE",
			HTTPPath:   "/{Bucket}?website",

			OperationBindings: &aws.OperationBindings{
				InPayload: "",

				Required:    []string{"Bucket"},
				QueryParams: []string{},
				URIParams:   []string{"Bucket"},
				InHeaders:   []string{},
				OutHeaders:  []string{},
			},
		}
	}

	req = aws.NewRequest(c.Service, opDeleteBucketWebsite, input, nil)

	return
}

// DeleteBucketWebsite this operation removes the website configuration
// from the bucket.
func (c *S3) DeleteBucketWebsite(input *DeleteBucketWebsiteInput) (err error) {
	req := c.DeleteBucketWebsiteRequest(input)
	err = req.Send()
	return
}

// DeleteObjectRequest generates a request for the DeleteObject operation.
func (c *S3) DeleteObjectRequest(input *DeleteObjectInput) (req *aws.Request, output *DeleteObjectOutput) {
	if opDeleteObject == nil {
		opDeleteObject = &aws.Operation{
			Name:       "DeleteObject",
			HTTPMethod: "DELETE",
			HTTPPath:   "/{Bucket}/{Key+}",

			OperationBindings: &aws.OperationBindings{
				InPayload:   "",
				OutPayload:  "",
				Required:    []string{"Bucket", "Key"},
				QueryParams: []string{},
				URIParams:   []string{"Bucket", "Key"},
				InHeaders:   []string{"MFA"},
				OutHeaders:  []string{"DeleteMarker", "VersionId"},
			},
		}
	}

	req = aws.NewRequest(c.Service, opDeleteObject, input, output)
	output = &DeleteObjectOutput{}
	req.Data = output
	return
}

// DeleteObject removes the null version (if there is one) of an object and
// inserts a delete marker, which becomes the latest version of the object.
// If there isn't a null version, Amazon S3 does not remove any objects.
func (c *S3) DeleteObject(input *DeleteObjectInput) (output *DeleteObjectOutput, err error) {
	req, out := c.DeleteObjectRequest(input)
	output = out
	err = req.Send()
	return
}

// DeleteObjectsRequest generates a request for the DeleteObjects operation.
func (c *S3) DeleteObjectsRequest(input *DeleteObjectsInput) (req *aws.Request, output *DeleteObjectsOutput) {
	if opDeleteObjects == nil {
		opDeleteObjects = &aws.Operation{
			Name:       "DeleteObjects",
			HTTPMethod: "POST",
			HTTPPath:   "/{Bucket}?delete",

			OperationBindings: &aws.OperationBindings{
				InPayload:   "Delete",
				OutPayload:  "",
				Required:    []string{"Bucket", "Delete"},
				QueryParams: []string{},
				URIParams:   []string{"Bucket"},
				InHeaders:   []string{"MFA"},
				OutHeaders:  []string{},
			},
		}
	}

	req = aws.NewRequest(c.Service, opDeleteObjects, input, output)
	output = &DeleteObjectsOutput{}
	req.Data = output
	return
}

// DeleteObjects this operation enables you to delete multiple objects from
// a bucket using a single request. You may specify up to 1000 keys.
func (c *S3) DeleteObjects(input *DeleteObjectsInput) (output *DeleteObjectsOutput, err error) {
	req, out := c.DeleteObjectsRequest(input)
	output = out
	err = req.Send()
	return
}

// GetBucketACLRequest generates a request for the GetBucketACL operation.
func (c *S3) GetBucketACLRequest(input *GetBucketACLInput) (req *aws.Request, output *GetBucketACLOutput) {
	if opGetBucketACL == nil {
		opGetBucketACL = &aws.Operation{
			Name:       "GetBucketAcl",
			HTTPMethod: "GET",
			HTTPPath:   "/{Bucket}?acl",

			OperationBindings: &aws.OperationBindings{
				InPayload:   "",
				OutPayload:  "",
				Required:    []string{"Bucket"},
				QueryParams: []string{},
				URIParams:   []string{"Bucket"},
				InHeaders:   []string{},
				OutHeaders:  []string{},
			},
		}
	}

	req = aws.NewRequest(c.Service, opGetBucketACL, input, output)
	output = &GetBucketACLOutput{}
	req.Data = output
	return
}

// GetBucketACL is undocumented.
func (c *S3) GetBucketACL(input *GetBucketACLInput) (output *GetBucketACLOutput, err error) {
	req, out := c.GetBucketACLRequest(input)
	output = out
	err = req.Send()
	return
}

// GetBucketCORSRequest generates a request for the GetBucketCORS operation.
func (c *S3) GetBucketCORSRequest(input *GetBucketCORSInput) (req *aws.Request, output *GetBucketCORSOutput) {
	if opGetBucketCORS == nil {
		opGetBucketCORS = &aws.Operation{
			Name:       "GetBucketCors",
			HTTPMethod: "GET",
			HTTPPath:   "/{Bucket}?cors",

			OperationBindings: &aws.OperationBindings{
				InPayload:   "",
				OutPayload:  "",
				Required:    []string{"Bucket"},
				QueryParams: []string{},
				URIParams:   []string{"Bucket"},
				InHeaders:   []string{},
				OutHeaders:  []string{},
			},
		}
	}

	req = aws.NewRequest(c.Service, opGetBucketCORS, input, output)
	output = &GetBucketCORSOutput{}
	req.Data = output
	return
}

// GetBucketCORS is undocumented.
func (c *S3) GetBucketCORS(input *GetBucketCORSInput) (output *GetBucketCORSOutput, err error) {
	req, out := c.GetBucketCORSRequest(input)
	output = out
	err = req.Send()
	return
}

// GetBucketLifecycleRequest generates a request for the GetBucketLifecycle operation.
func (c *S3) GetBucketLifecycleRequest(input *GetBucketLifecycleInput) (req *aws.Request, output *GetBucketLifecycleOutput) {
	if opGetBucketLifecycle == nil {
		opGetBucketLifecycle = &aws.Operation{
			Name:       "GetBucketLifecycle",
			HTTPMethod: "GET",
			HTTPPath:   "/{Bucket}?lifecycle",

			OperationBindings: &aws.OperationBindings{
				InPayload:   "",
				OutPayload:  "",
				Required:    []string{"Bucket"},
				QueryParams: []string{},
				URIParams:   []string{"Bucket"},
				InHeaders:   []string{},
				OutHeaders:  []string{},
			},
		}
	}

	req = aws.NewRequest(c.Service, opGetBucketLifecycle, input, output)
	output = &GetBucketLifecycleOutput{}
	req.Data = output
	return
}

// GetBucketLifecycle returns the lifecycle configuration information set
// on the bucket.
func (c *S3) GetBucketLifecycle(input *GetBucketLifecycleInput) (output *GetBucketLifecycleOutput, err error) {
	req, out := c.GetBucketLifecycleRequest(input)
	output = out
	err = req.Send()
	return
}

// GetBucketLocationRequest generates a request for the GetBucketLocation operation.
func (c *S3) GetBucketLocationRequest(input *GetBucketLocationInput) (req *aws.Request, output *GetBucketLocationOutput) {
	if opGetBucketLocation == nil {
		opGetBucketLocation = &aws.Operation{
			Name:       "GetBucketLocation",
			HTTPMethod: "GET",
			HTTPPath:   "/{Bucket}?location",

			OperationBindings: &aws.OperationBindings{
				InPayload:   "",
				OutPayload:  "",
				Required:    []string{"Bucket"},
				QueryParams: []string{},
				URIParams:   []string{"Bucket"},
				InHeaders:   []string{},
				OutHeaders:  []string{},
			},
		}
	}

	req = aws.NewRequest(c.Service, opGetBucketLocation, input, output)
	output = &GetBucketLocationOutput{}
	req.Data = output
	return
}

// GetBucketLocation is undocumented.
func (c *S3) GetBucketLocation(input *GetBucketLocationInput) (output *GetBucketLocationOutput, err error) {
	req, out := c.GetBucketLocationRequest(input)
	output = out
	err = req.Send()
	return
}

// GetBucketLoggingRequest generates a request for the GetBucketLogging operation.
func (c *S3) GetBucketLoggingRequest(input *GetBucketLoggingInput) (req *aws.Request, output *GetBucketLoggingOutput) {
	if opGetBucketLogging == nil {
		opGetBucketLogging = &aws.Operation{
			Name:       "GetBucketLogging",
			HTTPMethod: "GET",
			HTTPPath:   "/{Bucket}?logging",

			OperationBindings: &aws.OperationBindings{
				InPayload:   "",
				OutPayload:  "",
				Required:    []string{"Bucket"},
				QueryParams: []string{},
				URIParams:   []string{"Bucket"},
				InHeaders:   []string{},
				OutHeaders:  []string{},
			},
		}
	}

	req = aws.NewRequest(c.Service, opGetBucketLogging, input, output)
	output = &GetBucketLoggingOutput{}
	req.Data = output
	return
}

// GetBucketLogging returns the logging status of a bucket and the
// permissions users have to view and modify that status. To use you must
// be the bucket owner.
func (c *S3) GetBucketLogging(input *GetBucketLoggingInput) (output *GetBucketLoggingOutput, err error) {
	req, out := c.GetBucketLoggingRequest(input)
	output = out
	err = req.Send()
	return
}

// GetBucketNotificationRequest generates a request for the GetBucketNotification operation.
func (c *S3) GetBucketNotificationRequest(input *GetBucketNotificationInput) (req *aws.Request, output *GetBucketNotificationOutput) {
	if opGetBucketNotification == nil {
		opGetBucketNotification = &aws.Operation{
			Name:       "GetBucketNotification",
			HTTPMethod: "GET",
			HTTPPath:   "/{Bucket}?notification",

			OperationBindings: &aws.OperationBindings{
				InPayload:   "",
				OutPayload:  "",
				Required:    []string{"Bucket"},
				QueryParams: []string{},
				URIParams:   []string{"Bucket"},
				InHeaders:   []string{},
				OutHeaders:  []string{},
			},
		}
	}

	req = aws.NewRequest(c.Service, opGetBucketNotification, input, output)
	output = &GetBucketNotificationOutput{}
	req.Data = output
	return
}

// GetBucketNotification is undocumented.
func (c *S3) GetBucketNotification(input *GetBucketNotificationInput) (output *GetBucketNotificationOutput, err error) {
	req, out := c.GetBucketNotificationRequest(input)
	output = out
	err = req.Send()
	return
}

// GetBucketPolicyRequest generates a request for the GetBucketPolicy operation.
func (c *S3) GetBucketPolicyRequest(input *GetBucketPolicyInput) (req *aws.Request, output *GetBucketPolicyOutput) {
	if opGetBucketPolicy == nil {
		opGetBucketPolicy = &aws.Operation{
			Name:       "GetBucketPolicy",
			HTTPMethod: "GET",
			HTTPPath:   "/{Bucket}?policy",

			OperationBindings: &aws.OperationBindings{
				InPayload:   "",
				OutPayload:  "Policy",
				Required:    []string{"Bucket"},
				QueryParams: []string{},
				URIParams:   []string{"Bucket"},
				InHeaders:   []string{},
				OutHeaders:  []string{},
			},
		}
	}

	req = aws.NewRequest(c.Service, opGetBucketPolicy, input, output)
	output = &GetBucketPolicyOutput{}
	req.Data = output
	return
}

// GetBucketPolicy is undocumented.
func (c *S3) GetBucketPolicy(input *GetBucketPolicyInput) (output *GetBucketPolicyOutput, err error) {
	req, out := c.GetBucketPolicyRequest(input)
	output = out
	err = req.Send()
	return
}

// GetBucketRequestPaymentRequest generates a request for the GetBucketRequestPayment operation.
func (c *S3) GetBucketRequestPaymentRequest(input *GetBucketRequestPaymentInput) (req *aws.Request, output *GetBucketRequestPaymentOutput) {
	if opGetBucketRequestPayment == nil {
		opGetBucketRequestPayment = &aws.Operation{
			Name:       "GetBucketRequestPayment",
			HTTPMethod: "GET",
			HTTPPath:   "/{Bucket}?requestPayment",

			OperationBindings: &aws.OperationBindings{
				InPayload:   "",
				OutPayload:  "",
				Required:    []string{"Bucket"},
				QueryParams: []string{},
				URIParams:   []string{"Bucket"},
				InHeaders:   []string{},
				OutHeaders:  []string{},
			},
		}
	}

	req = aws.NewRequest(c.Service, opGetBucketRequestPayment, input, output)
	output = &GetBucketRequestPaymentOutput{}
	req.Data = output
	return
}

// GetBucketRequestPayment returns the request payment configuration of a
// bucket.
func (c *S3) GetBucketRequestPayment(input *GetBucketRequestPaymentInput) (output *GetBucketRequestPaymentOutput, err error) {
	req, out := c.GetBucketRequestPaymentRequest(input)
	output = out
	err = req.Send()
	return
}

// GetBucketTaggingRequest generates a request for the GetBucketTagging operation.
func (c *S3) GetBucketTaggingRequest(input *GetBucketTaggingInput) (req *aws.Request, output *GetBucketTaggingOutput) {
	if opGetBucketTagging == nil {
		opGetBucketTagging = &aws.Operation{
			Name:       "GetBucketTagging",
			HTTPMethod: "GET",
			HTTPPath:   "/{Bucket}?tagging",

			OperationBindings: &aws.OperationBindings{
				InPayload:   "",
				OutPayload:  "",
				Required:    []string{"Bucket"},
				QueryParams: []string{},
				URIParams:   []string{"Bucket"},
				InHeaders:   []string{},
				OutHeaders:  []string{},
			},
		}
	}

	req = aws.NewRequest(c.Service, opGetBucketTagging, input, output)
	output = &GetBucketTaggingOutput{}
	req.Data = output
	return
}

// GetBucketTagging is undocumented.
func (c *S3) GetBucketTagging(input *GetBucketTaggingInput) (output *GetBucketTaggingOutput, err error) {
	req, out := c.GetBucketTaggingRequest(input)
	output = out
	err = req.Send()
	return
}

// GetBucketVersioningRequest generates a request for the GetBucketVersioning operation.
func (c *S3) GetBucketVersioningRequest(input *GetBucketVersioningInput) (req *aws.Request, output *GetBucketVersioningOutput) {
	if opGetBucketVersioning == nil {
		opGetBucketVersioning = &aws.Operation{
			Name:       "GetBucketVersioning",
			HTTPMethod: "GET",
			HTTPPath:   "/{Bucket}?versioning",

			OperationBindings: &aws.OperationBindings{
				InPayload:   "",
				OutPayload:  "",
				Required:    []string{"Bucket"},
				QueryParams: []string{},
				URIParams:   []string{"Bucket"},
				InHeaders:   []string{},
				OutHeaders:  []string{},
			},
		}
	}

	req = aws.NewRequest(c.Service, opGetBucketVersioning, input, output)
	output = &GetBucketVersioningOutput{}
	req.Data = output
	return
}

// GetBucketVersioning is undocumented.
func (c *S3) GetBucketVersioning(input *GetBucketVersioningInput) (output *GetBucketVersioningOutput, err error) {
	req, out := c.GetBucketVersioningRequest(input)
	output = out
	err = req.Send()
	return
}

// GetBucketWebsiteRequest generates a request for the GetBucketWebsite operation.
func (c *S3) GetBucketWebsiteRequest(input *GetBucketWebsiteInput) (req *aws.Request, output *GetBucketWebsiteOutput) {
	if opGetBucketWebsite == nil {
		opGetBucketWebsite = &aws.Operation{
			Name:       "GetBucketWebsite",
			HTTPMethod: "GET",
			HTTPPath:   "/{Bucket}?website",

			OperationBindings: &aws.OperationBindings{
				InPayload:   "",
				OutPayload:  "",
				Required:    []string{"Bucket"},
				QueryParams: []string{},
				URIParams:   []string{"Bucket"},
				InHeaders:   []string{},
				OutHeaders:  []string{},
			},
		}
	}

	req = aws.NewRequest(c.Service, opGetBucketWebsite, input, output)
	output = &GetBucketWebsiteOutput{}
	req.Data = output
	return
}

// GetBucketWebsite is undocumented.
func (c *S3) GetBucketWebsite(input *GetBucketWebsiteInput) (output *GetBucketWebsiteOutput, err error) {
	req, out := c.GetBucketWebsiteRequest(input)
	output = out
	err = req.Send()
	return
}

// GetObjectRequest generates a request for the GetObject operation.
func (c *S3) GetObjectRequest(input *GetObjectInput) (req *aws.Request, output *GetObjectOutput) {
	if opGetObject == nil {
		opGetObject = &aws.Operation{
			Name:       "GetObject",
			HTTPMethod: "GET",
			HTTPPath:   "/{Bucket}/{Key+}",

			OperationBindings: &aws.OperationBindings{
				InPayload:   "",
				OutPayload:  "Body",
				Required:    []string{"Bucket", "Key"},
				QueryParams: []string{},
				URIParams:   []string{"Bucket", "Key"},
				InHeaders:   []string{"IfMatch", "IfModifiedSince", "IfNoneMatch", "IfUnmodifiedSince", "Range", "SSECustomerAlgorithm", "SSECustomerKey", "SSECustomerKeyMD5"},
				OutHeaders:  []string{"AcceptRanges", "CacheControl", "ContentDisposition", "ContentEncoding", "ContentLanguage", "ContentLength", "ContentType", "DeleteMarker", "ETag", "Expiration", "Expires", "LastModified", "MissingMeta", "Restore", "SSECustomerAlgorithm", "SSECustomerKeyMD5", "SSEKMSKeyId", "ServerSideEncryption", "VersionId", "WebsiteRedirectLocation"},
			},
		}
	}

	req = aws.NewRequest(c.Service, opGetObject, input, output)
	output = &GetObjectOutput{}
	req.Data = output
	return
}

// GetObject is undocumented.
func (c *S3) GetObject(input *GetObjectInput) (output *GetObjectOutput, err error) {
	req, out := c.GetObjectRequest(input)
	output = out
	err = req.Send()
	return
}

// GetObjectACLRequest generates a request for the GetObjectACL operation.
func (c *S3) GetObjectACLRequest(input *GetObjectACLInput) (req *aws.Request, output *GetObjectACLOutput) {
	if opGetObjectACL == nil {
		opGetObjectACL = &aws.Operation{
			Name:       "GetObjectAcl",
			HTTPMethod: "GET",
			HTTPPath:   "/{Bucket}/{Key+}?acl",

			OperationBindings: &aws.OperationBindings{
				InPayload:   "",
				OutPayload:  "",
				Required:    []string{"Bucket", "Key"},
				QueryParams: []string{},
				URIParams:   []string{"Bucket", "Key"},
				InHeaders:   []string{},
				OutHeaders:  []string{},
			},
		}
	}

	req = aws.NewRequest(c.Service, opGetObjectACL, input, output)
	output = &GetObjectACLOutput{}
	req.Data = output
	return
}

// GetObjectACL is undocumented.
func (c *S3) GetObjectACL(input *GetObjectACLInput) (output *GetObjectACLOutput, err error) {
	req, out := c.GetObjectACLRequest(input)
	output = out
	err = req.Send()
	return
}

// GetObjectTorrentRequest generates a request for the GetObjectTorrent operation.
func (c *S3) GetObjectTorrentRequest(input *GetObjectTorrentInput) (req *aws.Request, output *GetObjectTorrentOutput) {
	if opGetObjectTorrent == nil {
		opGetObjectTorrent = &aws.Operation{
			Name:       "GetObjectTorrent",
			HTTPMethod: "GET",
			HTTPPath:   "/{Bucket}/{Key+}?torrent",

			OperationBindings: &aws.OperationBindings{
				InPayload:   "",
				OutPayload:  "Body",
				Required:    []string{"Bucket", "Key"},
				QueryParams: []string{},
				URIParams:   []string{"Bucket", "Key"},
				InHeaders:   []string{},
				OutHeaders:  []string{},
			},
		}
	}

	req = aws.NewRequest(c.Service, opGetObjectTorrent, input, output)
	output = &GetObjectTorrentOutput{}
	req.Data = output
	return
}

// GetObjectTorrent is undocumented.
func (c *S3) GetObjectTorrent(input *GetObjectTorrentInput) (output *GetObjectTorrentOutput, err error) {
	req, out := c.GetObjectTorrentRequest(input)
	output = out
	err = req.Send()
	return
}

// HeadBucketRequest generates a request for the HeadBucket operation.
func (c *S3) HeadBucketRequest(input *HeadBucketInput) (req *aws.Request) {
	if opHeadBucket == nil {
		opHeadBucket = &aws.Operation{
			Name:       "HeadBucket",
			HTTPMethod: "HEAD",
			HTTPPath:   "/{Bucket}",

			OperationBindings: &aws.OperationBindings{
				InPayload: "",

				Required:    []string{"Bucket"},
				QueryParams: []string{},
				URIParams:   []string{"Bucket"},
				InHeaders:   []string{},
				OutHeaders:  []string{},
			},
		}
	}

	req = aws.NewRequest(c.Service, opHeadBucket, input, nil)

	return
}

// HeadBucket this operation is useful to determine if a bucket exists and
// you have permission to access it.
func (c *S3) HeadBucket(input *HeadBucketInput) (err error) {
	req := c.HeadBucketRequest(input)
	err = req.Send()
	return
}

// HeadObjectRequest generates a request for the HeadObject operation.
func (c *S3) HeadObjectRequest(input *HeadObjectInput) (req *aws.Request, output *HeadObjectOutput) {
	if opHeadObject == nil {
		opHeadObject = &aws.Operation{
			Name:       "HeadObject",
			HTTPMethod: "HEAD",
			HTTPPath:   "/{Bucket}/{Key+}",

			OperationBindings: &aws.OperationBindings{
				InPayload:   "",
				OutPayload:  "",
				Required:    []string{"Bucket", "Key"},
				QueryParams: []string{},
				URIParams:   []string{"Bucket", "Key"},
				InHeaders:   []string{"IfMatch", "IfModifiedSince", "IfNoneMatch", "IfUnmodifiedSince", "Range", "SSECustomerAlgorithm", "SSECustomerKey", "SSECustomerKeyMD5"},
				OutHeaders:  []string{"AcceptRanges", "CacheControl", "ContentDisposition", "ContentEncoding", "ContentLanguage", "ContentLength", "ContentType", "DeleteMarker", "ETag", "Expiration", "Expires", "LastModified", "MissingMeta", "Restore", "SSECustomerAlgorithm", "SSECustomerKeyMD5", "SSEKMSKeyId", "ServerSideEncryption", "VersionId", "WebsiteRedirectLocation"},
			},
		}
	}

	req = aws.NewRequest(c.Service, opHeadObject, input, output)
	output = &HeadObjectOutput{}
	req.Data = output
	return
}

// HeadObject the operation retrieves metadata from an object without
// returning the object itself. This operation is useful if you're only
// interested in an object's metadata. To use you must have access to the
// object.
func (c *S3) HeadObject(input *HeadObjectInput) (output *HeadObjectOutput, err error) {
	req, out := c.HeadObjectRequest(input)
	output = out
	err = req.Send()
	return
}

// ListBucketsRequest generates a request for the ListBuckets operation.
func (c *S3) ListBucketsRequest() (req *aws.Request, output *ListBucketsOutput) {
	if opListBuckets == nil {
		opListBuckets = &aws.Operation{
			Name:       "ListBuckets",
			HTTPMethod: "GET",
			HTTPPath:   "/",

			OperationBindings: &aws.OperationBindings{

				OutPayload:  "",
				Required:    []string{},
				QueryParams: []string{},
				URIParams:   []string{},
				InHeaders:   []string{},
				OutHeaders:  []string{},
			},
		}
	}

	req = aws.NewRequest(c.Service, opListBuckets, nil, output)
	output = &ListBucketsOutput{}
	req.Data = output
	return
}

// ListBuckets returns a list of all buckets owned by the authenticated
// sender of the request.
func (c *S3) ListBuckets() (output *ListBucketsOutput, err error) {
	req, out := c.ListBucketsRequest()
	output = out
	err = req.Send()
	return
}

// ListMultipartUploadsRequest generates a request for the ListMultipartUploads operation.
func (c *S3) ListMultipartUploadsRequest(input *ListMultipartUploadsInput) (req *aws.Request, output *ListMultipartUploadsOutput) {
	if opListMultipartUploads == nil {
		opListMultipartUploads = &aws.Operation{
			Name:       "ListMultipartUploads",
			HTTPMethod: "GET",
			HTTPPath:   "/{Bucket}?uploads",

			OperationBindings: &aws.OperationBindings{
				InPayload:   "",
				OutPayload:  "",
				Required:    []string{"Bucket"},
				QueryParams: []string{},
				URIParams:   []string{"Bucket"},
				InHeaders:   []string{},
				OutHeaders:  []string{},
			},
		}
	}

	req = aws.NewRequest(c.Service, opListMultipartUploads, input, output)
	output = &ListMultipartUploadsOutput{}
	req.Data = output
	return
}

// ListMultipartUploads this operation lists in-progress multipart uploads.
func (c *S3) ListMultipartUploads(input *ListMultipartUploadsInput) (output *ListMultipartUploadsOutput, err error) {
	req, out := c.ListMultipartUploadsRequest(input)
	output = out
	err = req.Send()
	return
}

// ListObjectVersionsRequest generates a request for the ListObjectVersions operation.
func (c *S3) ListObjectVersionsRequest(input *ListObjectVersionsInput) (req *aws.Request, output *ListObjectVersionsOutput) {
	if opListObjectVersions == nil {
		opListObjectVersions = &aws.Operation{
			Name:       "ListObjectVersions",
			HTTPMethod: "GET",
			HTTPPath:   "/{Bucket}?versions",

			OperationBindings: &aws.OperationBindings{
				InPayload:   "",
				OutPayload:  "",
				Required:    []string{"Bucket"},
				QueryParams: []string{},
				URIParams:   []string{"Bucket"},
				InHeaders:   []string{},
				OutHeaders:  []string{},
			},
		}
	}

	req = aws.NewRequest(c.Service, opListObjectVersions, input, output)
	output = &ListObjectVersionsOutput{}
	req.Data = output
	return
}

// ListObjectVersions returns metadata about all of the versions of objects
// in a bucket.
func (c *S3) ListObjectVersions(input *ListObjectVersionsInput) (output *ListObjectVersionsOutput, err error) {
	req, out := c.ListObjectVersionsRequest(input)
	output = out
	err = req.Send()
	return
}

// ListObjectsRequest generates a request for the ListObjects operation.
func (c *S3) ListObjectsRequest(input *ListObjectsInput) (req *aws.Request, output *ListObjectsOutput) {
	if opListObjects == nil {
		opListObjects = &aws.Operation{
			Name:       "ListObjects",
			HTTPMethod: "GET",
			HTTPPath:   "/{Bucket}",

			OperationBindings: &aws.OperationBindings{
				InPayload:   "",
				OutPayload:  "",
				Required:    []string{"Bucket"},
				QueryParams: []string{},
				URIParams:   []string{"Bucket"},
				InHeaders:   []string{},
				OutHeaders:  []string{},
			},
		}
	}

	req = aws.NewRequest(c.Service, opListObjects, input, output)
	output = &ListObjectsOutput{}
	req.Data = output
	return
}

// ListObjects returns some or all (up to 1000) of the objects in a bucket.
// You can use the request parameters as selection criteria to return a
// subset of the objects in a bucket.
func (c *S3) ListObjects(input *ListObjectsInput) (output *ListObjectsOutput, err error) {
	req, out := c.ListObjectsRequest(input)
	output = out
	err = req.Send()
	return
}

// ListPartsRequest generates a request for the ListParts operation.
func (c *S3) ListPartsRequest(input *ListPartsInput) (req *aws.Request, output *ListPartsOutput) {
	if opListParts == nil {
		opListParts = &aws.Operation{
			Name:       "ListParts",
			HTTPMethod: "GET",
			HTTPPath:   "/{Bucket}/{Key+}",

			OperationBindings: &aws.OperationBindings{
				InPayload:   "",
				OutPayload:  "",
				Required:    []string{"Bucket", "Key", "UploadId"},
				QueryParams: []string{},
				URIParams:   []string{"Bucket", "Key"},
				InHeaders:   []string{},
				OutHeaders:  []string{},
			},
		}
	}

	req = aws.NewRequest(c.Service, opListParts, input, output)
	output = &ListPartsOutput{}
	req.Data = output
	return
}

// ListParts lists the parts that have been uploaded for a specific
// multipart upload.
func (c *S3) ListParts(input *ListPartsInput) (output *ListPartsOutput, err error) {
	req, out := c.ListPartsRequest(input)
	output = out
	err = req.Send()
	return
}

// PutBucketACLRequest generates a request for the PutBucketACL operation.
func (c *S3) PutBucketACLRequest(input *PutBucketACLInput) (req *aws.Request) {
	if opPutBucketACL == nil {
		opPutBucketACL = &aws.Operation{
			Name:       "PutBucketAcl",
			HTTPMethod: "PUT",
			HTTPPath:   "/{Bucket}?acl",

			OperationBindings: &aws.OperationBindings{
				InPayload: "AccessControlPolicy",

				Required:    []string{"Bucket"},
				QueryParams: []string{},
				URIParams:   []string{"Bucket"},
				InHeaders:   []string{"ACL", "ContentMD5", "GrantFullControl", "GrantRead", "GrantReadACP", "GrantWrite", "GrantWriteACP"},
				OutHeaders:  []string{},
			},
		}
	}

	req = aws.NewRequest(c.Service, opPutBucketACL, input, nil)

	return
}

// PutBucketACL sets the permissions on a bucket using access control lists
func (c *S3) PutBucketACL(input *PutBucketACLInput) (err error) {
	req := c.PutBucketACLRequest(input)
	err = req.Send()
	return
}

// PutBucketCORSRequest generates a request for the PutBucketCORS operation.
func (c *S3) PutBucketCORSRequest(input *PutBucketCORSInput) (req *aws.Request) {
	if opPutBucketCORS == nil {
		opPutBucketCORS = &aws.Operation{
			Name:       "PutBucketCors",
			HTTPMethod: "PUT",
			HTTPPath:   "/{Bucket}?cors",

			OperationBindings: &aws.OperationBindings{
				InPayload: "CORSConfiguration",

				Required:    []string{"Bucket"},
				QueryParams: []string{},
				URIParams:   []string{"Bucket"},
				InHeaders:   []string{"ContentMD5"},
				OutHeaders:  []string{},
			},
		}
	}

	req = aws.NewRequest(c.Service, opPutBucketCORS, input, nil)

	return
}

// PutBucketCORS is undocumented.
func (c *S3) PutBucketCORS(input *PutBucketCORSInput) (err error) {
	req := c.PutBucketCORSRequest(input)
	err = req.Send()
	return
}

// PutBucketLifecycleRequest generates a request for the PutBucketLifecycle operation.
func (c *S3) PutBucketLifecycleRequest(input *PutBucketLifecycleInput) (req *aws.Request) {
	if opPutBucketLifecycle == nil {
		opPutBucketLifecycle = &aws.Operation{
			Name:       "PutBucketLifecycle",
			HTTPMethod: "PUT",
			HTTPPath:   "/{Bucket}?lifecycle",

			OperationBindings: &aws.OperationBindings{
				InPayload: "LifecycleConfiguration",

				Required:    []string{"Bucket"},
				QueryParams: []string{},
				URIParams:   []string{"Bucket"},
				InHeaders:   []string{"ContentMD5"},
				OutHeaders:  []string{},
			},
		}
	}

	req = aws.NewRequest(c.Service, opPutBucketLifecycle, input, nil)

	return
}

// PutBucketLifecycle sets lifecycle configuration for your bucket. If a
// lifecycle configuration exists, it replaces it.
func (c *S3) PutBucketLifecycle(input *PutBucketLifecycleInput) (err error) {
	req := c.PutBucketLifecycleRequest(input)
	err = req.Send()
	return
}

// PutBucketLoggingRequest generates a request for the PutBucketLogging operation.
func (c *S3) PutBucketLoggingRequest(input *PutBucketLoggingInput) (req *aws.Request) {
	if opPutBucketLogging == nil {
		opPutBucketLogging = &aws.Operation{
			Name:       "PutBucketLogging",
			HTTPMethod: "PUT",
			HTTPPath:   "/{Bucket}?logging",

			OperationBindings: &aws.OperationBindings{
				InPayload: "BucketLoggingStatus",

				Required:    []string{"Bucket", "BucketLoggingStatus"},
				QueryParams: []string{},
				URIParams:   []string{"Bucket"},
				InHeaders:   []string{"ContentMD5"},
				OutHeaders:  []string{},
			},
		}
	}

	req = aws.NewRequest(c.Service, opPutBucketLogging, input, nil)

	return
}

// PutBucketLogging set the logging parameters for a bucket and to specify
// permissions for who can view and modify the logging parameters. To set
// the logging status of a bucket, you must be the bucket owner.
func (c *S3) PutBucketLogging(input *PutBucketLoggingInput) (err error) {
	req := c.PutBucketLoggingRequest(input)
	err = req.Send()
	return
}

// PutBucketNotificationRequest generates a request for the PutBucketNotification operation.
func (c *S3) PutBucketNotificationRequest(input *PutBucketNotificationInput) (req *aws.Request) {
	if opPutBucketNotification == nil {
		opPutBucketNotification = &aws.Operation{
			Name:       "PutBucketNotification",
			HTTPMethod: "PUT",
			HTTPPath:   "/{Bucket}?notification",

			OperationBindings: &aws.OperationBindings{
				InPayload: "NotificationConfiguration",

				Required:    []string{"Bucket", "NotificationConfiguration"},
				QueryParams: []string{},
				URIParams:   []string{"Bucket"},
				InHeaders:   []string{"ContentMD5"},
				OutHeaders:  []string{},
			},
		}
	}

	req = aws.NewRequest(c.Service, opPutBucketNotification, input, nil)

	return
}

// PutBucketNotification enables notifications of specified events for a
// bucket.
func (c *S3) PutBucketNotification(input *PutBucketNotificationInput) (err error) {
	req := c.PutBucketNotificationRequest(input)
	err = req.Send()
	return
}

// PutBucketPolicyRequest generates a request for the PutBucketPolicy operation.
func (c *S3) PutBucketPolicyRequest(input *PutBucketPolicyInput) (req *aws.Request) {
	if opPutBucketPolicy == nil {
		opPutBucketPolicy = &aws.Operation{
			Name:       "PutBucketPolicy",
			HTTPMethod: "PUT",
			HTTPPath:   "/{Bucket}?policy",

			OperationBindings: &aws.OperationBindings{
				InPayload: "Policy",

				Required:    []string{"Bucket", "Policy"},
				QueryParams: []string{},
				URIParams:   []string{"Bucket"},
				InHeaders:   []string{"ContentMD5"},
				OutHeaders:  []string{},
			},
		}
	}

	req = aws.NewRequest(c.Service, opPutBucketPolicy, input, nil)

	return
}

// PutBucketPolicy replaces a policy on a bucket. If the bucket already has
// a policy, the one in this request completely replaces it.
func (c *S3) PutBucketPolicy(input *PutBucketPolicyInput) (err error) {
	req := c.PutBucketPolicyRequest(input)
	err = req.Send()
	return
}

// PutBucketRequestPaymentRequest generates a request for the PutBucketRequestPayment operation.
func (c *S3) PutBucketRequestPaymentRequest(input *PutBucketRequestPaymentInput) (req *aws.Request) {
	if opPutBucketRequestPayment == nil {
		opPutBucketRequestPayment = &aws.Operation{
			Name:       "PutBucketRequestPayment",
			HTTPMethod: "PUT",
			HTTPPath:   "/{Bucket}?requestPayment",

			OperationBindings: &aws.OperationBindings{
				InPayload: "RequestPaymentConfiguration",

				Required:    []string{"Bucket", "RequestPaymentConfiguration"},
				QueryParams: []string{},
				URIParams:   []string{"Bucket"},
				InHeaders:   []string{"ContentMD5"},
				OutHeaders:  []string{},
			},
		}
	}

	req = aws.NewRequest(c.Service, opPutBucketRequestPayment, input, nil)

	return
}

// PutBucketRequestPayment sets the request payment configuration for a
// bucket. By default, the bucket owner pays for downloads from the bucket.
// This configuration parameter enables the bucket owner (only) to specify
// that the person requesting the download will be charged for the
// download.
func (c *S3) PutBucketRequestPayment(input *PutBucketRequestPaymentInput) (err error) {
	req := c.PutBucketRequestPaymentRequest(input)
	err = req.Send()
	return
}

// PutBucketTaggingRequest generates a request for the PutBucketTagging operation.
func (c *S3) PutBucketTaggingRequest(input *PutBucketTaggingInput) (req *aws.Request) {
	if opPutBucketTagging == nil {
		opPutBucketTagging = &aws.Operation{
			Name:       "PutBucketTagging",
			HTTPMethod: "PUT",
			HTTPPath:   "/{Bucket}?tagging",

			OperationBindings: &aws.OperationBindings{
				InPayload: "Tagging",

				Required:    []string{"Bucket", "Tagging"},
				QueryParams: []string{},
				URIParams:   []string{"Bucket"},
				InHeaders:   []string{"ContentMD5"},
				OutHeaders:  []string{},
			},
		}
	}

	req = aws.NewRequest(c.Service, opPutBucketTagging, input, nil)

	return
}

// PutBucketTagging is undocumented.
func (c *S3) PutBucketTagging(input *PutBucketTaggingInput) (err error) {
	req := c.PutBucketTaggingRequest(input)
	err = req.Send()
	return
}

// PutBucketVersioningRequest generates a request for the PutBucketVersioning operation.
func (c *S3) PutBucketVersioningRequest(input *PutBucketVersioningInput) (req *aws.Request) {
	if opPutBucketVersioning == nil {
		opPutBucketVersioning = &aws.Operation{
			Name:       "PutBucketVersioning",
			HTTPMethod: "PUT",
			HTTPPath:   "/{Bucket}?versioning",

			OperationBindings: &aws.OperationBindings{
				InPayload: "VersioningConfiguration",

				Required:    []string{"Bucket", "VersioningConfiguration"},
				QueryParams: []string{},
				URIParams:   []string{"Bucket"},
				InHeaders:   []string{"ContentMD5", "MFA"},
				OutHeaders:  []string{},
			},
		}
	}

	req = aws.NewRequest(c.Service, opPutBucketVersioning, input, nil)

	return
}

// PutBucketVersioning sets the versioning state of an existing bucket. To
// set the versioning state, you must be the bucket owner.
func (c *S3) PutBucketVersioning(input *PutBucketVersioningInput) (err error) {
	req := c.PutBucketVersioningRequest(input)
	err = req.Send()
	return
}

// PutBucketWebsiteRequest generates a request for the PutBucketWebsite operation.
func (c *S3) PutBucketWebsiteRequest(input *PutBucketWebsiteInput) (req *aws.Request) {
	if opPutBucketWebsite == nil {
		opPutBucketWebsite = &aws.Operation{
			Name:       "PutBucketWebsite",
			HTTPMethod: "PUT",
			HTTPPath:   "/{Bucket}?website",

			OperationBindings: &aws.OperationBindings{
				InPayload: "WebsiteConfiguration",

				Required:    []string{"Bucket", "WebsiteConfiguration"},
				QueryParams: []string{},
				URIParams:   []string{"Bucket"},
				InHeaders:   []string{"ContentMD5"},
				OutHeaders:  []string{},
			},
		}
	}

	req = aws.NewRequest(c.Service, opPutBucketWebsite, input, nil)

	return
}

// PutBucketWebsite is undocumented.
func (c *S3) PutBucketWebsite(input *PutBucketWebsiteInput) (err error) {
	req := c.PutBucketWebsiteRequest(input)
	err = req.Send()
	return
}

// PutObjectRequest generates a request for the PutObject operation.
func (c *S3) PutObjectRequest(input *PutObjectInput) (req *aws.Request, output *PutObjectOutput) {
	if opPutObject == nil {
		opPutObject = &aws.Operation{
			Name:       "PutObject",
			HTTPMethod: "PUT",
			HTTPPath:   "/{Bucket}/{Key+}",

			OperationBindings: &aws.OperationBindings{
				InPayload:   "Body",
				OutPayload:  "",
				Required:    []string{"Bucket", "Key"},
				QueryParams: []string{},
				URIParams:   []string{"Bucket", "Key"},
				InHeaders:   []string{"ACL", "CacheControl", "ContentDisposition", "ContentEncoding", "ContentLanguage", "ContentLength", "ContentMD5", "ContentType", "Expires", "GrantFullControl", "GrantRead", "GrantReadACP", "GrantWriteACP", "SSECustomerAlgorithm", "SSECustomerKey", "SSECustomerKeyMD5", "SSEKMSKeyId", "ServerSideEncryption", "StorageClass", "WebsiteRedirectLocation"},
				OutHeaders:  []string{"ETag", "Expiration", "SSECustomerAlgorithm", "SSECustomerKeyMD5", "SSEKMSKeyId", "ServerSideEncryption", "VersionId"},
			},
		}
	}

	req = aws.NewRequest(c.Service, opPutObject, input, output)
	output = &PutObjectOutput{}
	req.Data = output
	return
}

// PutObject is undocumented.
func (c *S3) PutObject(input *PutObjectInput) (output *PutObjectOutput, err error) {
	req, out := c.PutObjectRequest(input)
	output = out
	err = req.Send()
	return
}

// PutObjectACLRequest generates a request for the PutObjectACL operation.
func (c *S3) PutObjectACLRequest(input *PutObjectACLInput) (req *aws.Request) {
	if opPutObjectACL == nil {
		opPutObjectACL = &aws.Operation{
			Name:       "PutObjectAcl",
			HTTPMethod: "PUT",
			HTTPPath:   "/{Bucket}/{Key+}?acl",

			OperationBindings: &aws.OperationBindings{
				InPayload: "AccessControlPolicy",

				Required:    []string{"Bucket", "Key"},
				QueryParams: []string{},
				URIParams:   []string{"Bucket", "Key"},
				InHeaders:   []string{"ACL", "ContentMD5", "GrantFullControl", "GrantRead", "GrantReadACP", "GrantWrite", "GrantWriteACP"},
				OutHeaders:  []string{},
			},
		}
	}

	req = aws.NewRequest(c.Service, opPutObjectACL, input, nil)

	return
}

// PutObjectACL uses the acl subresource to set the access control list
// permissions for an object that already exists in a bucket
func (c *S3) PutObjectACL(input *PutObjectACLInput) (err error) {
	req := c.PutObjectACLRequest(input)
	err = req.Send()
	return
}

// RestoreObjectRequest generates a request for the RestoreObject operation.
func (c *S3) RestoreObjectRequest(input *RestoreObjectInput) (req *aws.Request) {
	if opRestoreObject == nil {
		opRestoreObject = &aws.Operation{
			Name:       "RestoreObject",
			HTTPMethod: "POST",
			HTTPPath:   "/{Bucket}/{Key+}?restore",

			OperationBindings: &aws.OperationBindings{
				InPayload: "RestoreRequest",

				Required:    []string{"Bucket", "Key"},
				QueryParams: []string{},
				URIParams:   []string{"Bucket", "Key"},
				InHeaders:   []string{},
				OutHeaders:  []string{},
			},
		}
	}

	req = aws.NewRequest(c.Service, opRestoreObject, input, nil)

	return
}

// RestoreObject restores an archived copy of an object back into Amazon S3
func (c *S3) RestoreObject(input *RestoreObjectInput) (err error) {
	req := c.RestoreObjectRequest(input)
	err = req.Send()
	return
}

// UploadPartRequest generates a request for the UploadPart operation.
func (c *S3) UploadPartRequest(input *UploadPartInput) (req *aws.Request, output *UploadPartOutput) {
	if opUploadPart == nil {
		opUploadPart = &aws.Operation{
			Name:       "UploadPart",
			HTTPMethod: "PUT",
			HTTPPath:   "/{Bucket}/{Key+}",

			OperationBindings: &aws.OperationBindings{
				InPayload:   "Body",
				OutPayload:  "",
				Required:    []string{"Bucket", "Key", "PartNumber", "UploadId"},
				QueryParams: []string{},
				URIParams:   []string{"Bucket", "Key"},
				InHeaders:   []string{"ContentLength", "ContentMD5", "SSECustomerAlgorithm", "SSECustomerKey", "SSECustomerKeyMD5"},
				OutHeaders:  []string{"ETag", "SSECustomerAlgorithm", "SSECustomerKeyMD5", "SSEKMSKeyId", "ServerSideEncryption"},
			},
		}
	}

	req = aws.NewRequest(c.Service, opUploadPart, input, output)
	output = &UploadPartOutput{}
	req.Data = output
	return
}

// UploadPart uploads a part in a multipart upload. Note: After you
// initiate multipart upload and upload one or more parts, you must either
// complete or abort multipart upload in order to stop getting charged for
// storage of the uploaded parts. Only after you either complete or abort
// multipart upload, Amazon S3 frees up the parts storage and stops
// charging you for the parts storage.
func (c *S3) UploadPart(input *UploadPartInput) (output *UploadPartOutput, err error) {
	req, out := c.UploadPartRequest(input)
	output = out
	err = req.Send()
	return
}

// UploadPartCopyRequest generates a request for the UploadPartCopy operation.
func (c *S3) UploadPartCopyRequest(input *UploadPartCopyInput) (req *aws.Request, output *UploadPartCopyOutput) {
	if opUploadPartCopy == nil {
		opUploadPartCopy = &aws.Operation{
			Name:       "UploadPartCopy",
			HTTPMethod: "PUT",
			HTTPPath:   "/{Bucket}/{Key+}",

			OperationBindings: &aws.OperationBindings{
				InPayload:   "",
				OutPayload:  "CopyPartResult",
				Required:    []string{"Bucket", "CopySource", "Key", "PartNumber", "UploadId"},
				QueryParams: []string{},
				URIParams:   []string{"Bucket", "Key"},
				InHeaders:   []string{"CopySource", "CopySourceIfMatch", "CopySourceIfModifiedSince", "CopySourceIfNoneMatch", "CopySourceIfUnmodifiedSince", "CopySourceRange", "CopySourceSSECustomerAlgorithm", "CopySourceSSECustomerKey", "CopySourceSSECustomerKeyMD5", "SSECustomerAlgorithm", "SSECustomerKey", "SSECustomerKeyMD5"},
				OutHeaders:  []string{"CopySourceVersionId", "SSECustomerAlgorithm", "SSECustomerKeyMD5", "SSEKMSKeyId", "ServerSideEncryption"},
			},
		}
	}

	req = aws.NewRequest(c.Service, opUploadPartCopy, input, output)
	output = &UploadPartCopyOutput{}
	req.Data = output
	return
}

// UploadPartCopy uploads a part by copying data from an existing object as
// data source.
func (c *S3) UploadPartCopy(input *UploadPartCopyInput) (output *UploadPartCopyOutput, err error) {
	req, out := c.UploadPartCopyRequest(input)
	output = out
	err = req.Send()
	return
}

var (
	opAbortMultipartUpload    *aws.Operation
	opCompleteMultipartUpload *aws.Operation
	opCopyObject              *aws.Operation
	opCreateBucket            *aws.Operation
	opCreateMultipartUpload   *aws.Operation
	opDeleteBucket            *aws.Operation
	opDeleteBucketCORS        *aws.Operation
	opDeleteBucketLifecycle   *aws.Operation
	opDeleteBucketPolicy      *aws.Operation
	opDeleteBucketTagging     *aws.Operation
	opDeleteBucketWebsite     *aws.Operation
	opDeleteObject            *aws.Operation
	opDeleteObjects           *aws.Operation
	opGetBucketACL            *aws.Operation
	opGetBucketCORS           *aws.Operation
	opGetBucketLifecycle      *aws.Operation
	opGetBucketLocation       *aws.Operation
	opGetBucketLogging        *aws.Operation
	opGetBucketNotification   *aws.Operation
	opGetBucketPolicy         *aws.Operation
	opGetBucketRequestPayment *aws.Operation
	opGetBucketTagging        *aws.Operation
	opGetBucketVersioning     *aws.Operation
	opGetBucketWebsite        *aws.Operation
	opGetObject               *aws.Operation
	opGetObjectACL            *aws.Operation
	opGetObjectTorrent        *aws.Operation
	opHeadBucket              *aws.Operation
	opHeadObject              *aws.Operation
	opListBuckets             *aws.Operation
	opListMultipartUploads    *aws.Operation
	opListObjectVersions      *aws.Operation
	opListObjects             *aws.Operation
	opListParts               *aws.Operation
	opPutBucketACL            *aws.Operation
	opPutBucketCORS           *aws.Operation
	opPutBucketLifecycle      *aws.Operation
	opPutBucketLogging        *aws.Operation
	opPutBucketNotification   *aws.Operation
	opPutBucketPolicy         *aws.Operation
	opPutBucketRequestPayment *aws.Operation
	opPutBucketTagging        *aws.Operation
	opPutBucketVersioning     *aws.Operation
	opPutBucketWebsite        *aws.Operation
	opPutObject               *aws.Operation
	opPutObjectACL            *aws.Operation
	opRestoreObject           *aws.Operation
	opUploadPart              *aws.Operation
	opUploadPartCopy          *aws.Operation
)

// Possible values for BucketCannedACL.
const (
	BucketCannedACLAuthenticatedRead = "authenticated-read"
	BucketCannedACLPrivate           = "private"
	BucketCannedACLPublicRead        = "public-read"
	BucketCannedACLPublicReadWrite   = "public-read-write"
)

// Possible values for BucketLocationConstraint.
const (
	BucketLocationConstraintApNortheast1 = "ap-northeast-1"
	BucketLocationConstraintApSoutheast1 = "ap-southeast-1"
	BucketLocationConstraintApSoutheast2 = "ap-southeast-2"
	BucketLocationConstraintCnNorth1     = "cn-north-1"
	BucketLocationConstraintEu           = "EU"
	BucketLocationConstraintEuCentral1   = "eu-central-1"
	BucketLocationConstraintEuWest1      = "eu-west-1"
	BucketLocationConstraintSaEast1      = "sa-east-1"
	BucketLocationConstraintUsWest1      = "us-west-1"
	BucketLocationConstraintUsWest2      = "us-west-2"
)

// Possible values for BucketLogsPermission.
const (
	BucketLogsPermissionFullControl = "FULL_CONTROL"
	BucketLogsPermissionRead        = "READ"
	BucketLogsPermissionWrite       = "WRITE"
)

// Possible values for BucketVersioningStatus.
const (
	BucketVersioningStatusEnabled   = "Enabled"
	BucketVersioningStatusSuspended = "Suspended"
)

// Possible values for EncodingType.
const (
	EncodingTypeURL = "url"
)

// Possible values for Event.
const (
	EventS3ObjectCreatedCompleteMultipartUpload = "s3:ObjectCreated:CompleteMultipartUpload"
	EventS3ObjectCreatedCopy                    = "s3:ObjectCreated:Copy"
	EventS3ObjectCreatedPost                    = "s3:ObjectCreated:Post"
	EventS3ObjectCreatedPut                     = "s3:ObjectCreated:Put"
	EventS3ReducedRedundancyLostObject          = "s3:ReducedRedundancyLostObject"
)

// Possible values for ExpirationStatus.
const (
	ExpirationStatusDisabled = "Disabled"
	ExpirationStatusEnabled  = "Enabled"
)

// Possible values for MFADelete.
const (
	MFADeleteDisabled = "Disabled"
	MFADeleteEnabled  = "Enabled"
)

// Possible values for MFADeleteStatus.
const (
	MFADeleteStatusDisabled = "Disabled"
	MFADeleteStatusEnabled  = "Enabled"
)

// Possible values for MetadataDirective.
const (
	MetadataDirectiveCopy    = "COPY"
	MetadataDirectiveReplace = "REPLACE"
)

// Possible values for ObjectCannedACL.
const (
	ObjectCannedACLAuthenticatedRead      = "authenticated-read"
	ObjectCannedACLBucketOwnerFullControl = "bucket-owner-full-control"
	ObjectCannedACLBucketOwnerRead        = "bucket-owner-read"
	ObjectCannedACLPrivate                = "private"
	ObjectCannedACLPublicRead             = "public-read"
	ObjectCannedACLPublicReadWrite        = "public-read-write"
)

// Possible values for ObjectStorageClass.
const (
	ObjectStorageClassGlacier           = "GLACIER"
	ObjectStorageClassReducedRedundancy = "REDUCED_REDUNDANCY"
	ObjectStorageClassStandard          = "STANDARD"
)

// Possible values for ObjectVersionStorageClass.
const (
	ObjectVersionStorageClassStandard = "STANDARD"
)

// Possible values for Payer.
const (
	PayerBucketOwner = "BucketOwner"
	PayerRequester   = "Requester"
)

// Possible values for Permission.
const (
	PermissionFullControl = "FULL_CONTROL"
	PermissionRead        = "READ"
	PermissionReadAcp     = "READ_ACP"
	PermissionWrite       = "WRITE"
	PermissionWriteAcp    = "WRITE_ACP"
)

// Possible values for Protocol.
const (
	ProtocolHTTP  = "http"
	ProtocolHTTPS = "https"
)

// Possible values for ServerSideEncryption.
const (
	ServerSideEncryptionAES256 = "AES256"
)

// Possible values for StorageClass.
const (
	StorageClassReducedRedundancy = "REDUCED_REDUNDANCY"
	StorageClassStandard          = "STANDARD"
)

// Possible values for TransitionStorageClass.
const (
	TransitionStorageClassGlacier = "GLACIER"
)

// Possible values for Type.
const (
	TypeAmazonCustomerByEmail = "AmazonCustomerByEmail"
	TypeCanonicalUser         = "CanonicalUser"
	TypeGroup                 = "Group"
)

// AbortMultipartUploadInput is undocumented.
type AbortMultipartUploadInput struct {
	XMLName xml.Name

	Bucket   *string `xml:"-" name:"Bucket"`
	Key      *string `xml:"-" name:"Key"`
	UploadID *string `xml:"-" name:"uploadId"`
}

func (v *AbortMultipartUploadInput) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return aws.MarshalXML(v, e, start)
}

// AccessControlPolicy is undocumented.
type AccessControlPolicy struct {
	XMLName xml.Name

	Grants []Grant `xml:"AccessControlList>Grant,omitempty"`
	Owner  *Owner  `xml:"Owner,omitempty"`
}

func (v *AccessControlPolicy) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return aws.MarshalXML(v, e, start)
}

// Bucket is undocumented.
type Bucket struct {
	XMLName xml.Name

	CreationDate time.Time `xml:"CreationDate"`
	Name         *string   `xml:"Name"`
}

func (v *Bucket) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return aws.MarshalXML(v, e, start)
}

// BucketLoggingStatus is undocumented.
type BucketLoggingStatus struct {
	XMLName xml.Name

	LoggingEnabled *LoggingEnabled `xml:"LoggingEnabled,omitempty"`
}

func (v *BucketLoggingStatus) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return aws.MarshalXML(v, e, start)
}

// CORSConfiguration is undocumented.
type CORSConfiguration struct {
	XMLName xml.Name

	CORSRules []CORSRule `xml:"CORSRule,omitempty"`
}

func (v *CORSConfiguration) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return aws.MarshalXML(v, e, start)
}

// CORSRule is undocumented.
type CORSRule struct {
	XMLName xml.Name

	AllowedHeaders []string `xml:"AllowedHeader,omitempty"`
	AllowedMethods []string `xml:"AllowedMethod,omitempty"`
	AllowedOrigins []string `xml:"AllowedOrigin,omitempty"`
	ExposeHeaders  []string `xml:"ExposeHeader,omitempty"`
	MaxAgeSeconds  *int     `xml:"MaxAgeSeconds"`
}

func (v *CORSRule) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return aws.MarshalXML(v, e, start)
}

// CloudFunctionConfiguration is undocumented.
type CloudFunctionConfiguration struct {
	XMLName xml.Name

	CloudFunction  *string  `xml:"CloudFunction"`
	Event          *string  `xml:"Event"`
	Events         []string `xml:"Event,omitempty"`
	ID             *string  `xml:"Id"`
	InvocationRole *string  `xml:"InvocationRole"`
}

func (v *CloudFunctionConfiguration) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return aws.MarshalXML(v, e, start)
}

// CommonPrefix is undocumented.
type CommonPrefix struct {
	XMLName xml.Name

	Prefix *string `xml:"Prefix"`
}

func (v *CommonPrefix) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return aws.MarshalXML(v, e, start)
}

// CompleteMultipartUploadOutput is undocumented.
type CompleteMultipartUploadOutput struct {
	XMLName xml.Name

	Bucket               *string `xml:"Bucket"`
	ETag                 *string `xml:"ETag"`
	Expiration           *string `xml:"-" name:"x-amz-expiration"`
	Key                  *string `xml:"Key"`
	Location             *string `xml:"Location"`
	SSEKMSKeyID          *string `xml:"-" name:"x-amz-server-side-encryption-aws-kms-key-id"`
	ServerSideEncryption *string `xml:"-" name:"x-amz-server-side-encryption"`
	VersionID            *string `xml:"-" name:"x-amz-version-id"`
}

func (v *CompleteMultipartUploadOutput) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return aws.MarshalXML(v, e, start)
}

// CompleteMultipartUploadInput is undocumented.
type CompleteMultipartUploadInput struct {
	XMLName xml.Name

	Bucket          *string                   `xml:"-" name:"Bucket"`
	Key             *string                   `xml:"-" name:"Key"`
	MultipartUpload *CompletedMultipartUpload `xml:"CompleteMultipartUpload,omitempty"`
	UploadID        *string                   `xml:"-" name:"uploadId"`
}

func (v *CompleteMultipartUploadInput) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return aws.MarshalXML(v, e, start)
}

// CompletedMultipartUpload is undocumented.
type CompletedMultipartUpload struct {
	XMLName xml.Name

	Parts []CompletedPart `xml:"Part,omitempty"`
}

func (v *CompletedMultipartUpload) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return aws.MarshalXML(v, e, start)
}

// CompletedPart is undocumented.
type CompletedPart struct {
	XMLName xml.Name

	ETag       *string `xml:"ETag"`
	PartNumber *int    `xml:"PartNumber"`
}

func (v *CompletedPart) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return aws.MarshalXML(v, e, start)
}

// Condition is undocumented.
type Condition struct {
	XMLName xml.Name

	HTTPErrorCodeReturnedEquals *string `xml:"HttpErrorCodeReturnedEquals"`
	KeyPrefixEquals             *string `xml:"KeyPrefixEquals"`
}

func (v *Condition) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return aws.MarshalXML(v, e, start)
}

// CopyObjectOutput is undocumented.
type CopyObjectOutput struct {
	XMLName xml.Name

	CopyObjectResult     *CopyObjectResult `xml:"CopyObjectResult,omitempty"`
	CopySourceVersionID  *string           `xml:"-" name:"x-amz-copy-source-version-id"`
	Expiration           *string           `xml:"-" name:"x-amz-expiration"`
	SSECustomerAlgorithm *string           `xml:"-" name:"x-amz-server-side-encryption-customer-algorithm"`
	SSECustomerKeyMD5    *string           `xml:"-" name:"x-amz-server-side-encryption-customer-key-MD5"`
	SSEKMSKeyID          *string           `xml:"-" name:"x-amz-server-side-encryption-aws-kms-key-id"`
	ServerSideEncryption *string           `xml:"-" name:"x-amz-server-side-encryption"`
}

func (v *CopyObjectOutput) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return aws.MarshalXML(v, e, start)
}

// CopyObjectInput is undocumented.
type CopyObjectInput struct {
	XMLName xml.Name

	ACL                            *string           `xml:"-" name:"x-amz-acl"`
	Bucket                         *string           `xml:"-" name:"Bucket"`
	CacheControl                   *string           `xml:"-" name:"Cache-Control"`
	ContentDisposition             *string           `xml:"-" name:"Content-Disposition"`
	ContentEncoding                *string           `xml:"-" name:"Content-Encoding"`
	ContentLanguage                *string           `xml:"-" name:"Content-Language"`
	ContentType                    *string           `xml:"-" name:"Content-Type"`
	CopySource                     *string           `xml:"-" name:"x-amz-copy-source"`
	CopySourceIfMatch              *string           `xml:"-" name:"x-amz-copy-source-if-match"`
	CopySourceIfModifiedSince      time.Time         `xml:"-" name:"x-amz-copy-source-if-modified-since"`
	CopySourceIfNoneMatch          *string           `xml:"-" name:"x-amz-copy-source-if-none-match"`
	CopySourceIfUnmodifiedSince    time.Time         `xml:"-" name:"x-amz-copy-source-if-unmodified-since"`
	CopySourceSSECustomerAlgorithm *string           `xml:"-" name:"x-amz-copy-source-server-side-encryption-customer-algorithm"`
	CopySourceSSECustomerKey       *string           `xml:"-" name:"x-amz-copy-source-server-side-encryption-customer-key"`
	CopySourceSSECustomerKeyMD5    *string           `xml:"-" name:"x-amz-copy-source-server-side-encryption-customer-key-MD5"`
	Expires                        time.Time         `xml:"-" name:"Expires"`
	GrantFullControl               *string           `xml:"-" name:"x-amz-grant-full-control"`
	GrantRead                      *string           `xml:"-" name:"x-amz-grant-read"`
	GrantReadACP                   *string           `xml:"-" name:"x-amz-grant-read-acp"`
	GrantWriteACP                  *string           `xml:"-" name:"x-amz-grant-write-acp"`
	Key                            *string           `xml:"-" name:"Key"`
	Metadata                       map[string]string `xml:"-" name:"x-amz-meta-"`
	MetadataDirective              *string           `xml:"-" name:"x-amz-metadata-directive"`
	SSECustomerAlgorithm           *string           `xml:"-" name:"x-amz-server-side-encryption-customer-algorithm"`
	SSECustomerKey                 *string           `xml:"-" name:"x-amz-server-side-encryption-customer-key"`
	SSECustomerKeyMD5              *string           `xml:"-" name:"x-amz-server-side-encryption-customer-key-MD5"`
	SSEKMSKeyID                    *string           `xml:"-" name:"x-amz-server-side-encryption-aws-kms-key-id"`
	ServerSideEncryption           *string           `xml:"-" name:"x-amz-server-side-encryption"`
	StorageClass                   *string           `xml:"-" name:"x-amz-storage-class"`
	WebsiteRedirectLocation        *string           `xml:"-" name:"x-amz-website-redirect-location"`
}

func (v *CopyObjectInput) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return aws.MarshalXML(v, e, start)
}

// CopyObjectResult is undocumented.
type CopyObjectResult struct {
	XMLName xml.Name

	ETag         *string   `xml:"ETag"`
	LastModified time.Time `xml:"LastModified"`
}

func (v *CopyObjectResult) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return aws.MarshalXML(v, e, start)
}

// CopyPartResult is undocumented.
type CopyPartResult struct {
	XMLName xml.Name

	ETag         *string   `xml:"ETag"`
	LastModified time.Time `xml:"LastModified"`
}

func (v *CopyPartResult) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return aws.MarshalXML(v, e, start)
}

// CreateBucketConfiguration is undocumented.
type CreateBucketConfiguration struct {
	XMLName xml.Name

	LocationConstraint *string `xml:"LocationConstraint"`
}

func (v *CreateBucketConfiguration) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return aws.MarshalXML(v, e, start)
}

// CreateBucketOutput is undocumented.
type CreateBucketOutput struct {
	XMLName xml.Name

	Location *string `xml:"-" name:"Location"`
}

func (v *CreateBucketOutput) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return aws.MarshalXML(v, e, start)
}

// CreateBucketInput is undocumented.
type CreateBucketInput struct {
	XMLName xml.Name

	ACL                       *string                    `xml:"-" name:"x-amz-acl"`
	Bucket                    *string                    `xml:"-" name:"Bucket"`
	CreateBucketConfiguration *CreateBucketConfiguration `xml:"CreateBucketConfiguration,omitempty"`
	GrantFullControl          *string                    `xml:"-" name:"x-amz-grant-full-control"`
	GrantRead                 *string                    `xml:"-" name:"x-amz-grant-read"`
	GrantReadACP              *string                    `xml:"-" name:"x-amz-grant-read-acp"`
	GrantWrite                *string                    `xml:"-" name:"x-amz-grant-write"`
	GrantWriteACP             *string                    `xml:"-" name:"x-amz-grant-write-acp"`
}

func (v *CreateBucketInput) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return aws.MarshalXML(v, e, start)
}

// CreateMultipartUploadOutput is undocumented.
type CreateMultipartUploadOutput struct {
	XMLName xml.Name

	Bucket               *string `xml:"Bucket"`
	Key                  *string `xml:"Key"`
	SSECustomerAlgorithm *string `xml:"-" name:"x-amz-server-side-encryption-customer-algorithm"`
	SSECustomerKeyMD5    *string `xml:"-" name:"x-amz-server-side-encryption-customer-key-MD5"`
	SSEKMSKeyID          *string `xml:"-" name:"x-amz-server-side-encryption-aws-kms-key-id"`
	ServerSideEncryption *string `xml:"-" name:"x-amz-server-side-encryption"`
	UploadID             *string `xml:"UploadId"`
}

func (v *CreateMultipartUploadOutput) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return aws.MarshalXML(v, e, start)
}

// CreateMultipartUploadInput is undocumented.
type CreateMultipartUploadInput struct {
	XMLName xml.Name

	ACL                     *string           `xml:"-" name:"x-amz-acl"`
	Bucket                  *string           `xml:"-" name:"Bucket"`
	CacheControl            *string           `xml:"-" name:"Cache-Control"`
	ContentDisposition      *string           `xml:"-" name:"Content-Disposition"`
	ContentEncoding         *string           `xml:"-" name:"Content-Encoding"`
	ContentLanguage         *string           `xml:"-" name:"Content-Language"`
	ContentType             *string           `xml:"-" name:"Content-Type"`
	Expires                 time.Time         `xml:"-" name:"Expires"`
	GrantFullControl        *string           `xml:"-" name:"x-amz-grant-full-control"`
	GrantRead               *string           `xml:"-" name:"x-amz-grant-read"`
	GrantReadACP            *string           `xml:"-" name:"x-amz-grant-read-acp"`
	GrantWriteACP           *string           `xml:"-" name:"x-amz-grant-write-acp"`
	Key                     *string           `xml:"-" name:"Key"`
	Metadata                map[string]string `xml:"-" name:"x-amz-meta-"`
	SSECustomerAlgorithm    *string           `xml:"-" name:"x-amz-server-side-encryption-customer-algorithm"`
	SSECustomerKey          *string           `xml:"-" name:"x-amz-server-side-encryption-customer-key"`
	SSECustomerKeyMD5       *string           `xml:"-" name:"x-amz-server-side-encryption-customer-key-MD5"`
	SSEKMSKeyID             *string           `xml:"-" name:"x-amz-server-side-encryption-aws-kms-key-id"`
	ServerSideEncryption    *string           `xml:"-" name:"x-amz-server-side-encryption"`
	StorageClass            *string           `xml:"-" name:"x-amz-storage-class"`
	WebsiteRedirectLocation *string           `xml:"-" name:"x-amz-website-redirect-location"`
}

func (v *CreateMultipartUploadInput) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return aws.MarshalXML(v, e, start)
}

// Delete is undocumented.
type Delete struct {
	XMLName xml.Name

	Objects []ObjectIdentifier `xml:"Object,omitempty"`
	Quiet   *bool              `xml:"Quiet"`
}

func (v *Delete) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return aws.MarshalXML(v, e, start)
}

// DeleteBucketCORSInput is undocumented.
type DeleteBucketCORSInput struct {
	XMLName xml.Name

	Bucket *string `xml:"-" name:"Bucket"`
}

func (v *DeleteBucketCORSInput) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return aws.MarshalXML(v, e, start)
}

// DeleteBucketLifecycleInput is undocumented.
type DeleteBucketLifecycleInput struct {
	XMLName xml.Name

	Bucket *string `xml:"-" name:"Bucket"`
}

func (v *DeleteBucketLifecycleInput) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return aws.MarshalXML(v, e, start)
}

// DeleteBucketPolicyInput is undocumented.
type DeleteBucketPolicyInput struct {
	XMLName xml.Name

	Bucket *string `xml:"-" name:"Bucket"`
}

func (v *DeleteBucketPolicyInput) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return aws.MarshalXML(v, e, start)
}

// DeleteBucketInput is undocumented.
type DeleteBucketInput struct {
	XMLName xml.Name

	Bucket *string `xml:"-" name:"Bucket"`
}

func (v *DeleteBucketInput) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return aws.MarshalXML(v, e, start)
}

// DeleteBucketTaggingInput is undocumented.
type DeleteBucketTaggingInput struct {
	XMLName xml.Name

	Bucket *string `xml:"-" name:"Bucket"`
}

func (v *DeleteBucketTaggingInput) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return aws.MarshalXML(v, e, start)
}

// DeleteBucketWebsiteInput is undocumented.
type DeleteBucketWebsiteInput struct {
	XMLName xml.Name

	Bucket *string `xml:"-" name:"Bucket"`
}

func (v *DeleteBucketWebsiteInput) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return aws.MarshalXML(v, e, start)
}

// DeleteMarkerEntry is undocumented.
type DeleteMarkerEntry struct {
	XMLName xml.Name

	IsLatest     *bool     `xml:"IsLatest"`
	Key          *string   `xml:"Key"`
	LastModified time.Time `xml:"LastModified"`
	Owner        *Owner    `xml:"Owner,omitempty"`
	VersionID    *string   `xml:"VersionId"`
}

func (v *DeleteMarkerEntry) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return aws.MarshalXML(v, e, start)
}

// DeleteObjectOutput is undocumented.
type DeleteObjectOutput struct {
	XMLName xml.Name

	DeleteMarker *bool   `xml:"-" name:"x-amz-delete-marker"`
	VersionID    *string `xml:"-" name:"x-amz-version-id"`
}

func (v *DeleteObjectOutput) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return aws.MarshalXML(v, e, start)
}

// DeleteObjectInput is undocumented.
type DeleteObjectInput struct {
	XMLName xml.Name

	Bucket    *string `xml:"-" name:"Bucket"`
	Key       *string `xml:"-" name:"Key"`
	MFA       *string `xml:"-" name:"x-amz-mfa"`
	VersionID *string `xml:"-" name:"versionId"`
}

func (v *DeleteObjectInput) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return aws.MarshalXML(v, e, start)
}

// DeleteObjectsOutput is undocumented.
type DeleteObjectsOutput struct {
	XMLName xml.Name

	Deleted []DeletedObject `xml:"Deleted,omitempty"`
	Errors  []Error         `xml:"Error,omitempty"`
}

func (v *DeleteObjectsOutput) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return aws.MarshalXML(v, e, start)
}

// DeleteObjectsInput is undocumented.
type DeleteObjectsInput struct {
	XMLName xml.Name

	Bucket *string `xml:"-" name:"Bucket"`
	Delete *Delete `xml:"Delete,omitempty"`
	MFA    *string `xml:"-" name:"x-amz-mfa"`
}

func (v *DeleteObjectsInput) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return aws.MarshalXML(v, e, start)
}

// DeletedObject is undocumented.
type DeletedObject struct {
	XMLName xml.Name

	DeleteMarker          *bool   `xml:"DeleteMarker"`
	DeleteMarkerVersionID *string `xml:"DeleteMarkerVersionId"`
	Key                   *string `xml:"Key"`
	VersionID             *string `xml:"VersionId"`
}

func (v *DeletedObject) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return aws.MarshalXML(v, e, start)
}

// Error is undocumented.
type Error struct {
	XMLName xml.Name

	Code      *string `xml:"Code"`
	Key       *string `xml:"Key"`
	Message   *string `xml:"Message"`
	VersionID *string `xml:"VersionId"`
}

func (v *Error) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return aws.MarshalXML(v, e, start)
}

// ErrorDocument is undocumented.
type ErrorDocument struct {
	XMLName xml.Name

	Key *string `xml:"Key"`
}

func (v *ErrorDocument) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return aws.MarshalXML(v, e, start)
}

// GetBucketACLOutput is undocumented.
type GetBucketACLOutput struct {
	XMLName xml.Name

	Grants []Grant `xml:"AccessControlList>Grant,omitempty"`
	Owner  *Owner  `xml:"Owner,omitempty"`
}

func (v *GetBucketACLOutput) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return aws.MarshalXML(v, e, start)
}

// GetBucketACLInput is undocumented.
type GetBucketACLInput struct {
	XMLName xml.Name

	Bucket *string `xml:"-" name:"Bucket"`
}

func (v *GetBucketACLInput) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return aws.MarshalXML(v, e, start)
}

// GetBucketCORSOutput is undocumented.
type GetBucketCORSOutput struct {
	XMLName xml.Name

	CORSRules []CORSRule `xml:"CORSRule,omitempty"`
}

func (v *GetBucketCORSOutput) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return aws.MarshalXML(v, e, start)
}

// GetBucketCORSInput is undocumented.
type GetBucketCORSInput struct {
	XMLName xml.Name

	Bucket *string `xml:"-" name:"Bucket"`
}

func (v *GetBucketCORSInput) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return aws.MarshalXML(v, e, start)
}

// GetBucketLifecycleOutput is undocumented.
type GetBucketLifecycleOutput struct {
	XMLName xml.Name

	Rules []Rule `xml:"Rule,omitempty"`
}

func (v *GetBucketLifecycleOutput) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return aws.MarshalXML(v, e, start)
}

// GetBucketLifecycleInput is undocumented.
type GetBucketLifecycleInput struct {
	XMLName xml.Name

	Bucket *string `xml:"-" name:"Bucket"`
}

func (v *GetBucketLifecycleInput) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return aws.MarshalXML(v, e, start)
}

// GetBucketLocationOutput is undocumented.
type GetBucketLocationOutput struct {
	XMLName xml.Name

	LocationConstraint *string `xml:"LocationConstraint"`
}

func (v *GetBucketLocationOutput) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return aws.MarshalXML(v, e, start)
}

// GetBucketLocationInput is undocumented.
type GetBucketLocationInput struct {
	XMLName xml.Name

	Bucket *string `xml:"-" name:"Bucket"`
}

func (v *GetBucketLocationInput) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return aws.MarshalXML(v, e, start)
}

// GetBucketLoggingOutput is undocumented.
type GetBucketLoggingOutput struct {
	XMLName xml.Name

	LoggingEnabled *LoggingEnabled `xml:"LoggingEnabled,omitempty"`
}

func (v *GetBucketLoggingOutput) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return aws.MarshalXML(v, e, start)
}

// GetBucketLoggingInput is undocumented.
type GetBucketLoggingInput struct {
	XMLName xml.Name

	Bucket *string `xml:"-" name:"Bucket"`
}

func (v *GetBucketLoggingInput) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return aws.MarshalXML(v, e, start)
}

// GetBucketNotificationOutput is undocumented.
type GetBucketNotificationOutput struct {
	XMLName xml.Name

	CloudFunctionConfiguration *CloudFunctionConfiguration `xml:"CloudFunctionConfiguration,omitempty"`
	QueueConfiguration         *QueueConfiguration         `xml:"QueueConfiguration,omitempty"`
	TopicConfiguration         *TopicConfiguration         `xml:"TopicConfiguration,omitempty"`
}

func (v *GetBucketNotificationOutput) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return aws.MarshalXML(v, e, start)
}

// GetBucketNotificationInput is undocumented.
type GetBucketNotificationInput struct {
	XMLName xml.Name

	Bucket *string `xml:"-" name:"Bucket"`
}

func (v *GetBucketNotificationInput) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return aws.MarshalXML(v, e, start)
}

// GetBucketPolicyOutput is undocumented.
type GetBucketPolicyOutput struct {
	XMLName xml.Name

	Policy *string `xml:"Policy"`
}

func (v *GetBucketPolicyOutput) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return aws.MarshalXML(v, e, start)
}

// GetBucketPolicyInput is undocumented.
type GetBucketPolicyInput struct {
	XMLName xml.Name

	Bucket *string `xml:"-" name:"Bucket"`
}

func (v *GetBucketPolicyInput) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return aws.MarshalXML(v, e, start)
}

// GetBucketRequestPaymentOutput is undocumented.
type GetBucketRequestPaymentOutput struct {
	XMLName xml.Name

	Payer *string `xml:"Payer"`
}

func (v *GetBucketRequestPaymentOutput) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return aws.MarshalXML(v, e, start)
}

// GetBucketRequestPaymentInput is undocumented.
type GetBucketRequestPaymentInput struct {
	XMLName xml.Name

	Bucket *string `xml:"-" name:"Bucket"`
}

func (v *GetBucketRequestPaymentInput) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return aws.MarshalXML(v, e, start)
}

// GetBucketTaggingOutput is undocumented.
type GetBucketTaggingOutput struct {
	XMLName xml.Name

	TagSet []Tag `xml:"TagSet>Tag,omitempty"`
}

func (v *GetBucketTaggingOutput) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return aws.MarshalXML(v, e, start)
}

// GetBucketTaggingInput is undocumented.
type GetBucketTaggingInput struct {
	XMLName xml.Name

	Bucket *string `xml:"-" name:"Bucket"`
}

func (v *GetBucketTaggingInput) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return aws.MarshalXML(v, e, start)
}

// GetBucketVersioningOutput is undocumented.
type GetBucketVersioningOutput struct {
	XMLName xml.Name

	MFADelete *string `xml:"MfaDelete"`
	Status    *string `xml:"Status"`
}

func (v *GetBucketVersioningOutput) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return aws.MarshalXML(v, e, start)
}

// GetBucketVersioningInput is undocumented.
type GetBucketVersioningInput struct {
	XMLName xml.Name

	Bucket *string `xml:"-" name:"Bucket"`
}

func (v *GetBucketVersioningInput) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return aws.MarshalXML(v, e, start)
}

// GetBucketWebsiteOutput is undocumented.
type GetBucketWebsiteOutput struct {
	XMLName xml.Name

	ErrorDocument         *ErrorDocument         `xml:"ErrorDocument,omitempty"`
	IndexDocument         *IndexDocument         `xml:"IndexDocument,omitempty"`
	RedirectAllRequestsTo *RedirectAllRequestsTo `xml:"RedirectAllRequestsTo,omitempty"`
	RoutingRules          []RoutingRule          `xml:"RoutingRules>RoutingRule,omitempty"`
}

func (v *GetBucketWebsiteOutput) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return aws.MarshalXML(v, e, start)
}

// GetBucketWebsiteInput is undocumented.
type GetBucketWebsiteInput struct {
	XMLName xml.Name

	Bucket *string `xml:"-" name:"Bucket"`
}

func (v *GetBucketWebsiteInput) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return aws.MarshalXML(v, e, start)
}

// GetObjectACLOutput is undocumented.
type GetObjectACLOutput struct {
	XMLName xml.Name

	Grants []Grant `xml:"AccessControlList>Grant,omitempty"`
	Owner  *Owner  `xml:"Owner,omitempty"`
}

func (v *GetObjectACLOutput) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return aws.MarshalXML(v, e, start)
}

// GetObjectACLInput is undocumented.
type GetObjectACLInput struct {
	XMLName xml.Name

	Bucket    *string `xml:"-" name:"Bucket"`
	Key       *string `xml:"-" name:"Key"`
	VersionID *string `xml:"-" name:"versionId"`
}

func (v *GetObjectACLInput) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return aws.MarshalXML(v, e, start)
}

// GetObjectOutput is undocumented.
type GetObjectOutput struct {
	XMLName xml.Name

	AcceptRanges            *string           `xml:"-" name:"accept-ranges"`
	Body                    io.Reader         `xml:"-"`
	CacheControl            *string           `xml:"-" name:"Cache-Control"`
	ContentDisposition      *string           `xml:"-" name:"Content-Disposition"`
	ContentEncoding         *string           `xml:"-" name:"Content-Encoding"`
	ContentLanguage         *string           `xml:"-" name:"Content-Language"`
	ContentLength           *int64            `xml:"-" name:"Content-Length"`
	ContentType             *string           `xml:"-" name:"Content-Type"`
	DeleteMarker            *bool             `xml:"-" name:"x-amz-delete-marker"`
	ETag                    *string           `xml:"-" name:"ETag"`
	Expiration              *string           `xml:"-" name:"x-amz-expiration"`
	Expires                 time.Time         `xml:"-" name:"Expires"`
	LastModified            time.Time         `xml:"-" name:"Last-Modified"`
	Metadata                map[string]string `xml:"-" name:"x-amz-meta-"`
	MissingMeta             *int              `xml:"-" name:"x-amz-missing-meta"`
	Restore                 *string           `xml:"-" name:"x-amz-restore"`
	SSECustomerAlgorithm    *string           `xml:"-" name:"x-amz-server-side-encryption-customer-algorithm"`
	SSECustomerKeyMD5       *string           `xml:"-" name:"x-amz-server-side-encryption-customer-key-MD5"`
	SSEKMSKeyID             *string           `xml:"-" name:"x-amz-server-side-encryption-aws-kms-key-id"`
	ServerSideEncryption    *string           `xml:"-" name:"x-amz-server-side-encryption"`
	VersionID               *string           `xml:"-" name:"x-amz-version-id"`
	WebsiteRedirectLocation *string           `xml:"-" name:"x-amz-website-redirect-location"`
}

func (v *GetObjectOutput) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return aws.MarshalXML(v, e, start)
}

// GetObjectInput is undocumented.
type GetObjectInput struct {
	XMLName xml.Name

	Bucket                     *string   `xml:"-" name:"Bucket"`
	IfMatch                    *string   `xml:"-" name:"If-Match"`
	IfModifiedSince            time.Time `xml:"-" name:"If-Modified-Since"`
	IfNoneMatch                *string   `xml:"-" name:"If-None-Match"`
	IfUnmodifiedSince          time.Time `xml:"-" name:"If-Unmodified-Since"`
	Key                        *string   `xml:"-" name:"Key"`
	Range                      *string   `xml:"-" name:"Range"`
	ResponseCacheControl       *string   `xml:"-" name:"response-cache-control"`
	ResponseContentDisposition *string   `xml:"-" name:"response-content-disposition"`
	ResponseContentEncoding    *string   `xml:"-" name:"response-content-encoding"`
	ResponseContentLanguage    *string   `xml:"-" name:"response-content-language"`
	ResponseContentType        *string   `xml:"-" name:"response-content-type"`
	ResponseExpires            time.Time `xml:"-" name:"response-expires"`
	SSECustomerAlgorithm       *string   `xml:"-" name:"x-amz-server-side-encryption-customer-algorithm"`
	SSECustomerKey             *string   `xml:"-" name:"x-amz-server-side-encryption-customer-key"`
	SSECustomerKeyMD5          *string   `xml:"-" name:"x-amz-server-side-encryption-customer-key-MD5"`
	VersionID                  *string   `xml:"-" name:"versionId"`
}

func (v *GetObjectInput) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return aws.MarshalXML(v, e, start)
}

// GetObjectTorrentOutput is undocumented.
type GetObjectTorrentOutput struct {
	XMLName xml.Name

	Body io.Reader `xml:"-"`
}

func (v *GetObjectTorrentOutput) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return aws.MarshalXML(v, e, start)
}

// GetObjectTorrentInput is undocumented.
type GetObjectTorrentInput struct {
	XMLName xml.Name

	Bucket *string `xml:"-" name:"Bucket"`
	Key    *string `xml:"-" name:"Key"`
}

func (v *GetObjectTorrentInput) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return aws.MarshalXML(v, e, start)
}

// Grant is undocumented.
type Grant struct {
	XMLName xml.Name

	Grantee    *Grantee `xml:"Grantee,omitempty"`
	Permission *string  `xml:"Permission"`
}

func (v *Grant) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return aws.MarshalXML(v, e, start)
}

// Grantee is undocumented.
type Grantee struct {
	XMLName xml.Name

	DisplayName  *string `xml:"DisplayName"`
	EmailAddress *string `xml:"EmailAddress"`
	ID           *string `xml:"ID"`
	Type         *string `xml:"Type"`
	URI          *string `xml:"URI"`
}

func (v *Grantee) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return aws.MarshalXML(v, e, start)
}

// HeadBucketInput is undocumented.
type HeadBucketInput struct {
	XMLName xml.Name

	Bucket *string `xml:"-" name:"Bucket"`
}

func (v *HeadBucketInput) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return aws.MarshalXML(v, e, start)
}

// HeadObjectOutput is undocumented.
type HeadObjectOutput struct {
	XMLName xml.Name

	AcceptRanges            *string           `xml:"-" name:"accept-ranges"`
	CacheControl            *string           `xml:"-" name:"Cache-Control"`
	ContentDisposition      *string           `xml:"-" name:"Content-Disposition"`
	ContentEncoding         *string           `xml:"-" name:"Content-Encoding"`
	ContentLanguage         *string           `xml:"-" name:"Content-Language"`
	ContentLength           *int64            `xml:"-" name:"Content-Length"`
	ContentType             *string           `xml:"-" name:"Content-Type"`
	DeleteMarker            *bool             `xml:"-" name:"x-amz-delete-marker"`
	ETag                    *string           `xml:"-" name:"ETag"`
	Expiration              *string           `xml:"-" name:"x-amz-expiration"`
	Expires                 time.Time         `xml:"-" name:"Expires"`
	LastModified            time.Time         `xml:"-" name:"Last-Modified"`
	Metadata                map[string]string `xml:"-" name:"x-amz-meta-"`
	MissingMeta             *int              `xml:"-" name:"x-amz-missing-meta"`
	Restore                 *string           `xml:"-" name:"x-amz-restore"`
	SSECustomerAlgorithm    *string           `xml:"-" name:"x-amz-server-side-encryption-customer-algorithm"`
	SSECustomerKeyMD5       *string           `xml:"-" name:"x-amz-server-side-encryption-customer-key-MD5"`
	SSEKMSKeyID             *string           `xml:"-" name:"x-amz-server-side-encryption-aws-kms-key-id"`
	ServerSideEncryption    *string           `xml:"-" name:"x-amz-server-side-encryption"`
	VersionID               *string           `xml:"-" name:"x-amz-version-id"`
	WebsiteRedirectLocation *string           `xml:"-" name:"x-amz-website-redirect-location"`
}

func (v *HeadObjectOutput) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return aws.MarshalXML(v, e, start)
}

// HeadObjectInput is undocumented.
type HeadObjectInput struct {
	XMLName xml.Name

	Bucket               *string   `xml:"-" name:"Bucket"`
	IfMatch              *string   `xml:"-" name:"If-Match"`
	IfModifiedSince      time.Time `xml:"-" name:"If-Modified-Since"`
	IfNoneMatch          *string   `xml:"-" name:"If-None-Match"`
	IfUnmodifiedSince    time.Time `xml:"-" name:"If-Unmodified-Since"`
	Key                  *string   `xml:"-" name:"Key"`
	Range                *string   `xml:"-" name:"Range"`
	SSECustomerAlgorithm *string   `xml:"-" name:"x-amz-server-side-encryption-customer-algorithm"`
	SSECustomerKey       *string   `xml:"-" name:"x-amz-server-side-encryption-customer-key"`
	SSECustomerKeyMD5    *string   `xml:"-" name:"x-amz-server-side-encryption-customer-key-MD5"`
	VersionID            *string   `xml:"-" name:"versionId"`
}

func (v *HeadObjectInput) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return aws.MarshalXML(v, e, start)
}

// IndexDocument is undocumented.
type IndexDocument struct {
	XMLName xml.Name

	Suffix *string `xml:"Suffix"`
}

func (v *IndexDocument) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return aws.MarshalXML(v, e, start)
}

// Initiator is undocumented.
type Initiator struct {
	XMLName xml.Name

	DisplayName *string `xml:"DisplayName"`
	ID          *string `xml:"ID"`
}

func (v *Initiator) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return aws.MarshalXML(v, e, start)
}

// LifecycleConfiguration is undocumented.
type LifecycleConfiguration struct {
	XMLName xml.Name

	Rules []Rule `xml:"Rule,omitempty"`
}

func (v *LifecycleConfiguration) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return aws.MarshalXML(v, e, start)
}

// LifecycleExpiration is undocumented.
type LifecycleExpiration struct {
	XMLName xml.Name

	Date time.Time `xml:"Date"`
	Days *int      `xml:"Days"`
}

func (v *LifecycleExpiration) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return aws.MarshalXML(v, e, start)
}

// ListBucketsOutput is undocumented.
type ListBucketsOutput struct {
	XMLName xml.Name

	Buckets []Bucket `xml:"Buckets>Bucket,omitempty"`
	Owner   *Owner   `xml:"Owner,omitempty"`
}

func (v *ListBucketsOutput) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return aws.MarshalXML(v, e, start)
}

// ListMultipartUploadsOutput is undocumented.
type ListMultipartUploadsOutput struct {
	XMLName xml.Name

	Bucket             *string           `xml:"Bucket"`
	CommonPrefixes     []CommonPrefix    `xml:"CommonPrefixes,omitempty"`
	Delimiter          *string           `xml:"Delimiter"`
	EncodingType       *string           `xml:"EncodingType"`
	IsTruncated        *bool             `xml:"IsTruncated"`
	KeyMarker          *string           `xml:"KeyMarker"`
	MaxUploads         *int              `xml:"MaxUploads"`
	NextKeyMarker      *string           `xml:"NextKeyMarker"`
	NextUploadIDMarker *string           `xml:"NextUploadIdMarker"`
	Prefix             *string           `xml:"Prefix"`
	UploadIDMarker     *string           `xml:"UploadIdMarker"`
	Uploads            []MultipartUpload `xml:"Upload,omitempty"`
}

func (v *ListMultipartUploadsOutput) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return aws.MarshalXML(v, e, start)
}

// ListMultipartUploadsInput is undocumented.
type ListMultipartUploadsInput struct {
	XMLName xml.Name

	Bucket         *string `xml:"-" name:"Bucket"`
	Delimiter      *string `xml:"-" name:"delimiter"`
	EncodingType   *string `xml:"-" name:"encoding-type"`
	KeyMarker      *string `xml:"-" name:"key-marker"`
	MaxUploads     *int    `xml:"-" name:"max-uploads"`
	Prefix         *string `xml:"-" name:"prefix"`
	UploadIDMarker *string `xml:"-" name:"upload-id-marker"`
}

func (v *ListMultipartUploadsInput) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return aws.MarshalXML(v, e, start)
}

// ListObjectVersionsOutput is undocumented.
type ListObjectVersionsOutput struct {
	XMLName xml.Name

	CommonPrefixes      []CommonPrefix      `xml:"CommonPrefixes,omitempty"`
	DeleteMarkers       []DeleteMarkerEntry `xml:"DeleteMarker,omitempty"`
	Delimiter           *string             `xml:"Delimiter"`
	EncodingType        *string             `xml:"EncodingType"`
	IsTruncated         *bool               `xml:"IsTruncated"`
	KeyMarker           *string             `xml:"KeyMarker"`
	MaxKeys             *int                `xml:"MaxKeys"`
	Name                *string             `xml:"Name"`
	NextKeyMarker       *string             `xml:"NextKeyMarker"`
	NextVersionIDMarker *string             `xml:"NextVersionIdMarker"`
	Prefix              *string             `xml:"Prefix"`
	VersionIDMarker     *string             `xml:"VersionIdMarker"`
	Versions            []ObjectVersion     `xml:"Version,omitempty"`
}

func (v *ListObjectVersionsOutput) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return aws.MarshalXML(v, e, start)
}

// ListObjectVersionsInput is undocumented.
type ListObjectVersionsInput struct {
	XMLName xml.Name

	Bucket          *string `xml:"-" name:"Bucket"`
	Delimiter       *string `xml:"-" name:"delimiter"`
	EncodingType    *string `xml:"-" name:"encoding-type"`
	KeyMarker       *string `xml:"-" name:"key-marker"`
	MaxKeys         *int    `xml:"-" name:"max-keys"`
	Prefix          *string `xml:"-" name:"prefix"`
	VersionIDMarker *string `xml:"-" name:"version-id-marker"`
}

func (v *ListObjectVersionsInput) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return aws.MarshalXML(v, e, start)
}

// ListObjectsOutput is undocumented.
type ListObjectsOutput struct {
	XMLName xml.Name

	CommonPrefixes []CommonPrefix `xml:"CommonPrefixes,omitempty"`
	Contents       []Object       `xml:"Contents,omitempty"`
	Delimiter      *string        `xml:"Delimiter"`
	EncodingType   *string        `xml:"EncodingType"`
	IsTruncated    *bool          `xml:"IsTruncated"`
	Marker         *string        `xml:"Marker"`
	MaxKeys        *int           `xml:"MaxKeys"`
	Name           *string        `xml:"Name"`
	NextMarker     *string        `xml:"NextMarker"`
	Prefix         *string        `xml:"Prefix"`
}

func (v *ListObjectsOutput) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return aws.MarshalXML(v, e, start)
}

// ListObjectsInput is undocumented.
type ListObjectsInput struct {
	XMLName xml.Name

	Bucket       *string `xml:"-" name:"Bucket"`
	Delimiter    *string `xml:"-" name:"delimiter"`
	EncodingType *string `xml:"-" name:"encoding-type"`
	Marker       *string `xml:"-" name:"marker"`
	MaxKeys      *int    `xml:"-" name:"max-keys"`
	Prefix       *string `xml:"-" name:"prefix"`
}

func (v *ListObjectsInput) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return aws.MarshalXML(v, e, start)
}

// ListPartsOutput is undocumented.
type ListPartsOutput struct {
	XMLName xml.Name

	Bucket               *string    `xml:"Bucket"`
	Initiator            *Initiator `xml:"Initiator,omitempty"`
	IsTruncated          *bool      `xml:"IsTruncated"`
	Key                  *string    `xml:"Key"`
	MaxParts             *int       `xml:"MaxParts"`
	NextPartNumberMarker *int       `xml:"NextPartNumberMarker"`
	Owner                *Owner     `xml:"Owner,omitempty"`
	PartNumberMarker     *int       `xml:"PartNumberMarker"`
	Parts                []Part     `xml:"Part,omitempty"`
	StorageClass         *string    `xml:"StorageClass"`
	UploadID             *string    `xml:"UploadId"`
}

func (v *ListPartsOutput) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return aws.MarshalXML(v, e, start)
}

// ListPartsInput is undocumented.
type ListPartsInput struct {
	XMLName xml.Name

	Bucket           *string `xml:"-" name:"Bucket"`
	Key              *string `xml:"-" name:"Key"`
	MaxParts         *int    `xml:"-" name:"max-parts"`
	PartNumberMarker *int    `xml:"-" name:"part-number-marker"`
	UploadID         *string `xml:"-" name:"uploadId"`
}

func (v *ListPartsInput) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return aws.MarshalXML(v, e, start)
}

// LoggingEnabled is undocumented.
type LoggingEnabled struct {
	XMLName xml.Name

	TargetBucket *string       `xml:"TargetBucket"`
	TargetGrants []TargetGrant `xml:"TargetGrants>Grant,omitempty"`
	TargetPrefix *string       `xml:"TargetPrefix"`
}

func (v *LoggingEnabled) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return aws.MarshalXML(v, e, start)
}

// MultipartUpload is undocumented.
type MultipartUpload struct {
	XMLName xml.Name

	Initiated    time.Time  `xml:"Initiated"`
	Initiator    *Initiator `xml:"Initiator,omitempty"`
	Key          *string    `xml:"Key"`
	Owner        *Owner     `xml:"Owner,omitempty"`
	StorageClass *string    `xml:"StorageClass"`
	UploadID     *string    `xml:"UploadId"`
}

func (v *MultipartUpload) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return aws.MarshalXML(v, e, start)
}

// NoncurrentVersionExpiration is undocumented.
type NoncurrentVersionExpiration struct {
	XMLName xml.Name

	NoncurrentDays *int `xml:"NoncurrentDays"`
}

func (v *NoncurrentVersionExpiration) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return aws.MarshalXML(v, e, start)
}

// NoncurrentVersionTransition is undocumented.
type NoncurrentVersionTransition struct {
	XMLName xml.Name

	NoncurrentDays *int    `xml:"NoncurrentDays"`
	StorageClass   *string `xml:"StorageClass"`
}

func (v *NoncurrentVersionTransition) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return aws.MarshalXML(v, e, start)
}

// NotificationConfiguration is undocumented.
type NotificationConfiguration struct {
	XMLName xml.Name

	CloudFunctionConfiguration *CloudFunctionConfiguration `xml:"CloudFunctionConfiguration,omitempty"`
	QueueConfiguration         *QueueConfiguration         `xml:"QueueConfiguration,omitempty"`
	TopicConfiguration         *TopicConfiguration         `xml:"TopicConfiguration,omitempty"`
}

func (v *NotificationConfiguration) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return aws.MarshalXML(v, e, start)
}

// Object is undocumented.
type Object struct {
	XMLName xml.Name

	ETag         *string   `xml:"ETag"`
	Key          *string   `xml:"Key"`
	LastModified time.Time `xml:"LastModified"`
	Owner        *Owner    `xml:"Owner,omitempty"`
	Size         *int64    `xml:"Size"`
	StorageClass *string   `xml:"StorageClass"`
}

func (v *Object) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return aws.MarshalXML(v, e, start)
}

// ObjectIdentifier is undocumented.
type ObjectIdentifier struct {
	XMLName xml.Name

	Key       *string `xml:"Key"`
	VersionID *string `xml:"VersionId"`
}

func (v *ObjectIdentifier) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return aws.MarshalXML(v, e, start)
}

// ObjectVersion is undocumented.
type ObjectVersion struct {
	XMLName xml.Name

	ETag         *string   `xml:"ETag"`
	IsLatest     *bool     `xml:"IsLatest"`
	Key          *string   `xml:"Key"`
	LastModified time.Time `xml:"LastModified"`
	Owner        *Owner    `xml:"Owner,omitempty"`
	Size         *int64    `xml:"Size"`
	StorageClass *string   `xml:"StorageClass"`
	VersionID    *string   `xml:"VersionId"`
}

func (v *ObjectVersion) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return aws.MarshalXML(v, e, start)
}

// Owner is undocumented.
type Owner struct {
	XMLName xml.Name

	DisplayName *string `xml:"DisplayName"`
	ID          *string `xml:"ID"`
}

func (v *Owner) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return aws.MarshalXML(v, e, start)
}

// Part is undocumented.
type Part struct {
	XMLName xml.Name

	ETag         *string   `xml:"ETag"`
	LastModified time.Time `xml:"LastModified"`
	PartNumber   *int      `xml:"PartNumber"`
	Size         *int64    `xml:"Size"`
}

func (v *Part) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return aws.MarshalXML(v, e, start)
}

// PutBucketACLInput is undocumented.
type PutBucketACLInput struct {
	XMLName xml.Name

	ACL                 *string              `xml:"-" name:"x-amz-acl"`
	AccessControlPolicy *AccessControlPolicy `xml:"AccessControlPolicy,omitempty"`
	Bucket              *string              `xml:"-" name:"Bucket"`
	ContentMD5          *string              `xml:"-" name:"Content-MD5"`
	GrantFullControl    *string              `xml:"-" name:"x-amz-grant-full-control"`
	GrantRead           *string              `xml:"-" name:"x-amz-grant-read"`
	GrantReadACP        *string              `xml:"-" name:"x-amz-grant-read-acp"`
	GrantWrite          *string              `xml:"-" name:"x-amz-grant-write"`
	GrantWriteACP       *string              `xml:"-" name:"x-amz-grant-write-acp"`
}

func (v *PutBucketACLInput) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return aws.MarshalXML(v, e, start)
}

// PutBucketCORSInput is undocumented.
type PutBucketCORSInput struct {
	XMLName xml.Name

	Bucket            *string            `xml:"-" name:"Bucket"`
	CORSConfiguration *CORSConfiguration `xml:"CORSConfiguration,omitempty"`
	ContentMD5        *string            `xml:"-" name:"Content-MD5"`
}

func (v *PutBucketCORSInput) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return aws.MarshalXML(v, e, start)
}

// PutBucketLifecycleInput is undocumented.
type PutBucketLifecycleInput struct {
	XMLName xml.Name

	Bucket                 *string                 `xml:"-" name:"Bucket"`
	ContentMD5             *string                 `xml:"-" name:"Content-MD5"`
	LifecycleConfiguration *LifecycleConfiguration `xml:"LifecycleConfiguration,omitempty"`
}

func (v *PutBucketLifecycleInput) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return aws.MarshalXML(v, e, start)
}

// PutBucketLoggingInput is undocumented.
type PutBucketLoggingInput struct {
	XMLName xml.Name

	Bucket              *string              `xml:"-" name:"Bucket"`
	BucketLoggingStatus *BucketLoggingStatus `xml:"BucketLoggingStatus,omitempty"`
	ContentMD5          *string              `xml:"-" name:"Content-MD5"`
}

func (v *PutBucketLoggingInput) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return aws.MarshalXML(v, e, start)
}

// PutBucketNotificationInput is undocumented.
type PutBucketNotificationInput struct {
	XMLName xml.Name

	Bucket                    *string                    `xml:"-" name:"Bucket"`
	ContentMD5                *string                    `xml:"-" name:"Content-MD5"`
	NotificationConfiguration *NotificationConfiguration `xml:"NotificationConfiguration,omitempty"`
}

func (v *PutBucketNotificationInput) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return aws.MarshalXML(v, e, start)
}

// PutBucketPolicyInput is undocumented.
type PutBucketPolicyInput struct {
	XMLName xml.Name

	Bucket     *string `xml:"-" name:"Bucket"`
	ContentMD5 *string `xml:"-" name:"Content-MD5"`
	Policy     *string `xml:"Policy"`
}

func (v *PutBucketPolicyInput) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return aws.MarshalXML(v, e, start)
}

// PutBucketRequestPaymentInput is undocumented.
type PutBucketRequestPaymentInput struct {
	XMLName xml.Name

	Bucket                      *string                      `xml:"-" name:"Bucket"`
	ContentMD5                  *string                      `xml:"-" name:"Content-MD5"`
	RequestPaymentConfiguration *RequestPaymentConfiguration `xml:"RequestPaymentConfiguration,omitempty"`
}

func (v *PutBucketRequestPaymentInput) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return aws.MarshalXML(v, e, start)
}

// PutBucketTaggingInput is undocumented.
type PutBucketTaggingInput struct {
	XMLName xml.Name

	Bucket     *string  `xml:"-" name:"Bucket"`
	ContentMD5 *string  `xml:"-" name:"Content-MD5"`
	Tagging    *Tagging `xml:"Tagging,omitempty"`
}

func (v *PutBucketTaggingInput) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return aws.MarshalXML(v, e, start)
}

// PutBucketVersioningInput is undocumented.
type PutBucketVersioningInput struct {
	XMLName xml.Name

	Bucket                  *string                  `xml:"-" name:"Bucket"`
	ContentMD5              *string                  `xml:"-" name:"Content-MD5"`
	MFA                     *string                  `xml:"-" name:"x-amz-mfa"`
	VersioningConfiguration *VersioningConfiguration `xml:"VersioningConfiguration,omitempty"`
}

func (v *PutBucketVersioningInput) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return aws.MarshalXML(v, e, start)
}

// PutBucketWebsiteInput is undocumented.
type PutBucketWebsiteInput struct {
	XMLName xml.Name

	Bucket               *string               `xml:"-" name:"Bucket"`
	ContentMD5           *string               `xml:"-" name:"Content-MD5"`
	WebsiteConfiguration *WebsiteConfiguration `xml:"WebsiteConfiguration,omitempty"`
}

func (v *PutBucketWebsiteInput) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return aws.MarshalXML(v, e, start)
}

// PutObjectACLInput is undocumented.
type PutObjectACLInput struct {
	XMLName xml.Name

	ACL                 *string              `xml:"-" name:"x-amz-acl"`
	AccessControlPolicy *AccessControlPolicy `xml:"AccessControlPolicy,omitempty"`
	Bucket              *string              `xml:"-" name:"Bucket"`
	ContentMD5          *string              `xml:"-" name:"Content-MD5"`
	GrantFullControl    *string              `xml:"-" name:"x-amz-grant-full-control"`
	GrantRead           *string              `xml:"-" name:"x-amz-grant-read"`
	GrantReadACP        *string              `xml:"-" name:"x-amz-grant-read-acp"`
	GrantWrite          *string              `xml:"-" name:"x-amz-grant-write"`
	GrantWriteACP       *string              `xml:"-" name:"x-amz-grant-write-acp"`
	Key                 *string              `xml:"-" name:"Key"`
}

func (v *PutObjectACLInput) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return aws.MarshalXML(v, e, start)
}

// PutObjectOutput is undocumented.
type PutObjectOutput struct {
	XMLName xml.Name

	ETag                 *string `xml:"-" name:"ETag"`
	Expiration           *string `xml:"-" name:"x-amz-expiration"`
	SSECustomerAlgorithm *string `xml:"-" name:"x-amz-server-side-encryption-customer-algorithm"`
	SSECustomerKeyMD5    *string `xml:"-" name:"x-amz-server-side-encryption-customer-key-MD5"`
	SSEKMSKeyID          *string `xml:"-" name:"x-amz-server-side-encryption-aws-kms-key-id"`
	ServerSideEncryption *string `xml:"-" name:"x-amz-server-side-encryption"`
	VersionID            *string `xml:"-" name:"x-amz-version-id"`
}

func (v *PutObjectOutput) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return aws.MarshalXML(v, e, start)
}

// PutObjectInput is undocumented.
type PutObjectInput struct {
	XMLName xml.Name

	ACL                     *string           `xml:"-" name:"x-amz-acl"`
	Body                    io.Reader         `xml:"-"`
	Bucket                  *string           `xml:"-" name:"Bucket"`
	CacheControl            *string           `xml:"-" name:"Cache-Control"`
	ContentDisposition      *string           `xml:"-" name:"Content-Disposition"`
	ContentEncoding         *string           `xml:"-" name:"Content-Encoding"`
	ContentLanguage         *string           `xml:"-" name:"Content-Language"`
	ContentLength           *int64            `xml:"-" name:"Content-Length"`
	ContentMD5              *string           `xml:"-" name:"Content-MD5"`
	ContentType             *string           `xml:"-" name:"Content-Type"`
	Expires                 time.Time         `xml:"-" name:"Expires"`
	GrantFullControl        *string           `xml:"-" name:"x-amz-grant-full-control"`
	GrantRead               *string           `xml:"-" name:"x-amz-grant-read"`
	GrantReadACP            *string           `xml:"-" name:"x-amz-grant-read-acp"`
	GrantWriteACP           *string           `xml:"-" name:"x-amz-grant-write-acp"`
	Key                     *string           `xml:"-" name:"Key"`
	Metadata                map[string]string `xml:"-" name:"x-amz-meta-"`
	SSECustomerAlgorithm    *string           `xml:"-" name:"x-amz-server-side-encryption-customer-algorithm"`
	SSECustomerKey          *string           `xml:"-" name:"x-amz-server-side-encryption-customer-key"`
	SSECustomerKeyMD5       *string           `xml:"-" name:"x-amz-server-side-encryption-customer-key-MD5"`
	SSEKMSKeyID             *string           `xml:"-" name:"x-amz-server-side-encryption-aws-kms-key-id"`
	ServerSideEncryption    *string           `xml:"-" name:"x-amz-server-side-encryption"`
	StorageClass            *string           `xml:"-" name:"x-amz-storage-class"`
	WebsiteRedirectLocation *string           `xml:"-" name:"x-amz-website-redirect-location"`
}

func (v *PutObjectInput) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return aws.MarshalXML(v, e, start)
}

// QueueConfiguration is undocumented.
type QueueConfiguration struct {
	XMLName xml.Name

	Event  *string  `xml:"Event"`
	Events []string `xml:"Event,omitempty"`
	ID     *string  `xml:"Id"`
	Queue  *string  `xml:"Queue"`
}

func (v *QueueConfiguration) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return aws.MarshalXML(v, e, start)
}

// Redirect is undocumented.
type Redirect struct {
	XMLName xml.Name

	HostName             *string `xml:"HostName"`
	HTTPRedirectCode     *string `xml:"HttpRedirectCode"`
	Protocol             *string `xml:"Protocol"`
	ReplaceKeyPrefixWith *string `xml:"ReplaceKeyPrefixWith"`
	ReplaceKeyWith       *string `xml:"ReplaceKeyWith"`
}

func (v *Redirect) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return aws.MarshalXML(v, e, start)
}

// RedirectAllRequestsTo is undocumented.
type RedirectAllRequestsTo struct {
	XMLName xml.Name

	HostName *string `xml:"HostName"`
	Protocol *string `xml:"Protocol"`
}

func (v *RedirectAllRequestsTo) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return aws.MarshalXML(v, e, start)
}

// RequestPaymentConfiguration is undocumented.
type RequestPaymentConfiguration struct {
	XMLName xml.Name

	Payer *string `xml:"Payer"`
}

func (v *RequestPaymentConfiguration) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return aws.MarshalXML(v, e, start)
}

// RestoreObjectInput is undocumented.
type RestoreObjectInput struct {
	XMLName xml.Name

	Bucket         *string         `xml:"-" name:"Bucket"`
	Key            *string         `xml:"-" name:"Key"`
	RestoreRequest *RestoreRequest `xml:"RestoreRequest,omitempty"`
	VersionID      *string         `xml:"-" name:"versionId"`
}

func (v *RestoreObjectInput) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return aws.MarshalXML(v, e, start)
}

// RestoreRequest is undocumented.
type RestoreRequest struct {
	XMLName xml.Name

	Days *int `xml:"Days"`
}

func (v *RestoreRequest) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return aws.MarshalXML(v, e, start)
}

// RoutingRule is undocumented.
type RoutingRule struct {
	XMLName xml.Name

	Condition *Condition `xml:"Condition,omitempty"`
	Redirect  *Redirect  `xml:"Redirect,omitempty"`
}

func (v *RoutingRule) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return aws.MarshalXML(v, e, start)
}

// Rule is undocumented.
type Rule struct {
	XMLName xml.Name

	Expiration                  *LifecycleExpiration         `xml:"Expiration,omitempty"`
	ID                          *string                      `xml:"ID"`
	NoncurrentVersionExpiration *NoncurrentVersionExpiration `xml:"NoncurrentVersionExpiration,omitempty"`
	NoncurrentVersionTransition *NoncurrentVersionTransition `xml:"NoncurrentVersionTransition,omitempty"`
	Prefix                      *string                      `xml:"Prefix"`
	Status                      *string                      `xml:"Status"`
	Transition                  *Transition                  `xml:"Transition,omitempty"`
}

func (v *Rule) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return aws.MarshalXML(v, e, start)
}

// Tag is undocumented.
type Tag struct {
	XMLName xml.Name

	Key   *string `xml:"Key"`
	Value *string `xml:"Value"`
}

func (v *Tag) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return aws.MarshalXML(v, e, start)
}

// Tagging is undocumented.
type Tagging struct {
	XMLName xml.Name

	TagSet []Tag `xml:"TagSet>Tag,omitempty"`
}

func (v *Tagging) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return aws.MarshalXML(v, e, start)
}

// TargetGrant is undocumented.
type TargetGrant struct {
	XMLName xml.Name

	Grantee    *Grantee `xml:"Grantee,omitempty"`
	Permission *string  `xml:"Permission"`
}

func (v *TargetGrant) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return aws.MarshalXML(v, e, start)
}

// TopicConfiguration is undocumented.
type TopicConfiguration struct {
	XMLName xml.Name

	Event  *string  `xml:"Event"`
	Events []string `xml:"Event,omitempty"`
	ID     *string  `xml:"Id"`
	Topic  *string  `xml:"Topic"`
}

func (v *TopicConfiguration) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return aws.MarshalXML(v, e, start)
}

// Transition is undocumented.
type Transition struct {
	XMLName xml.Name

	Date         time.Time `xml:"Date"`
	Days         *int      `xml:"Days"`
	StorageClass *string   `xml:"StorageClass"`
}

func (v *Transition) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return aws.MarshalXML(v, e, start)
}

// UploadPartCopyOutput is undocumented.
type UploadPartCopyOutput struct {
	XMLName xml.Name

	CopyPartResult       *CopyPartResult `xml:"CopyPartResult,omitempty"`
	CopySourceVersionID  *string         `xml:"-" name:"x-amz-copy-source-version-id"`
	SSECustomerAlgorithm *string         `xml:"-" name:"x-amz-server-side-encryption-customer-algorithm"`
	SSECustomerKeyMD5    *string         `xml:"-" name:"x-amz-server-side-encryption-customer-key-MD5"`
	SSEKMSKeyID          *string         `xml:"-" name:"x-amz-server-side-encryption-aws-kms-key-id"`
	ServerSideEncryption *string         `xml:"-" name:"x-amz-server-side-encryption"`
}

func (v *UploadPartCopyOutput) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return aws.MarshalXML(v, e, start)
}

// UploadPartCopyInput is undocumented.
type UploadPartCopyInput struct {
	XMLName xml.Name

	Bucket                         *string   `xml:"-" name:"Bucket"`
	CopySource                     *string   `xml:"-" name:"x-amz-copy-source"`
	CopySourceIfMatch              *string   `xml:"-" name:"x-amz-copy-source-if-match"`
	CopySourceIfModifiedSince      time.Time `xml:"-" name:"x-amz-copy-source-if-modified-since"`
	CopySourceIfNoneMatch          *string   `xml:"-" name:"x-amz-copy-source-if-none-match"`
	CopySourceIfUnmodifiedSince    time.Time `xml:"-" name:"x-amz-copy-source-if-unmodified-since"`
	CopySourceRange                *string   `xml:"-" name:"x-amz-copy-source-range"`
	CopySourceSSECustomerAlgorithm *string   `xml:"-" name:"x-amz-copy-source-server-side-encryption-customer-algorithm"`
	CopySourceSSECustomerKey       *string   `xml:"-" name:"x-amz-copy-source-server-side-encryption-customer-key"`
	CopySourceSSECustomerKeyMD5    *string   `xml:"-" name:"x-amz-copy-source-server-side-encryption-customer-key-MD5"`
	Key                            *string   `xml:"-" name:"Key"`
	PartNumber                     *int      `xml:"-" name:"partNumber"`
	SSECustomerAlgorithm           *string   `xml:"-" name:"x-amz-server-side-encryption-customer-algorithm"`
	SSECustomerKey                 *string   `xml:"-" name:"x-amz-server-side-encryption-customer-key"`
	SSECustomerKeyMD5              *string   `xml:"-" name:"x-amz-server-side-encryption-customer-key-MD5"`
	UploadID                       *string   `xml:"-" name:"uploadId"`
}

func (v *UploadPartCopyInput) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return aws.MarshalXML(v, e, start)
}

// UploadPartOutput is undocumented.
type UploadPartOutput struct {
	XMLName xml.Name

	ETag                 *string `xml:"-" name:"ETag"`
	SSECustomerAlgorithm *string `xml:"-" name:"x-amz-server-side-encryption-customer-algorithm"`
	SSECustomerKeyMD5    *string `xml:"-" name:"x-amz-server-side-encryption-customer-key-MD5"`
	SSEKMSKeyID          *string `xml:"-" name:"x-amz-server-side-encryption-aws-kms-key-id"`
	ServerSideEncryption *string `xml:"-" name:"x-amz-server-side-encryption"`
}

func (v *UploadPartOutput) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return aws.MarshalXML(v, e, start)
}

// UploadPartInput is undocumented.
type UploadPartInput struct {
	XMLName xml.Name

	Body                 io.Reader `xml:"-"`
	Bucket               *string   `xml:"-" name:"Bucket"`
	ContentLength        *int64    `xml:"-" name:"Content-Length"`
	ContentMD5           *string   `xml:"-" name:"Content-MD5"`
	Key                  *string   `xml:"-" name:"Key"`
	PartNumber           *int      `xml:"-" name:"partNumber"`
	SSECustomerAlgorithm *string   `xml:"-" name:"x-amz-server-side-encryption-customer-algorithm"`
	SSECustomerKey       *string   `xml:"-" name:"x-amz-server-side-encryption-customer-key"`
	SSECustomerKeyMD5    *string   `xml:"-" name:"x-amz-server-side-encryption-customer-key-MD5"`
	UploadID             *string   `xml:"-" name:"uploadId"`
}

func (v *UploadPartInput) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return aws.MarshalXML(v, e, start)
}

// VersioningConfiguration is undocumented.
type VersioningConfiguration struct {
	XMLName xml.Name

	MFADelete *string `xml:"MfaDelete"`
	Status    *string `xml:"Status"`
}

func (v *VersioningConfiguration) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return aws.MarshalXML(v, e, start)
}

// WebsiteConfiguration is undocumented.
type WebsiteConfiguration struct {
	XMLName xml.Name

	ErrorDocument         *ErrorDocument         `xml:"ErrorDocument,omitempty"`
	IndexDocument         *IndexDocument         `xml:"IndexDocument,omitempty"`
	RedirectAllRequestsTo *RedirectAllRequestsTo `xml:"RedirectAllRequestsTo,omitempty"`
	RoutingRules          []RoutingRule          `xml:"RoutingRules>RoutingRule,omitempty"`
}

func (v *WebsiteConfiguration) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return aws.MarshalXML(v, e, start)
}

// avoid errors if the packages aren't referenced
var _ time.Time

var _ io.Reader
