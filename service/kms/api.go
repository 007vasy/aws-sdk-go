package kms

// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.

import (
	"time"

	"github.com/awslabs/aws-sdk-go/aws"
)

// CreateAliasRequest generates a request for the CreateAlias operation.
func (c *KMS) CreateAliasRequest(input *CreateAliasInput) (req *aws.Request, output *CreateAliasOutput) {
	if opCreateAlias == nil {
		opCreateAlias = &aws.Operation{
			Name:       "CreateAlias",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opCreateAlias, input, output)
	output = &CreateAliasOutput{}
	req.Data = output
	return
}

func (c *KMS) CreateAlias(input *CreateAliasInput) (output *CreateAliasOutput, err error) {
	req, out := c.CreateAliasRequest(input)
	output = out
	err = req.Send()
	return
}

var opCreateAlias *aws.Operation

// CreateGrantRequest generates a request for the CreateGrant operation.
func (c *KMS) CreateGrantRequest(input *CreateGrantInput) (req *aws.Request, output *CreateGrantOutput) {
	if opCreateGrant == nil {
		opCreateGrant = &aws.Operation{
			Name:       "CreateGrant",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opCreateGrant, input, output)
	output = &CreateGrantOutput{}
	req.Data = output
	return
}

func (c *KMS) CreateGrant(input *CreateGrantInput) (output *CreateGrantOutput, err error) {
	req, out := c.CreateGrantRequest(input)
	output = out
	err = req.Send()
	return
}

var opCreateGrant *aws.Operation

// CreateKeyRequest generates a request for the CreateKey operation.
func (c *KMS) CreateKeyRequest(input *CreateKeyInput) (req *aws.Request, output *CreateKeyOutput) {
	if opCreateKey == nil {
		opCreateKey = &aws.Operation{
			Name:       "CreateKey",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opCreateKey, input, output)
	output = &CreateKeyOutput{}
	req.Data = output
	return
}

func (c *KMS) CreateKey(input *CreateKeyInput) (output *CreateKeyOutput, err error) {
	req, out := c.CreateKeyRequest(input)
	output = out
	err = req.Send()
	return
}

var opCreateKey *aws.Operation

// DecryptRequest generates a request for the Decrypt operation.
func (c *KMS) DecryptRequest(input *DecryptInput) (req *aws.Request, output *DecryptOutput) {
	if opDecrypt == nil {
		opDecrypt = &aws.Operation{
			Name:       "Decrypt",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDecrypt, input, output)
	output = &DecryptOutput{}
	req.Data = output
	return
}

func (c *KMS) Decrypt(input *DecryptInput) (output *DecryptOutput, err error) {
	req, out := c.DecryptRequest(input)
	output = out
	err = req.Send()
	return
}

var opDecrypt *aws.Operation

// DeleteAliasRequest generates a request for the DeleteAlias operation.
func (c *KMS) DeleteAliasRequest(input *DeleteAliasInput) (req *aws.Request, output *DeleteAliasOutput) {
	if opDeleteAlias == nil {
		opDeleteAlias = &aws.Operation{
			Name:       "DeleteAlias",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDeleteAlias, input, output)
	output = &DeleteAliasOutput{}
	req.Data = output
	return
}

func (c *KMS) DeleteAlias(input *DeleteAliasInput) (output *DeleteAliasOutput, err error) {
	req, out := c.DeleteAliasRequest(input)
	output = out
	err = req.Send()
	return
}

var opDeleteAlias *aws.Operation

// DescribeKeyRequest generates a request for the DescribeKey operation.
func (c *KMS) DescribeKeyRequest(input *DescribeKeyInput) (req *aws.Request, output *DescribeKeyOutput) {
	if opDescribeKey == nil {
		opDescribeKey = &aws.Operation{
			Name:       "DescribeKey",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDescribeKey, input, output)
	output = &DescribeKeyOutput{}
	req.Data = output
	return
}

func (c *KMS) DescribeKey(input *DescribeKeyInput) (output *DescribeKeyOutput, err error) {
	req, out := c.DescribeKeyRequest(input)
	output = out
	err = req.Send()
	return
}

var opDescribeKey *aws.Operation

// DisableKeyRequest generates a request for the DisableKey operation.
func (c *KMS) DisableKeyRequest(input *DisableKeyInput) (req *aws.Request, output *DisableKeyOutput) {
	if opDisableKey == nil {
		opDisableKey = &aws.Operation{
			Name:       "DisableKey",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDisableKey, input, output)
	output = &DisableKeyOutput{}
	req.Data = output
	return
}

func (c *KMS) DisableKey(input *DisableKeyInput) (output *DisableKeyOutput, err error) {
	req, out := c.DisableKeyRequest(input)
	output = out
	err = req.Send()
	return
}

var opDisableKey *aws.Operation

// DisableKeyRotationRequest generates a request for the DisableKeyRotation operation.
func (c *KMS) DisableKeyRotationRequest(input *DisableKeyRotationInput) (req *aws.Request, output *DisableKeyRotationOutput) {
	if opDisableKeyRotation == nil {
		opDisableKeyRotation = &aws.Operation{
			Name:       "DisableKeyRotation",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDisableKeyRotation, input, output)
	output = &DisableKeyRotationOutput{}
	req.Data = output
	return
}

func (c *KMS) DisableKeyRotation(input *DisableKeyRotationInput) (output *DisableKeyRotationOutput, err error) {
	req, out := c.DisableKeyRotationRequest(input)
	output = out
	err = req.Send()
	return
}

var opDisableKeyRotation *aws.Operation

// EnableKeyRequest generates a request for the EnableKey operation.
func (c *KMS) EnableKeyRequest(input *EnableKeyInput) (req *aws.Request, output *EnableKeyOutput) {
	if opEnableKey == nil {
		opEnableKey = &aws.Operation{
			Name:       "EnableKey",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opEnableKey, input, output)
	output = &EnableKeyOutput{}
	req.Data = output
	return
}

func (c *KMS) EnableKey(input *EnableKeyInput) (output *EnableKeyOutput, err error) {
	req, out := c.EnableKeyRequest(input)
	output = out
	err = req.Send()
	return
}

var opEnableKey *aws.Operation

// EnableKeyRotationRequest generates a request for the EnableKeyRotation operation.
func (c *KMS) EnableKeyRotationRequest(input *EnableKeyRotationInput) (req *aws.Request, output *EnableKeyRotationOutput) {
	if opEnableKeyRotation == nil {
		opEnableKeyRotation = &aws.Operation{
			Name:       "EnableKeyRotation",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opEnableKeyRotation, input, output)
	output = &EnableKeyRotationOutput{}
	req.Data = output
	return
}

func (c *KMS) EnableKeyRotation(input *EnableKeyRotationInput) (output *EnableKeyRotationOutput, err error) {
	req, out := c.EnableKeyRotationRequest(input)
	output = out
	err = req.Send()
	return
}

var opEnableKeyRotation *aws.Operation

// EncryptRequest generates a request for the Encrypt operation.
func (c *KMS) EncryptRequest(input *EncryptInput) (req *aws.Request, output *EncryptOutput) {
	if opEncrypt == nil {
		opEncrypt = &aws.Operation{
			Name:       "Encrypt",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opEncrypt, input, output)
	output = &EncryptOutput{}
	req.Data = output
	return
}

func (c *KMS) Encrypt(input *EncryptInput) (output *EncryptOutput, err error) {
	req, out := c.EncryptRequest(input)
	output = out
	err = req.Send()
	return
}

var opEncrypt *aws.Operation

// GenerateDataKeyRequest generates a request for the GenerateDataKey operation.
func (c *KMS) GenerateDataKeyRequest(input *GenerateDataKeyInput) (req *aws.Request, output *GenerateDataKeyOutput) {
	if opGenerateDataKey == nil {
		opGenerateDataKey = &aws.Operation{
			Name:       "GenerateDataKey",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opGenerateDataKey, input, output)
	output = &GenerateDataKeyOutput{}
	req.Data = output
	return
}

func (c *KMS) GenerateDataKey(input *GenerateDataKeyInput) (output *GenerateDataKeyOutput, err error) {
	req, out := c.GenerateDataKeyRequest(input)
	output = out
	err = req.Send()
	return
}

var opGenerateDataKey *aws.Operation

// GenerateDataKeyWithoutPlaintextRequest generates a request for the GenerateDataKeyWithoutPlaintext operation.
func (c *KMS) GenerateDataKeyWithoutPlaintextRequest(input *GenerateDataKeyWithoutPlaintextInput) (req *aws.Request, output *GenerateDataKeyWithoutPlaintextOutput) {
	if opGenerateDataKeyWithoutPlaintext == nil {
		opGenerateDataKeyWithoutPlaintext = &aws.Operation{
			Name:       "GenerateDataKeyWithoutPlaintext",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opGenerateDataKeyWithoutPlaintext, input, output)
	output = &GenerateDataKeyWithoutPlaintextOutput{}
	req.Data = output
	return
}

func (c *KMS) GenerateDataKeyWithoutPlaintext(input *GenerateDataKeyWithoutPlaintextInput) (output *GenerateDataKeyWithoutPlaintextOutput, err error) {
	req, out := c.GenerateDataKeyWithoutPlaintextRequest(input)
	output = out
	err = req.Send()
	return
}

var opGenerateDataKeyWithoutPlaintext *aws.Operation

// GenerateRandomRequest generates a request for the GenerateRandom operation.
func (c *KMS) GenerateRandomRequest(input *GenerateRandomInput) (req *aws.Request, output *GenerateRandomOutput) {
	if opGenerateRandom == nil {
		opGenerateRandom = &aws.Operation{
			Name:       "GenerateRandom",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opGenerateRandom, input, output)
	output = &GenerateRandomOutput{}
	req.Data = output
	return
}

func (c *KMS) GenerateRandom(input *GenerateRandomInput) (output *GenerateRandomOutput, err error) {
	req, out := c.GenerateRandomRequest(input)
	output = out
	err = req.Send()
	return
}

var opGenerateRandom *aws.Operation

// GetKeyPolicyRequest generates a request for the GetKeyPolicy operation.
func (c *KMS) GetKeyPolicyRequest(input *GetKeyPolicyInput) (req *aws.Request, output *GetKeyPolicyOutput) {
	if opGetKeyPolicy == nil {
		opGetKeyPolicy = &aws.Operation{
			Name:       "GetKeyPolicy",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opGetKeyPolicy, input, output)
	output = &GetKeyPolicyOutput{}
	req.Data = output
	return
}

func (c *KMS) GetKeyPolicy(input *GetKeyPolicyInput) (output *GetKeyPolicyOutput, err error) {
	req, out := c.GetKeyPolicyRequest(input)
	output = out
	err = req.Send()
	return
}

var opGetKeyPolicy *aws.Operation

// GetKeyRotationStatusRequest generates a request for the GetKeyRotationStatus operation.
func (c *KMS) GetKeyRotationStatusRequest(input *GetKeyRotationStatusInput) (req *aws.Request, output *GetKeyRotationStatusOutput) {
	if opGetKeyRotationStatus == nil {
		opGetKeyRotationStatus = &aws.Operation{
			Name:       "GetKeyRotationStatus",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opGetKeyRotationStatus, input, output)
	output = &GetKeyRotationStatusOutput{}
	req.Data = output
	return
}

func (c *KMS) GetKeyRotationStatus(input *GetKeyRotationStatusInput) (output *GetKeyRotationStatusOutput, err error) {
	req, out := c.GetKeyRotationStatusRequest(input)
	output = out
	err = req.Send()
	return
}

var opGetKeyRotationStatus *aws.Operation

// ListAliasesRequest generates a request for the ListAliases operation.
func (c *KMS) ListAliasesRequest(input *ListAliasesInput) (req *aws.Request, output *ListAliasesOutput) {
	if opListAliases == nil {
		opListAliases = &aws.Operation{
			Name:       "ListAliases",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opListAliases, input, output)
	output = &ListAliasesOutput{}
	req.Data = output
	return
}

func (c *KMS) ListAliases(input *ListAliasesInput) (output *ListAliasesOutput, err error) {
	req, out := c.ListAliasesRequest(input)
	output = out
	err = req.Send()
	return
}

var opListAliases *aws.Operation

// ListGrantsRequest generates a request for the ListGrants operation.
func (c *KMS) ListGrantsRequest(input *ListGrantsInput) (req *aws.Request, output *ListGrantsOutput) {
	if opListGrants == nil {
		opListGrants = &aws.Operation{
			Name:       "ListGrants",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opListGrants, input, output)
	output = &ListGrantsOutput{}
	req.Data = output
	return
}

func (c *KMS) ListGrants(input *ListGrantsInput) (output *ListGrantsOutput, err error) {
	req, out := c.ListGrantsRequest(input)
	output = out
	err = req.Send()
	return
}

var opListGrants *aws.Operation

// ListKeyPoliciesRequest generates a request for the ListKeyPolicies operation.
func (c *KMS) ListKeyPoliciesRequest(input *ListKeyPoliciesInput) (req *aws.Request, output *ListKeyPoliciesOutput) {
	if opListKeyPolicies == nil {
		opListKeyPolicies = &aws.Operation{
			Name:       "ListKeyPolicies",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opListKeyPolicies, input, output)
	output = &ListKeyPoliciesOutput{}
	req.Data = output
	return
}

func (c *KMS) ListKeyPolicies(input *ListKeyPoliciesInput) (output *ListKeyPoliciesOutput, err error) {
	req, out := c.ListKeyPoliciesRequest(input)
	output = out
	err = req.Send()
	return
}

var opListKeyPolicies *aws.Operation

// ListKeysRequest generates a request for the ListKeys operation.
func (c *KMS) ListKeysRequest(input *ListKeysInput) (req *aws.Request, output *ListKeysOutput) {
	if opListKeys == nil {
		opListKeys = &aws.Operation{
			Name:       "ListKeys",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opListKeys, input, output)
	output = &ListKeysOutput{}
	req.Data = output
	return
}

func (c *KMS) ListKeys(input *ListKeysInput) (output *ListKeysOutput, err error) {
	req, out := c.ListKeysRequest(input)
	output = out
	err = req.Send()
	return
}

var opListKeys *aws.Operation

// PutKeyPolicyRequest generates a request for the PutKeyPolicy operation.
func (c *KMS) PutKeyPolicyRequest(input *PutKeyPolicyInput) (req *aws.Request, output *PutKeyPolicyOutput) {
	if opPutKeyPolicy == nil {
		opPutKeyPolicy = &aws.Operation{
			Name:       "PutKeyPolicy",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opPutKeyPolicy, input, output)
	output = &PutKeyPolicyOutput{}
	req.Data = output
	return
}

func (c *KMS) PutKeyPolicy(input *PutKeyPolicyInput) (output *PutKeyPolicyOutput, err error) {
	req, out := c.PutKeyPolicyRequest(input)
	output = out
	err = req.Send()
	return
}

var opPutKeyPolicy *aws.Operation

// ReEncryptRequest generates a request for the ReEncrypt operation.
func (c *KMS) ReEncryptRequest(input *ReEncryptInput) (req *aws.Request, output *ReEncryptOutput) {
	if opReEncrypt == nil {
		opReEncrypt = &aws.Operation{
			Name:       "ReEncrypt",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opReEncrypt, input, output)
	output = &ReEncryptOutput{}
	req.Data = output
	return
}

func (c *KMS) ReEncrypt(input *ReEncryptInput) (output *ReEncryptOutput, err error) {
	req, out := c.ReEncryptRequest(input)
	output = out
	err = req.Send()
	return
}

var opReEncrypt *aws.Operation

// RetireGrantRequest generates a request for the RetireGrant operation.
func (c *KMS) RetireGrantRequest(input *RetireGrantInput) (req *aws.Request, output *RetireGrantOutput) {
	if opRetireGrant == nil {
		opRetireGrant = &aws.Operation{
			Name:       "RetireGrant",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opRetireGrant, input, output)
	output = &RetireGrantOutput{}
	req.Data = output
	return
}

func (c *KMS) RetireGrant(input *RetireGrantInput) (output *RetireGrantOutput, err error) {
	req, out := c.RetireGrantRequest(input)
	output = out
	err = req.Send()
	return
}

var opRetireGrant *aws.Operation

// RevokeGrantRequest generates a request for the RevokeGrant operation.
func (c *KMS) RevokeGrantRequest(input *RevokeGrantInput) (req *aws.Request, output *RevokeGrantOutput) {
	if opRevokeGrant == nil {
		opRevokeGrant = &aws.Operation{
			Name:       "RevokeGrant",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opRevokeGrant, input, output)
	output = &RevokeGrantOutput{}
	req.Data = output
	return
}

func (c *KMS) RevokeGrant(input *RevokeGrantInput) (output *RevokeGrantOutput, err error) {
	req, out := c.RevokeGrantRequest(input)
	output = out
	err = req.Send()
	return
}

var opRevokeGrant *aws.Operation

// UpdateKeyDescriptionRequest generates a request for the UpdateKeyDescription operation.
func (c *KMS) UpdateKeyDescriptionRequest(input *UpdateKeyDescriptionInput) (req *aws.Request, output *UpdateKeyDescriptionOutput) {
	if opUpdateKeyDescription == nil {
		opUpdateKeyDescription = &aws.Operation{
			Name:       "UpdateKeyDescription",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opUpdateKeyDescription, input, output)
	output = &UpdateKeyDescriptionOutput{}
	req.Data = output
	return
}

func (c *KMS) UpdateKeyDescription(input *UpdateKeyDescriptionInput) (output *UpdateKeyDescriptionOutput, err error) {
	req, out := c.UpdateKeyDescriptionRequest(input)
	output = out
	err = req.Send()
	return
}

var opUpdateKeyDescription *aws.Operation

type AliasListEntry struct {
	AliasARN    *string `locationName:"AliasArn" type:"string"`
	AliasName   *string `type:"string"`
	TargetKeyID *string `locationName:"TargetKeyId" type:"string"`

	metadataAliasListEntry `json:"-", xml:"-"`
}

type metadataAliasListEntry struct {
	SDKShapeTraits bool `type:"structure"`
}

type CreateAliasInput struct {
	AliasName   *string `type:"string" required:"true"`
	TargetKeyID *string `locationName:"TargetKeyId" type:"string" required:"true"`

	metadataCreateAliasInput `json:"-", xml:"-"`
}

type metadataCreateAliasInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type CreateAliasOutput struct {
	metadataCreateAliasOutput `json:"-", xml:"-"`
}

type metadataCreateAliasOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type CreateGrantInput struct {
	Constraints       *GrantConstraints `type:"structure"`
	GrantTokens       []*string         `type:"list"`
	GranteePrincipal  *string           `type:"string" required:"true"`
	KeyID             *string           `locationName:"KeyId" type:"string" required:"true"`
	Operations        []*string         `type:"list"`
	RetiringPrincipal *string           `type:"string"`

	metadataCreateGrantInput `json:"-", xml:"-"`
}

type metadataCreateGrantInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type CreateGrantOutput struct {
	GrantID    *string `locationName:"GrantId" type:"string"`
	GrantToken *string `type:"string"`

	metadataCreateGrantOutput `json:"-", xml:"-"`
}

type metadataCreateGrantOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type CreateKeyInput struct {
	Description *string `type:"string"`
	KeyUsage    *string `type:"string"`
	Policy      *string `type:"string"`

	metadataCreateKeyInput `json:"-", xml:"-"`
}

type metadataCreateKeyInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type CreateKeyOutput struct {
	KeyMetadata *KeyMetadata `type:"structure"`

	metadataCreateKeyOutput `json:"-", xml:"-"`
}

type metadataCreateKeyOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DecryptInput struct {
	CiphertextBlob    []byte              `type:"blob" required:"true"`
	EncryptionContext *map[string]*string `type:"map"`
	GrantTokens       []*string           `type:"list"`

	metadataDecryptInput `json:"-", xml:"-"`
}

type metadataDecryptInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DecryptOutput struct {
	KeyID     *string `locationName:"KeyId" type:"string"`
	Plaintext []byte  `type:"blob"`

	metadataDecryptOutput `json:"-", xml:"-"`
}

type metadataDecryptOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DeleteAliasInput struct {
	AliasName *string `type:"string" required:"true"`

	metadataDeleteAliasInput `json:"-", xml:"-"`
}

type metadataDeleteAliasInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DeleteAliasOutput struct {
	metadataDeleteAliasOutput `json:"-", xml:"-"`
}

type metadataDeleteAliasOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeKeyInput struct {
	KeyID *string `locationName:"KeyId" type:"string" required:"true"`

	metadataDescribeKeyInput `json:"-", xml:"-"`
}

type metadataDescribeKeyInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeKeyOutput struct {
	KeyMetadata *KeyMetadata `type:"structure"`

	metadataDescribeKeyOutput `json:"-", xml:"-"`
}

type metadataDescribeKeyOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DisableKeyInput struct {
	KeyID *string `locationName:"KeyId" type:"string" required:"true"`

	metadataDisableKeyInput `json:"-", xml:"-"`
}

type metadataDisableKeyInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DisableKeyOutput struct {
	metadataDisableKeyOutput `json:"-", xml:"-"`
}

type metadataDisableKeyOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DisableKeyRotationInput struct {
	KeyID *string `locationName:"KeyId" type:"string" required:"true"`

	metadataDisableKeyRotationInput `json:"-", xml:"-"`
}

type metadataDisableKeyRotationInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DisableKeyRotationOutput struct {
	metadataDisableKeyRotationOutput `json:"-", xml:"-"`
}

type metadataDisableKeyRotationOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type EnableKeyInput struct {
	KeyID *string `locationName:"KeyId" type:"string" required:"true"`

	metadataEnableKeyInput `json:"-", xml:"-"`
}

type metadataEnableKeyInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type EnableKeyOutput struct {
	metadataEnableKeyOutput `json:"-", xml:"-"`
}

type metadataEnableKeyOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type EnableKeyRotationInput struct {
	KeyID *string `locationName:"KeyId" type:"string" required:"true"`

	metadataEnableKeyRotationInput `json:"-", xml:"-"`
}

type metadataEnableKeyRotationInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type EnableKeyRotationOutput struct {
	metadataEnableKeyRotationOutput `json:"-", xml:"-"`
}

type metadataEnableKeyRotationOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type EncryptInput struct {
	EncryptionContext *map[string]*string `type:"map"`
	GrantTokens       []*string           `type:"list"`
	KeyID             *string             `locationName:"KeyId" type:"string" required:"true"`
	Plaintext         []byte              `type:"blob" required:"true"`

	metadataEncryptInput `json:"-", xml:"-"`
}

type metadataEncryptInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type EncryptOutput struct {
	CiphertextBlob []byte  `type:"blob"`
	KeyID          *string `locationName:"KeyId" type:"string"`

	metadataEncryptOutput `json:"-", xml:"-"`
}

type metadataEncryptOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type GenerateDataKeyInput struct {
	EncryptionContext *map[string]*string `type:"map"`
	GrantTokens       []*string           `type:"list"`
	KeyID             *string             `locationName:"KeyId" type:"string" required:"true"`
	KeySpec           *string             `type:"string"`
	NumberOfBytes     *int64              `type:"integer"`

	metadataGenerateDataKeyInput `json:"-", xml:"-"`
}

type metadataGenerateDataKeyInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type GenerateDataKeyOutput struct {
	CiphertextBlob []byte  `type:"blob"`
	KeyID          *string `locationName:"KeyId" type:"string"`
	Plaintext      []byte  `type:"blob"`

	metadataGenerateDataKeyOutput `json:"-", xml:"-"`
}

type metadataGenerateDataKeyOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type GenerateDataKeyWithoutPlaintextInput struct {
	EncryptionContext *map[string]*string `type:"map"`
	GrantTokens       []*string           `type:"list"`
	KeyID             *string             `locationName:"KeyId" type:"string" required:"true"`
	KeySpec           *string             `type:"string"`
	NumberOfBytes     *int64              `type:"integer"`

	metadataGenerateDataKeyWithoutPlaintextInput `json:"-", xml:"-"`
}

type metadataGenerateDataKeyWithoutPlaintextInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type GenerateDataKeyWithoutPlaintextOutput struct {
	CiphertextBlob []byte  `type:"blob"`
	KeyID          *string `locationName:"KeyId" type:"string"`

	metadataGenerateDataKeyWithoutPlaintextOutput `json:"-", xml:"-"`
}

type metadataGenerateDataKeyWithoutPlaintextOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type GenerateRandomInput struct {
	NumberOfBytes *int64 `type:"integer"`

	metadataGenerateRandomInput `json:"-", xml:"-"`
}

type metadataGenerateRandomInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type GenerateRandomOutput struct {
	Plaintext []byte `type:"blob"`

	metadataGenerateRandomOutput `json:"-", xml:"-"`
}

type metadataGenerateRandomOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type GetKeyPolicyInput struct {
	KeyID      *string `locationName:"KeyId" type:"string" required:"true"`
	PolicyName *string `type:"string" required:"true"`

	metadataGetKeyPolicyInput `json:"-", xml:"-"`
}

type metadataGetKeyPolicyInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type GetKeyPolicyOutput struct {
	Policy *string `type:"string"`

	metadataGetKeyPolicyOutput `json:"-", xml:"-"`
}

type metadataGetKeyPolicyOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type GetKeyRotationStatusInput struct {
	KeyID *string `locationName:"KeyId" type:"string" required:"true"`

	metadataGetKeyRotationStatusInput `json:"-", xml:"-"`
}

type metadataGetKeyRotationStatusInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type GetKeyRotationStatusOutput struct {
	KeyRotationEnabled *bool `type:"boolean"`

	metadataGetKeyRotationStatusOutput `json:"-", xml:"-"`
}

type metadataGetKeyRotationStatusOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type GrantConstraints struct {
	EncryptionContextEquals *map[string]*string `type:"map"`
	EncryptionContextSubset *map[string]*string `type:"map"`

	metadataGrantConstraints `json:"-", xml:"-"`
}

type metadataGrantConstraints struct {
	SDKShapeTraits bool `type:"structure"`
}

type GrantListEntry struct {
	Constraints       *GrantConstraints `type:"structure"`
	GrantID           *string           `locationName:"GrantId" type:"string"`
	GranteePrincipal  *string           `type:"string"`
	IssuingAccount    *string           `type:"string"`
	Operations        []*string         `type:"list"`
	RetiringPrincipal *string           `type:"string"`

	metadataGrantListEntry `json:"-", xml:"-"`
}

type metadataGrantListEntry struct {
	SDKShapeTraits bool `type:"structure"`
}

type KeyListEntry struct {
	KeyARN *string `locationName:"KeyArn" type:"string"`
	KeyID  *string `locationName:"KeyId" type:"string"`

	metadataKeyListEntry `json:"-", xml:"-"`
}

type metadataKeyListEntry struct {
	SDKShapeTraits bool `type:"structure"`
}

type KeyMetadata struct {
	ARN          *string    `locationName:"Arn" type:"string"`
	AWSAccountID *string    `locationName:"AWSAccountId" type:"string"`
	CreationDate *time.Time `type:"timestamp" timestampFormat:"unix"`
	Description  *string    `type:"string"`
	Enabled      *bool      `type:"boolean"`
	KeyID        *string    `locationName:"KeyId" type:"string" required:"true"`
	KeyUsage     *string    `type:"string"`

	metadataKeyMetadata `json:"-", xml:"-"`
}

type metadataKeyMetadata struct {
	SDKShapeTraits bool `type:"structure"`
}

type ListAliasesInput struct {
	Limit  *int64  `type:"integer"`
	Marker *string `type:"string"`

	metadataListAliasesInput `json:"-", xml:"-"`
}

type metadataListAliasesInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type ListAliasesOutput struct {
	Aliases    []*AliasListEntry `type:"list"`
	NextMarker *string           `type:"string"`
	Truncated  *bool             `type:"boolean"`

	metadataListAliasesOutput `json:"-", xml:"-"`
}

type metadataListAliasesOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type ListGrantsInput struct {
	KeyID  *string `locationName:"KeyId" type:"string" required:"true"`
	Limit  *int64  `type:"integer"`
	Marker *string `type:"string"`

	metadataListGrantsInput `json:"-", xml:"-"`
}

type metadataListGrantsInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type ListGrantsOutput struct {
	Grants     []*GrantListEntry `type:"list"`
	NextMarker *string           `type:"string"`
	Truncated  *bool             `type:"boolean"`

	metadataListGrantsOutput `json:"-", xml:"-"`
}

type metadataListGrantsOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type ListKeyPoliciesInput struct {
	KeyID  *string `locationName:"KeyId" type:"string" required:"true"`
	Limit  *int64  `type:"integer"`
	Marker *string `type:"string"`

	metadataListKeyPoliciesInput `json:"-", xml:"-"`
}

type metadataListKeyPoliciesInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type ListKeyPoliciesOutput struct {
	NextMarker  *string   `type:"string"`
	PolicyNames []*string `type:"list"`
	Truncated   *bool     `type:"boolean"`

	metadataListKeyPoliciesOutput `json:"-", xml:"-"`
}

type metadataListKeyPoliciesOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type ListKeysInput struct {
	Limit  *int64  `type:"integer"`
	Marker *string `type:"string"`

	metadataListKeysInput `json:"-", xml:"-"`
}

type metadataListKeysInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type ListKeysOutput struct {
	Keys       []*KeyListEntry `type:"list"`
	NextMarker *string         `type:"string"`
	Truncated  *bool           `type:"boolean"`

	metadataListKeysOutput `json:"-", xml:"-"`
}

type metadataListKeysOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type PutKeyPolicyInput struct {
	KeyID      *string `locationName:"KeyId" type:"string" required:"true"`
	Policy     *string `type:"string" required:"true"`
	PolicyName *string `type:"string" required:"true"`

	metadataPutKeyPolicyInput `json:"-", xml:"-"`
}

type metadataPutKeyPolicyInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type PutKeyPolicyOutput struct {
	metadataPutKeyPolicyOutput `json:"-", xml:"-"`
}

type metadataPutKeyPolicyOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type ReEncryptInput struct {
	CiphertextBlob               []byte              `type:"blob" required:"true"`
	DestinationEncryptionContext *map[string]*string `type:"map"`
	DestinationKeyID             *string             `locationName:"DestinationKeyId" type:"string" required:"true"`
	GrantTokens                  []*string           `type:"list"`
	SourceEncryptionContext      *map[string]*string `type:"map"`

	metadataReEncryptInput `json:"-", xml:"-"`
}

type metadataReEncryptInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type ReEncryptOutput struct {
	CiphertextBlob []byte  `type:"blob"`
	KeyID          *string `locationName:"KeyId" type:"string"`
	SourceKeyID    *string `locationName:"SourceKeyId" type:"string"`

	metadataReEncryptOutput `json:"-", xml:"-"`
}

type metadataReEncryptOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type RetireGrantInput struct {
	GrantToken *string `type:"string" required:"true"`

	metadataRetireGrantInput `json:"-", xml:"-"`
}

type metadataRetireGrantInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type RetireGrantOutput struct {
	metadataRetireGrantOutput `json:"-", xml:"-"`
}

type metadataRetireGrantOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type RevokeGrantInput struct {
	GrantID *string `locationName:"GrantId" type:"string" required:"true"`
	KeyID   *string `locationName:"KeyId" type:"string" required:"true"`

	metadataRevokeGrantInput `json:"-", xml:"-"`
}

type metadataRevokeGrantInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type RevokeGrantOutput struct {
	metadataRevokeGrantOutput `json:"-", xml:"-"`
}

type metadataRevokeGrantOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type UpdateKeyDescriptionInput struct {
	Description *string `type:"string" required:"true"`
	KeyID       *string `locationName:"KeyId" type:"string" required:"true"`

	metadataUpdateKeyDescriptionInput `json:"-", xml:"-"`
}

type metadataUpdateKeyDescriptionInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type UpdateKeyDescriptionOutput struct {
	metadataUpdateKeyDescriptionOutput `json:"-", xml:"-"`
}

type metadataUpdateKeyDescriptionOutput struct {
	SDKShapeTraits bool `type:"structure"`
}