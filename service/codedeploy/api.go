package codedeploy

// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.

import (
	"time"

	"github.com/awslabs/aws-sdk-go/aws"
)

// BatchGetApplicationsRequest generates a request for the BatchGetApplications operation.
func (c *CodeDeploy) BatchGetApplicationsRequest(input *BatchGetApplicationsInput) (req *aws.Request, output *BatchGetApplicationsOutput) {
	if opBatchGetApplications == nil {
		opBatchGetApplications = &aws.Operation{
			Name:       "BatchGetApplications",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opBatchGetApplications, input, output)
	output = &BatchGetApplicationsOutput{}
	req.Data = output
	return
}

func (c *CodeDeploy) BatchGetApplications(input *BatchGetApplicationsInput) (output *BatchGetApplicationsOutput, err error) {
	req, out := c.BatchGetApplicationsRequest(input)
	output = out
	err = req.Send()
	return
}

var opBatchGetApplications *aws.Operation

// BatchGetDeploymentsRequest generates a request for the BatchGetDeployments operation.
func (c *CodeDeploy) BatchGetDeploymentsRequest(input *BatchGetDeploymentsInput) (req *aws.Request, output *BatchGetDeploymentsOutput) {
	if opBatchGetDeployments == nil {
		opBatchGetDeployments = &aws.Operation{
			Name:       "BatchGetDeployments",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opBatchGetDeployments, input, output)
	output = &BatchGetDeploymentsOutput{}
	req.Data = output
	return
}

func (c *CodeDeploy) BatchGetDeployments(input *BatchGetDeploymentsInput) (output *BatchGetDeploymentsOutput, err error) {
	req, out := c.BatchGetDeploymentsRequest(input)
	output = out
	err = req.Send()
	return
}

var opBatchGetDeployments *aws.Operation

// CreateApplicationRequest generates a request for the CreateApplication operation.
func (c *CodeDeploy) CreateApplicationRequest(input *CreateApplicationInput) (req *aws.Request, output *CreateApplicationOutput) {
	if opCreateApplication == nil {
		opCreateApplication = &aws.Operation{
			Name:       "CreateApplication",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opCreateApplication, input, output)
	output = &CreateApplicationOutput{}
	req.Data = output
	return
}

func (c *CodeDeploy) CreateApplication(input *CreateApplicationInput) (output *CreateApplicationOutput, err error) {
	req, out := c.CreateApplicationRequest(input)
	output = out
	err = req.Send()
	return
}

var opCreateApplication *aws.Operation

// CreateDeploymentRequest generates a request for the CreateDeployment operation.
func (c *CodeDeploy) CreateDeploymentRequest(input *CreateDeploymentInput) (req *aws.Request, output *CreateDeploymentOutput) {
	if opCreateDeployment == nil {
		opCreateDeployment = &aws.Operation{
			Name:       "CreateDeployment",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opCreateDeployment, input, output)
	output = &CreateDeploymentOutput{}
	req.Data = output
	return
}

func (c *CodeDeploy) CreateDeployment(input *CreateDeploymentInput) (output *CreateDeploymentOutput, err error) {
	req, out := c.CreateDeploymentRequest(input)
	output = out
	err = req.Send()
	return
}

var opCreateDeployment *aws.Operation

// CreateDeploymentConfigRequest generates a request for the CreateDeploymentConfig operation.
func (c *CodeDeploy) CreateDeploymentConfigRequest(input *CreateDeploymentConfigInput) (req *aws.Request, output *CreateDeploymentConfigOutput) {
	if opCreateDeploymentConfig == nil {
		opCreateDeploymentConfig = &aws.Operation{
			Name:       "CreateDeploymentConfig",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opCreateDeploymentConfig, input, output)
	output = &CreateDeploymentConfigOutput{}
	req.Data = output
	return
}

func (c *CodeDeploy) CreateDeploymentConfig(input *CreateDeploymentConfigInput) (output *CreateDeploymentConfigOutput, err error) {
	req, out := c.CreateDeploymentConfigRequest(input)
	output = out
	err = req.Send()
	return
}

var opCreateDeploymentConfig *aws.Operation

// CreateDeploymentGroupRequest generates a request for the CreateDeploymentGroup operation.
func (c *CodeDeploy) CreateDeploymentGroupRequest(input *CreateDeploymentGroupInput) (req *aws.Request, output *CreateDeploymentGroupOutput) {
	if opCreateDeploymentGroup == nil {
		opCreateDeploymentGroup = &aws.Operation{
			Name:       "CreateDeploymentGroup",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opCreateDeploymentGroup, input, output)
	output = &CreateDeploymentGroupOutput{}
	req.Data = output
	return
}

func (c *CodeDeploy) CreateDeploymentGroup(input *CreateDeploymentGroupInput) (output *CreateDeploymentGroupOutput, err error) {
	req, out := c.CreateDeploymentGroupRequest(input)
	output = out
	err = req.Send()
	return
}

var opCreateDeploymentGroup *aws.Operation

// DeleteApplicationRequest generates a request for the DeleteApplication operation.
func (c *CodeDeploy) DeleteApplicationRequest(input *DeleteApplicationInput) (req *aws.Request, output *DeleteApplicationOutput) {
	if opDeleteApplication == nil {
		opDeleteApplication = &aws.Operation{
			Name:       "DeleteApplication",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDeleteApplication, input, output)
	output = &DeleteApplicationOutput{}
	req.Data = output
	return
}

func (c *CodeDeploy) DeleteApplication(input *DeleteApplicationInput) (output *DeleteApplicationOutput, err error) {
	req, out := c.DeleteApplicationRequest(input)
	output = out
	err = req.Send()
	return
}

var opDeleteApplication *aws.Operation

// DeleteDeploymentConfigRequest generates a request for the DeleteDeploymentConfig operation.
func (c *CodeDeploy) DeleteDeploymentConfigRequest(input *DeleteDeploymentConfigInput) (req *aws.Request, output *DeleteDeploymentConfigOutput) {
	if opDeleteDeploymentConfig == nil {
		opDeleteDeploymentConfig = &aws.Operation{
			Name:       "DeleteDeploymentConfig",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDeleteDeploymentConfig, input, output)
	output = &DeleteDeploymentConfigOutput{}
	req.Data = output
	return
}

func (c *CodeDeploy) DeleteDeploymentConfig(input *DeleteDeploymentConfigInput) (output *DeleteDeploymentConfigOutput, err error) {
	req, out := c.DeleteDeploymentConfigRequest(input)
	output = out
	err = req.Send()
	return
}

var opDeleteDeploymentConfig *aws.Operation

// DeleteDeploymentGroupRequest generates a request for the DeleteDeploymentGroup operation.
func (c *CodeDeploy) DeleteDeploymentGroupRequest(input *DeleteDeploymentGroupInput) (req *aws.Request, output *DeleteDeploymentGroupOutput) {
	if opDeleteDeploymentGroup == nil {
		opDeleteDeploymentGroup = &aws.Operation{
			Name:       "DeleteDeploymentGroup",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDeleteDeploymentGroup, input, output)
	output = &DeleteDeploymentGroupOutput{}
	req.Data = output
	return
}

func (c *CodeDeploy) DeleteDeploymentGroup(input *DeleteDeploymentGroupInput) (output *DeleteDeploymentGroupOutput, err error) {
	req, out := c.DeleteDeploymentGroupRequest(input)
	output = out
	err = req.Send()
	return
}

var opDeleteDeploymentGroup *aws.Operation

// GetApplicationRequest generates a request for the GetApplication operation.
func (c *CodeDeploy) GetApplicationRequest(input *GetApplicationInput) (req *aws.Request, output *GetApplicationOutput) {
	if opGetApplication == nil {
		opGetApplication = &aws.Operation{
			Name:       "GetApplication",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opGetApplication, input, output)
	output = &GetApplicationOutput{}
	req.Data = output
	return
}

func (c *CodeDeploy) GetApplication(input *GetApplicationInput) (output *GetApplicationOutput, err error) {
	req, out := c.GetApplicationRequest(input)
	output = out
	err = req.Send()
	return
}

var opGetApplication *aws.Operation

// GetApplicationRevisionRequest generates a request for the GetApplicationRevision operation.
func (c *CodeDeploy) GetApplicationRevisionRequest(input *GetApplicationRevisionInput) (req *aws.Request, output *GetApplicationRevisionOutput) {
	if opGetApplicationRevision == nil {
		opGetApplicationRevision = &aws.Operation{
			Name:       "GetApplicationRevision",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opGetApplicationRevision, input, output)
	output = &GetApplicationRevisionOutput{}
	req.Data = output
	return
}

func (c *CodeDeploy) GetApplicationRevision(input *GetApplicationRevisionInput) (output *GetApplicationRevisionOutput, err error) {
	req, out := c.GetApplicationRevisionRequest(input)
	output = out
	err = req.Send()
	return
}

var opGetApplicationRevision *aws.Operation

// GetDeploymentRequest generates a request for the GetDeployment operation.
func (c *CodeDeploy) GetDeploymentRequest(input *GetDeploymentInput) (req *aws.Request, output *GetDeploymentOutput) {
	if opGetDeployment == nil {
		opGetDeployment = &aws.Operation{
			Name:       "GetDeployment",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opGetDeployment, input, output)
	output = &GetDeploymentOutput{}
	req.Data = output
	return
}

func (c *CodeDeploy) GetDeployment(input *GetDeploymentInput) (output *GetDeploymentOutput, err error) {
	req, out := c.GetDeploymentRequest(input)
	output = out
	err = req.Send()
	return
}

var opGetDeployment *aws.Operation

// GetDeploymentConfigRequest generates a request for the GetDeploymentConfig operation.
func (c *CodeDeploy) GetDeploymentConfigRequest(input *GetDeploymentConfigInput) (req *aws.Request, output *GetDeploymentConfigOutput) {
	if opGetDeploymentConfig == nil {
		opGetDeploymentConfig = &aws.Operation{
			Name:       "GetDeploymentConfig",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opGetDeploymentConfig, input, output)
	output = &GetDeploymentConfigOutput{}
	req.Data = output
	return
}

func (c *CodeDeploy) GetDeploymentConfig(input *GetDeploymentConfigInput) (output *GetDeploymentConfigOutput, err error) {
	req, out := c.GetDeploymentConfigRequest(input)
	output = out
	err = req.Send()
	return
}

var opGetDeploymentConfig *aws.Operation

// GetDeploymentGroupRequest generates a request for the GetDeploymentGroup operation.
func (c *CodeDeploy) GetDeploymentGroupRequest(input *GetDeploymentGroupInput) (req *aws.Request, output *GetDeploymentGroupOutput) {
	if opGetDeploymentGroup == nil {
		opGetDeploymentGroup = &aws.Operation{
			Name:       "GetDeploymentGroup",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opGetDeploymentGroup, input, output)
	output = &GetDeploymentGroupOutput{}
	req.Data = output
	return
}

func (c *CodeDeploy) GetDeploymentGroup(input *GetDeploymentGroupInput) (output *GetDeploymentGroupOutput, err error) {
	req, out := c.GetDeploymentGroupRequest(input)
	output = out
	err = req.Send()
	return
}

var opGetDeploymentGroup *aws.Operation

// GetDeploymentInstanceRequest generates a request for the GetDeploymentInstance operation.
func (c *CodeDeploy) GetDeploymentInstanceRequest(input *GetDeploymentInstanceInput) (req *aws.Request, output *GetDeploymentInstanceOutput) {
	if opGetDeploymentInstance == nil {
		opGetDeploymentInstance = &aws.Operation{
			Name:       "GetDeploymentInstance",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opGetDeploymentInstance, input, output)
	output = &GetDeploymentInstanceOutput{}
	req.Data = output
	return
}

func (c *CodeDeploy) GetDeploymentInstance(input *GetDeploymentInstanceInput) (output *GetDeploymentInstanceOutput, err error) {
	req, out := c.GetDeploymentInstanceRequest(input)
	output = out
	err = req.Send()
	return
}

var opGetDeploymentInstance *aws.Operation

// ListApplicationRevisionsRequest generates a request for the ListApplicationRevisions operation.
func (c *CodeDeploy) ListApplicationRevisionsRequest(input *ListApplicationRevisionsInput) (req *aws.Request, output *ListApplicationRevisionsOutput) {
	if opListApplicationRevisions == nil {
		opListApplicationRevisions = &aws.Operation{
			Name:       "ListApplicationRevisions",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opListApplicationRevisions, input, output)
	output = &ListApplicationRevisionsOutput{}
	req.Data = output
	return
}

func (c *CodeDeploy) ListApplicationRevisions(input *ListApplicationRevisionsInput) (output *ListApplicationRevisionsOutput, err error) {
	req, out := c.ListApplicationRevisionsRequest(input)
	output = out
	err = req.Send()
	return
}

var opListApplicationRevisions *aws.Operation

// ListApplicationsRequest generates a request for the ListApplications operation.
func (c *CodeDeploy) ListApplicationsRequest(input *ListApplicationsInput) (req *aws.Request, output *ListApplicationsOutput) {
	if opListApplications == nil {
		opListApplications = &aws.Operation{
			Name:       "ListApplications",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opListApplications, input, output)
	output = &ListApplicationsOutput{}
	req.Data = output
	return
}

func (c *CodeDeploy) ListApplications(input *ListApplicationsInput) (output *ListApplicationsOutput, err error) {
	req, out := c.ListApplicationsRequest(input)
	output = out
	err = req.Send()
	return
}

var opListApplications *aws.Operation

// ListDeploymentConfigsRequest generates a request for the ListDeploymentConfigs operation.
func (c *CodeDeploy) ListDeploymentConfigsRequest(input *ListDeploymentConfigsInput) (req *aws.Request, output *ListDeploymentConfigsOutput) {
	if opListDeploymentConfigs == nil {
		opListDeploymentConfigs = &aws.Operation{
			Name:       "ListDeploymentConfigs",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opListDeploymentConfigs, input, output)
	output = &ListDeploymentConfigsOutput{}
	req.Data = output
	return
}

func (c *CodeDeploy) ListDeploymentConfigs(input *ListDeploymentConfigsInput) (output *ListDeploymentConfigsOutput, err error) {
	req, out := c.ListDeploymentConfigsRequest(input)
	output = out
	err = req.Send()
	return
}

var opListDeploymentConfigs *aws.Operation

// ListDeploymentGroupsRequest generates a request for the ListDeploymentGroups operation.
func (c *CodeDeploy) ListDeploymentGroupsRequest(input *ListDeploymentGroupsInput) (req *aws.Request, output *ListDeploymentGroupsOutput) {
	if opListDeploymentGroups == nil {
		opListDeploymentGroups = &aws.Operation{
			Name:       "ListDeploymentGroups",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opListDeploymentGroups, input, output)
	output = &ListDeploymentGroupsOutput{}
	req.Data = output
	return
}

func (c *CodeDeploy) ListDeploymentGroups(input *ListDeploymentGroupsInput) (output *ListDeploymentGroupsOutput, err error) {
	req, out := c.ListDeploymentGroupsRequest(input)
	output = out
	err = req.Send()
	return
}

var opListDeploymentGroups *aws.Operation

// ListDeploymentInstancesRequest generates a request for the ListDeploymentInstances operation.
func (c *CodeDeploy) ListDeploymentInstancesRequest(input *ListDeploymentInstancesInput) (req *aws.Request, output *ListDeploymentInstancesOutput) {
	if opListDeploymentInstances == nil {
		opListDeploymentInstances = &aws.Operation{
			Name:       "ListDeploymentInstances",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opListDeploymentInstances, input, output)
	output = &ListDeploymentInstancesOutput{}
	req.Data = output
	return
}

func (c *CodeDeploy) ListDeploymentInstances(input *ListDeploymentInstancesInput) (output *ListDeploymentInstancesOutput, err error) {
	req, out := c.ListDeploymentInstancesRequest(input)
	output = out
	err = req.Send()
	return
}

var opListDeploymentInstances *aws.Operation

// ListDeploymentsRequest generates a request for the ListDeployments operation.
func (c *CodeDeploy) ListDeploymentsRequest(input *ListDeploymentsInput) (req *aws.Request, output *ListDeploymentsOutput) {
	if opListDeployments == nil {
		opListDeployments = &aws.Operation{
			Name:       "ListDeployments",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opListDeployments, input, output)
	output = &ListDeploymentsOutput{}
	req.Data = output
	return
}

func (c *CodeDeploy) ListDeployments(input *ListDeploymentsInput) (output *ListDeploymentsOutput, err error) {
	req, out := c.ListDeploymentsRequest(input)
	output = out
	err = req.Send()
	return
}

var opListDeployments *aws.Operation

// RegisterApplicationRevisionRequest generates a request for the RegisterApplicationRevision operation.
func (c *CodeDeploy) RegisterApplicationRevisionRequest(input *RegisterApplicationRevisionInput) (req *aws.Request, output *RegisterApplicationRevisionOutput) {
	if opRegisterApplicationRevision == nil {
		opRegisterApplicationRevision = &aws.Operation{
			Name:       "RegisterApplicationRevision",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opRegisterApplicationRevision, input, output)
	output = &RegisterApplicationRevisionOutput{}
	req.Data = output
	return
}

func (c *CodeDeploy) RegisterApplicationRevision(input *RegisterApplicationRevisionInput) (output *RegisterApplicationRevisionOutput, err error) {
	req, out := c.RegisterApplicationRevisionRequest(input)
	output = out
	err = req.Send()
	return
}

var opRegisterApplicationRevision *aws.Operation

// StopDeploymentRequest generates a request for the StopDeployment operation.
func (c *CodeDeploy) StopDeploymentRequest(input *StopDeploymentInput) (req *aws.Request, output *StopDeploymentOutput) {
	if opStopDeployment == nil {
		opStopDeployment = &aws.Operation{
			Name:       "StopDeployment",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opStopDeployment, input, output)
	output = &StopDeploymentOutput{}
	req.Data = output
	return
}

func (c *CodeDeploy) StopDeployment(input *StopDeploymentInput) (output *StopDeploymentOutput, err error) {
	req, out := c.StopDeploymentRequest(input)
	output = out
	err = req.Send()
	return
}

var opStopDeployment *aws.Operation

// UpdateApplicationRequest generates a request for the UpdateApplication operation.
func (c *CodeDeploy) UpdateApplicationRequest(input *UpdateApplicationInput) (req *aws.Request, output *UpdateApplicationOutput) {
	if opUpdateApplication == nil {
		opUpdateApplication = &aws.Operation{
			Name:       "UpdateApplication",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opUpdateApplication, input, output)
	output = &UpdateApplicationOutput{}
	req.Data = output
	return
}

func (c *CodeDeploy) UpdateApplication(input *UpdateApplicationInput) (output *UpdateApplicationOutput, err error) {
	req, out := c.UpdateApplicationRequest(input)
	output = out
	err = req.Send()
	return
}

var opUpdateApplication *aws.Operation

// UpdateDeploymentGroupRequest generates a request for the UpdateDeploymentGroup operation.
func (c *CodeDeploy) UpdateDeploymentGroupRequest(input *UpdateDeploymentGroupInput) (req *aws.Request, output *UpdateDeploymentGroupOutput) {
	if opUpdateDeploymentGroup == nil {
		opUpdateDeploymentGroup = &aws.Operation{
			Name:       "UpdateDeploymentGroup",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opUpdateDeploymentGroup, input, output)
	output = &UpdateDeploymentGroupOutput{}
	req.Data = output
	return
}

func (c *CodeDeploy) UpdateDeploymentGroup(input *UpdateDeploymentGroupInput) (output *UpdateDeploymentGroupOutput, err error) {
	req, out := c.UpdateDeploymentGroupRequest(input)
	output = out
	err = req.Send()
	return
}

var opUpdateDeploymentGroup *aws.Operation

type ApplicationInfo struct {
	ApplicationID   *string    `locationName:"applicationId" type:"string"`
	ApplicationName *string    `locationName:"applicationName" type:"string"`
	CreateTime      *time.Time `locationName:"createTime" type:"timestamp" timestampFormat:"unix"`
	LinkedToGitHub  *bool      `locationName:"linkedToGitHub" type:"boolean"`

	metadataApplicationInfo `json:"-", xml:"-"`
}

type metadataApplicationInfo struct {
	SDKShapeTraits bool `type:"structure"`
}

type AutoScalingGroup struct {
	Hook *string `locationName:"hook" type:"string"`
	Name *string `locationName:"name" type:"string"`

	metadataAutoScalingGroup `json:"-", xml:"-"`
}

type metadataAutoScalingGroup struct {
	SDKShapeTraits bool `type:"structure"`
}

type BatchGetApplicationsInput struct {
	ApplicationNames []*string `locationName:"applicationNames" type:"list"`

	metadataBatchGetApplicationsInput `json:"-", xml:"-"`
}

type metadataBatchGetApplicationsInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type BatchGetApplicationsOutput struct {
	ApplicationsInfo []*ApplicationInfo `locationName:"applicationsInfo" type:"list"`

	metadataBatchGetApplicationsOutput `json:"-", xml:"-"`
}

type metadataBatchGetApplicationsOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type BatchGetDeploymentsInput struct {
	DeploymentIDs []*string `locationName:"deploymentIds" type:"list"`

	metadataBatchGetDeploymentsInput `json:"-", xml:"-"`
}

type metadataBatchGetDeploymentsInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type BatchGetDeploymentsOutput struct {
	DeploymentsInfo []*DeploymentInfo `locationName:"deploymentsInfo" type:"list"`

	metadataBatchGetDeploymentsOutput `json:"-", xml:"-"`
}

type metadataBatchGetDeploymentsOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type CreateApplicationInput struct {
	ApplicationName *string `locationName:"applicationName" type:"string" required:"true"`

	metadataCreateApplicationInput `json:"-", xml:"-"`
}

type metadataCreateApplicationInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type CreateApplicationOutput struct {
	ApplicationID *string `locationName:"applicationId" type:"string"`

	metadataCreateApplicationOutput `json:"-", xml:"-"`
}

type metadataCreateApplicationOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type CreateDeploymentConfigInput struct {
	DeploymentConfigName *string              `locationName:"deploymentConfigName" type:"string" required:"true"`
	MinimumHealthyHosts  *MinimumHealthyHosts `locationName:"minimumHealthyHosts" type:"structure"`

	metadataCreateDeploymentConfigInput `json:"-", xml:"-"`
}

type metadataCreateDeploymentConfigInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type CreateDeploymentConfigOutput struct {
	DeploymentConfigID *string `locationName:"deploymentConfigId" type:"string"`

	metadataCreateDeploymentConfigOutput `json:"-", xml:"-"`
}

type metadataCreateDeploymentConfigOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type CreateDeploymentGroupInput struct {
	ApplicationName      *string         `locationName:"applicationName" type:"string" required:"true"`
	AutoScalingGroups    []*string       `locationName:"autoScalingGroups" type:"list"`
	DeploymentConfigName *string         `locationName:"deploymentConfigName" type:"string"`
	DeploymentGroupName  *string         `locationName:"deploymentGroupName" type:"string" required:"true"`
	EC2TagFilters        []*EC2TagFilter `locationName:"ec2TagFilters" type:"list"`
	ServiceRoleARN       *string         `locationName:"serviceRoleArn" type:"string"`

	metadataCreateDeploymentGroupInput `json:"-", xml:"-"`
}

type metadataCreateDeploymentGroupInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type CreateDeploymentGroupOutput struct {
	DeploymentGroupID *string `locationName:"deploymentGroupId" type:"string"`

	metadataCreateDeploymentGroupOutput `json:"-", xml:"-"`
}

type metadataCreateDeploymentGroupOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type CreateDeploymentInput struct {
	ApplicationName               *string           `locationName:"applicationName" type:"string" required:"true"`
	DeploymentConfigName          *string           `locationName:"deploymentConfigName" type:"string"`
	DeploymentGroupName           *string           `locationName:"deploymentGroupName" type:"string"`
	Description                   *string           `locationName:"description" type:"string"`
	IgnoreApplicationStopFailures *bool             `locationName:"ignoreApplicationStopFailures" type:"boolean"`
	Revision                      *RevisionLocation `locationName:"revision" type:"structure"`

	metadataCreateDeploymentInput `json:"-", xml:"-"`
}

type metadataCreateDeploymentInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type CreateDeploymentOutput struct {
	DeploymentID *string `locationName:"deploymentId" type:"string"`

	metadataCreateDeploymentOutput `json:"-", xml:"-"`
}

type metadataCreateDeploymentOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DeleteApplicationInput struct {
	ApplicationName *string `locationName:"applicationName" type:"string" required:"true"`

	metadataDeleteApplicationInput `json:"-", xml:"-"`
}

type metadataDeleteApplicationInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DeleteApplicationOutput struct {
	metadataDeleteApplicationOutput `json:"-", xml:"-"`
}

type metadataDeleteApplicationOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DeleteDeploymentConfigInput struct {
	DeploymentConfigName *string `locationName:"deploymentConfigName" type:"string" required:"true"`

	metadataDeleteDeploymentConfigInput `json:"-", xml:"-"`
}

type metadataDeleteDeploymentConfigInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DeleteDeploymentConfigOutput struct {
	metadataDeleteDeploymentConfigOutput `json:"-", xml:"-"`
}

type metadataDeleteDeploymentConfigOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DeleteDeploymentGroupInput struct {
	ApplicationName     *string `locationName:"applicationName" type:"string" required:"true"`
	DeploymentGroupName *string `locationName:"deploymentGroupName" type:"string" required:"true"`

	metadataDeleteDeploymentGroupInput `json:"-", xml:"-"`
}

type metadataDeleteDeploymentGroupInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DeleteDeploymentGroupOutput struct {
	HooksNotCleanedUp []*AutoScalingGroup `locationName:"hooksNotCleanedUp" type:"list"`

	metadataDeleteDeploymentGroupOutput `json:"-", xml:"-"`
}

type metadataDeleteDeploymentGroupOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DeploymentConfigInfo struct {
	CreateTime           *time.Time           `locationName:"createTime" type:"timestamp" timestampFormat:"unix"`
	DeploymentConfigID   *string              `locationName:"deploymentConfigId" type:"string"`
	DeploymentConfigName *string              `locationName:"deploymentConfigName" type:"string"`
	MinimumHealthyHosts  *MinimumHealthyHosts `locationName:"minimumHealthyHosts" type:"structure"`

	metadataDeploymentConfigInfo `json:"-", xml:"-"`
}

type metadataDeploymentConfigInfo struct {
	SDKShapeTraits bool `type:"structure"`
}

type DeploymentGroupInfo struct {
	ApplicationName      *string             `locationName:"applicationName" type:"string"`
	AutoScalingGroups    []*AutoScalingGroup `locationName:"autoScalingGroups" type:"list"`
	DeploymentConfigName *string             `locationName:"deploymentConfigName" type:"string"`
	DeploymentGroupID    *string             `locationName:"deploymentGroupId" type:"string"`
	DeploymentGroupName  *string             `locationName:"deploymentGroupName" type:"string"`
	EC2TagFilters        []*EC2TagFilter     `locationName:"ec2TagFilters" type:"list"`
	ServiceRoleARN       *string             `locationName:"serviceRoleArn" type:"string"`
	TargetRevision       *RevisionLocation   `locationName:"targetRevision" type:"structure"`

	metadataDeploymentGroupInfo `json:"-", xml:"-"`
}

type metadataDeploymentGroupInfo struct {
	SDKShapeTraits bool `type:"structure"`
}

type DeploymentInfo struct {
	ApplicationName               *string             `locationName:"applicationName" type:"string"`
	CompleteTime                  *time.Time          `locationName:"completeTime" type:"timestamp" timestampFormat:"unix"`
	CreateTime                    *time.Time          `locationName:"createTime" type:"timestamp" timestampFormat:"unix"`
	Creator                       *string             `locationName:"creator" type:"string"`
	DeploymentConfigName          *string             `locationName:"deploymentConfigName" type:"string"`
	DeploymentGroupName           *string             `locationName:"deploymentGroupName" type:"string"`
	DeploymentID                  *string             `locationName:"deploymentId" type:"string"`
	DeploymentOverview            *DeploymentOverview `locationName:"deploymentOverview" type:"structure"`
	Description                   *string             `locationName:"description" type:"string"`
	ErrorInformation              *ErrorInformation   `locationName:"errorInformation" type:"structure"`
	IgnoreApplicationStopFailures *bool               `locationName:"ignoreApplicationStopFailures" type:"boolean"`
	Revision                      *RevisionLocation   `locationName:"revision" type:"structure"`
	StartTime                     *time.Time          `locationName:"startTime" type:"timestamp" timestampFormat:"unix"`
	Status                        *string             `locationName:"status" type:"string"`

	metadataDeploymentInfo `json:"-", xml:"-"`
}

type metadataDeploymentInfo struct {
	SDKShapeTraits bool `type:"structure"`
}

type DeploymentOverview struct {
	Failed     *int64 `type:"long"`
	InProgress *int64 `type:"long"`
	Pending    *int64 `type:"long"`
	Skipped    *int64 `type:"long"`
	Succeeded  *int64 `type:"long"`

	metadataDeploymentOverview `json:"-", xml:"-"`
}

type metadataDeploymentOverview struct {
	SDKShapeTraits bool `type:"structure"`
}

type Diagnostics struct {
	ErrorCode  *string `locationName:"errorCode" type:"string"`
	LogTail    *string `locationName:"logTail" type:"string"`
	Message    *string `locationName:"message" type:"string"`
	ScriptName *string `locationName:"scriptName" type:"string"`

	metadataDiagnostics `json:"-", xml:"-"`
}

type metadataDiagnostics struct {
	SDKShapeTraits bool `type:"structure"`
}

type EC2TagFilter struct {
	Key   *string `type:"string"`
	Type  *string `type:"string"`
	Value *string `type:"string"`

	metadataEC2TagFilter `json:"-", xml:"-"`
}

type metadataEC2TagFilter struct {
	SDKShapeTraits bool `type:"structure"`
}

type ErrorInformation struct {
	Code    *string `locationName:"code" type:"string"`
	Message *string `locationName:"message" type:"string"`

	metadataErrorInformation `json:"-", xml:"-"`
}

type metadataErrorInformation struct {
	SDKShapeTraits bool `type:"structure"`
}

type GenericRevisionInfo struct {
	DeploymentGroups []*string  `locationName:"deploymentGroups" type:"list"`
	Description      *string    `locationName:"description" type:"string"`
	FirstUsedTime    *time.Time `locationName:"firstUsedTime" type:"timestamp" timestampFormat:"unix"`
	LastUsedTime     *time.Time `locationName:"lastUsedTime" type:"timestamp" timestampFormat:"unix"`
	RegisterTime     *time.Time `locationName:"registerTime" type:"timestamp" timestampFormat:"unix"`

	metadataGenericRevisionInfo `json:"-", xml:"-"`
}

type metadataGenericRevisionInfo struct {
	SDKShapeTraits bool `type:"structure"`
}

type GetApplicationInput struct {
	ApplicationName *string `locationName:"applicationName" type:"string" required:"true"`

	metadataGetApplicationInput `json:"-", xml:"-"`
}

type metadataGetApplicationInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type GetApplicationOutput struct {
	Application *ApplicationInfo `locationName:"application" type:"structure"`

	metadataGetApplicationOutput `json:"-", xml:"-"`
}

type metadataGetApplicationOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type GetApplicationRevisionInput struct {
	ApplicationName *string           `locationName:"applicationName" type:"string" required:"true"`
	Revision        *RevisionLocation `locationName:"revision" type:"structure" required:"true"`

	metadataGetApplicationRevisionInput `json:"-", xml:"-"`
}

type metadataGetApplicationRevisionInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type GetApplicationRevisionOutput struct {
	ApplicationName *string              `locationName:"applicationName" type:"string"`
	Revision        *RevisionLocation    `locationName:"revision" type:"structure"`
	RevisionInfo    *GenericRevisionInfo `locationName:"revisionInfo" type:"structure"`

	metadataGetApplicationRevisionOutput `json:"-", xml:"-"`
}

type metadataGetApplicationRevisionOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type GetDeploymentConfigInput struct {
	DeploymentConfigName *string `locationName:"deploymentConfigName" type:"string" required:"true"`

	metadataGetDeploymentConfigInput `json:"-", xml:"-"`
}

type metadataGetDeploymentConfigInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type GetDeploymentConfigOutput struct {
	DeploymentConfigInfo *DeploymentConfigInfo `locationName:"deploymentConfigInfo" type:"structure"`

	metadataGetDeploymentConfigOutput `json:"-", xml:"-"`
}

type metadataGetDeploymentConfigOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type GetDeploymentGroupInput struct {
	ApplicationName     *string `locationName:"applicationName" type:"string" required:"true"`
	DeploymentGroupName *string `locationName:"deploymentGroupName" type:"string" required:"true"`

	metadataGetDeploymentGroupInput `json:"-", xml:"-"`
}

type metadataGetDeploymentGroupInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type GetDeploymentGroupOutput struct {
	DeploymentGroupInfo *DeploymentGroupInfo `locationName:"deploymentGroupInfo" type:"structure"`

	metadataGetDeploymentGroupOutput `json:"-", xml:"-"`
}

type metadataGetDeploymentGroupOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type GetDeploymentInput struct {
	DeploymentID *string `locationName:"deploymentId" type:"string" required:"true"`

	metadataGetDeploymentInput `json:"-", xml:"-"`
}

type metadataGetDeploymentInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type GetDeploymentInstanceInput struct {
	DeploymentID *string `locationName:"deploymentId" type:"string" required:"true"`
	InstanceID   *string `locationName:"instanceId" type:"string" required:"true"`

	metadataGetDeploymentInstanceInput `json:"-", xml:"-"`
}

type metadataGetDeploymentInstanceInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type GetDeploymentInstanceOutput struct {
	InstanceSummary *InstanceSummary `locationName:"instanceSummary" type:"structure"`

	metadataGetDeploymentInstanceOutput `json:"-", xml:"-"`
}

type metadataGetDeploymentInstanceOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type GetDeploymentOutput struct {
	DeploymentInfo *DeploymentInfo `locationName:"deploymentInfo" type:"structure"`

	metadataGetDeploymentOutput `json:"-", xml:"-"`
}

type metadataGetDeploymentOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type GitHubLocation struct {
	CommitID   *string `locationName:"commitId" type:"string"`
	Repository *string `locationName:"repository" type:"string"`

	metadataGitHubLocation `json:"-", xml:"-"`
}

type metadataGitHubLocation struct {
	SDKShapeTraits bool `type:"structure"`
}

type InstanceSummary struct {
	DeploymentID    *string           `locationName:"deploymentId" type:"string"`
	InstanceID      *string           `locationName:"instanceId" type:"string"`
	LastUpdatedAt   *time.Time        `locationName:"lastUpdatedAt" type:"timestamp" timestampFormat:"unix"`
	LifecycleEvents []*LifecycleEvent `locationName:"lifecycleEvents" type:"list"`
	Status          *string           `locationName:"status" type:"string"`

	metadataInstanceSummary `json:"-", xml:"-"`
}

type metadataInstanceSummary struct {
	SDKShapeTraits bool `type:"structure"`
}

type LifecycleEvent struct {
	Diagnostics        *Diagnostics `locationName:"diagnostics" type:"structure"`
	EndTime            *time.Time   `locationName:"endTime" type:"timestamp" timestampFormat:"unix"`
	LifecycleEventName *string      `locationName:"lifecycleEventName" type:"string"`
	StartTime          *time.Time   `locationName:"startTime" type:"timestamp" timestampFormat:"unix"`
	Status             *string      `locationName:"status" type:"string"`

	metadataLifecycleEvent `json:"-", xml:"-"`
}

type metadataLifecycleEvent struct {
	SDKShapeTraits bool `type:"structure"`
}

type ListApplicationRevisionsInput struct {
	ApplicationName *string `locationName:"applicationName" type:"string" required:"true"`
	Deployed        *string `locationName:"deployed" type:"string"`
	NextToken       *string `locationName:"nextToken" type:"string"`
	S3Bucket        *string `locationName:"s3Bucket" type:"string"`
	S3KeyPrefix     *string `locationName:"s3KeyPrefix" type:"string"`
	SortBy          *string `locationName:"sortBy" type:"string"`
	SortOrder       *string `locationName:"sortOrder" type:"string"`

	metadataListApplicationRevisionsInput `json:"-", xml:"-"`
}

type metadataListApplicationRevisionsInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type ListApplicationRevisionsOutput struct {
	NextToken *string             `locationName:"nextToken" type:"string"`
	Revisions []*RevisionLocation `locationName:"revisions" type:"list"`

	metadataListApplicationRevisionsOutput `json:"-", xml:"-"`
}

type metadataListApplicationRevisionsOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type ListApplicationsInput struct {
	NextToken *string `locationName:"nextToken" type:"string"`

	metadataListApplicationsInput `json:"-", xml:"-"`
}

type metadataListApplicationsInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type ListApplicationsOutput struct {
	Applications []*string `locationName:"applications" type:"list"`
	NextToken    *string   `locationName:"nextToken" type:"string"`

	metadataListApplicationsOutput `json:"-", xml:"-"`
}

type metadataListApplicationsOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type ListDeploymentConfigsInput struct {
	NextToken *string `locationName:"nextToken" type:"string"`

	metadataListDeploymentConfigsInput `json:"-", xml:"-"`
}

type metadataListDeploymentConfigsInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type ListDeploymentConfigsOutput struct {
	DeploymentConfigsList []*string `locationName:"deploymentConfigsList" type:"list"`
	NextToken             *string   `locationName:"nextToken" type:"string"`

	metadataListDeploymentConfigsOutput `json:"-", xml:"-"`
}

type metadataListDeploymentConfigsOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type ListDeploymentGroupsInput struct {
	ApplicationName *string `locationName:"applicationName" type:"string" required:"true"`
	NextToken       *string `locationName:"nextToken" type:"string"`

	metadataListDeploymentGroupsInput `json:"-", xml:"-"`
}

type metadataListDeploymentGroupsInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type ListDeploymentGroupsOutput struct {
	ApplicationName  *string   `locationName:"applicationName" type:"string"`
	DeploymentGroups []*string `locationName:"deploymentGroups" type:"list"`
	NextToken        *string   `locationName:"nextToken" type:"string"`

	metadataListDeploymentGroupsOutput `json:"-", xml:"-"`
}

type metadataListDeploymentGroupsOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type ListDeploymentInstancesInput struct {
	DeploymentID         *string   `locationName:"deploymentId" type:"string" required:"true"`
	InstanceStatusFilter []*string `locationName:"instanceStatusFilter" type:"list"`
	NextToken            *string   `locationName:"nextToken" type:"string"`

	metadataListDeploymentInstancesInput `json:"-", xml:"-"`
}

type metadataListDeploymentInstancesInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type ListDeploymentInstancesOutput struct {
	InstancesList []*string `locationName:"instancesList" type:"list"`
	NextToken     *string   `locationName:"nextToken" type:"string"`

	metadataListDeploymentInstancesOutput `json:"-", xml:"-"`
}

type metadataListDeploymentInstancesOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type ListDeploymentsInput struct {
	ApplicationName     *string    `locationName:"applicationName" type:"string"`
	CreateTimeRange     *TimeRange `locationName:"createTimeRange" type:"structure"`
	DeploymentGroupName *string    `locationName:"deploymentGroupName" type:"string"`
	IncludeOnlyStatuses []*string  `locationName:"includeOnlyStatuses" type:"list"`
	NextToken           *string    `locationName:"nextToken" type:"string"`

	metadataListDeploymentsInput `json:"-", xml:"-"`
}

type metadataListDeploymentsInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type ListDeploymentsOutput struct {
	Deployments []*string `locationName:"deployments" type:"list"`
	NextToken   *string   `locationName:"nextToken" type:"string"`

	metadataListDeploymentsOutput `json:"-", xml:"-"`
}

type metadataListDeploymentsOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type MinimumHealthyHosts struct {
	Type  *string `locationName:"type" type:"string"`
	Value *int64  `locationName:"value" type:"integer"`

	metadataMinimumHealthyHosts `json:"-", xml:"-"`
}

type metadataMinimumHealthyHosts struct {
	SDKShapeTraits bool `type:"structure"`
}

type RegisterApplicationRevisionInput struct {
	ApplicationName *string           `locationName:"applicationName" type:"string" required:"true"`
	Description     *string           `locationName:"description" type:"string"`
	Revision        *RevisionLocation `locationName:"revision" type:"structure" required:"true"`

	metadataRegisterApplicationRevisionInput `json:"-", xml:"-"`
}

type metadataRegisterApplicationRevisionInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type RegisterApplicationRevisionOutput struct {
	metadataRegisterApplicationRevisionOutput `json:"-", xml:"-"`
}

type metadataRegisterApplicationRevisionOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type RevisionLocation struct {
	GitHubLocation *GitHubLocation `locationName:"gitHubLocation" type:"structure"`
	RevisionType   *string         `locationName:"revisionType" type:"string"`
	S3Location     *S3Location     `locationName:"s3Location" type:"structure"`

	metadataRevisionLocation `json:"-", xml:"-"`
}

type metadataRevisionLocation struct {
	SDKShapeTraits bool `type:"structure"`
}

type S3Location struct {
	Bucket     *string `locationName:"bucket" type:"string"`
	BundleType *string `locationName:"bundleType" type:"string"`
	ETag       *string `locationName:"eTag" type:"string"`
	Key        *string `locationName:"key" type:"string"`
	Version    *string `locationName:"version" type:"string"`

	metadataS3Location `json:"-", xml:"-"`
}

type metadataS3Location struct {
	SDKShapeTraits bool `type:"structure"`
}

type StopDeploymentInput struct {
	DeploymentID *string `locationName:"deploymentId" type:"string" required:"true"`

	metadataStopDeploymentInput `json:"-", xml:"-"`
}

type metadataStopDeploymentInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type StopDeploymentOutput struct {
	Status        *string `locationName:"status" type:"string"`
	StatusMessage *string `locationName:"statusMessage" type:"string"`

	metadataStopDeploymentOutput `json:"-", xml:"-"`
}

type metadataStopDeploymentOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type TimeRange struct {
	End   *time.Time `locationName:"end" type:"timestamp" timestampFormat:"unix"`
	Start *time.Time `locationName:"start" type:"timestamp" timestampFormat:"unix"`

	metadataTimeRange `json:"-", xml:"-"`
}

type metadataTimeRange struct {
	SDKShapeTraits bool `type:"structure"`
}

type UpdateApplicationInput struct {
	ApplicationName    *string `locationName:"applicationName" type:"string"`
	NewApplicationName *string `locationName:"newApplicationName" type:"string"`

	metadataUpdateApplicationInput `json:"-", xml:"-"`
}

type metadataUpdateApplicationInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type UpdateApplicationOutput struct {
	metadataUpdateApplicationOutput `json:"-", xml:"-"`
}

type metadataUpdateApplicationOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type UpdateDeploymentGroupInput struct {
	ApplicationName            *string         `locationName:"applicationName" type:"string" required:"true"`
	AutoScalingGroups          []*string       `locationName:"autoScalingGroups" type:"list"`
	CurrentDeploymentGroupName *string         `locationName:"currentDeploymentGroupName" type:"string" required:"true"`
	DeploymentConfigName       *string         `locationName:"deploymentConfigName" type:"string"`
	EC2TagFilters              []*EC2TagFilter `locationName:"ec2TagFilters" type:"list"`
	NewDeploymentGroupName     *string         `locationName:"newDeploymentGroupName" type:"string"`
	ServiceRoleARN             *string         `locationName:"serviceRoleArn" type:"string"`

	metadataUpdateDeploymentGroupInput `json:"-", xml:"-"`
}

type metadataUpdateDeploymentGroupInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type UpdateDeploymentGroupOutput struct {
	HooksNotCleanedUp []*AutoScalingGroup `locationName:"hooksNotCleanedUp" type:"list"`

	metadataUpdateDeploymentGroupOutput `json:"-", xml:"-"`
}

type metadataUpdateDeploymentGroupOutput struct {
	SDKShapeTraits bool `type:"structure"`
}