package simpledb

// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.

import (
	"github.com/awslabs/aws-sdk-go/aws"
)

// BatchDeleteAttributesRequest generates a request for the BatchDeleteAttributes operation.
func (c *SimpleDB) BatchDeleteAttributesRequest(input *BatchDeleteAttributesInput) (req *aws.Request) {
	if opBatchDeleteAttributes == nil {
		opBatchDeleteAttributes = &aws.Operation{
			Name:       "BatchDeleteAttributes",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opBatchDeleteAttributes, input, nil)

	return
}

func (c *SimpleDB) BatchDeleteAttributes(input *BatchDeleteAttributesInput) (err error) {
	req := c.BatchDeleteAttributesRequest(input)
	err = req.Send()
	return
}

var opBatchDeleteAttributes *aws.Operation

// BatchPutAttributesRequest generates a request for the BatchPutAttributes operation.
func (c *SimpleDB) BatchPutAttributesRequest(input *BatchPutAttributesInput) (req *aws.Request) {
	if opBatchPutAttributes == nil {
		opBatchPutAttributes = &aws.Operation{
			Name:       "BatchPutAttributes",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opBatchPutAttributes, input, nil)

	return
}

func (c *SimpleDB) BatchPutAttributes(input *BatchPutAttributesInput) (err error) {
	req := c.BatchPutAttributesRequest(input)
	err = req.Send()
	return
}

var opBatchPutAttributes *aws.Operation

// CreateDomainRequest generates a request for the CreateDomain operation.
func (c *SimpleDB) CreateDomainRequest(input *CreateDomainInput) (req *aws.Request) {
	if opCreateDomain == nil {
		opCreateDomain = &aws.Operation{
			Name:       "CreateDomain",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opCreateDomain, input, nil)

	return
}

func (c *SimpleDB) CreateDomain(input *CreateDomainInput) (err error) {
	req := c.CreateDomainRequest(input)
	err = req.Send()
	return
}

var opCreateDomain *aws.Operation

// DeleteAttributesRequest generates a request for the DeleteAttributes operation.
func (c *SimpleDB) DeleteAttributesRequest(input *DeleteAttributesInput) (req *aws.Request) {
	if opDeleteAttributes == nil {
		opDeleteAttributes = &aws.Operation{
			Name:       "DeleteAttributes",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDeleteAttributes, input, nil)

	return
}

func (c *SimpleDB) DeleteAttributes(input *DeleteAttributesInput) (err error) {
	req := c.DeleteAttributesRequest(input)
	err = req.Send()
	return
}

var opDeleteAttributes *aws.Operation

// DeleteDomainRequest generates a request for the DeleteDomain operation.
func (c *SimpleDB) DeleteDomainRequest(input *DeleteDomainInput) (req *aws.Request) {
	if opDeleteDomain == nil {
		opDeleteDomain = &aws.Operation{
			Name:       "DeleteDomain",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDeleteDomain, input, nil)

	return
}

func (c *SimpleDB) DeleteDomain(input *DeleteDomainInput) (err error) {
	req := c.DeleteDomainRequest(input)
	err = req.Send()
	return
}

var opDeleteDomain *aws.Operation

// DomainMetadataRequest generates a request for the DomainMetadata operation.
func (c *SimpleDB) DomainMetadataRequest(input *DomainMetadataInput) (req *aws.Request, output *DomainMetadataOutput) {
	if opDomainMetadata == nil {
		opDomainMetadata = &aws.Operation{
			Name:       "DomainMetadata",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDomainMetadata, input, output)
	output = &DomainMetadataOutput{}
	req.Data = output
	return
}

func (c *SimpleDB) DomainMetadata(input *DomainMetadataInput) (output *DomainMetadataOutput, err error) {
	req, out := c.DomainMetadataRequest(input)
	output = out
	err = req.Send()
	return
}

var opDomainMetadata *aws.Operation

// GetAttributesRequest generates a request for the GetAttributes operation.
func (c *SimpleDB) GetAttributesRequest(input *GetAttributesInput) (req *aws.Request, output *GetAttributesOutput) {
	if opGetAttributes == nil {
		opGetAttributes = &aws.Operation{
			Name:       "GetAttributes",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opGetAttributes, input, output)
	output = &GetAttributesOutput{}
	req.Data = output
	return
}

func (c *SimpleDB) GetAttributes(input *GetAttributesInput) (output *GetAttributesOutput, err error) {
	req, out := c.GetAttributesRequest(input)
	output = out
	err = req.Send()
	return
}

var opGetAttributes *aws.Operation

// ListDomainsRequest generates a request for the ListDomains operation.
func (c *SimpleDB) ListDomainsRequest(input *ListDomainsInput) (req *aws.Request, output *ListDomainsOutput) {
	if opListDomains == nil {
		opListDomains = &aws.Operation{
			Name:       "ListDomains",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opListDomains, input, output)
	output = &ListDomainsOutput{}
	req.Data = output
	return
}

func (c *SimpleDB) ListDomains(input *ListDomainsInput) (output *ListDomainsOutput, err error) {
	req, out := c.ListDomainsRequest(input)
	output = out
	err = req.Send()
	return
}

var opListDomains *aws.Operation

// PutAttributesRequest generates a request for the PutAttributes operation.
func (c *SimpleDB) PutAttributesRequest(input *PutAttributesInput) (req *aws.Request) {
	if opPutAttributes == nil {
		opPutAttributes = &aws.Operation{
			Name:       "PutAttributes",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opPutAttributes, input, nil)

	return
}

func (c *SimpleDB) PutAttributes(input *PutAttributesInput) (err error) {
	req := c.PutAttributesRequest(input)
	err = req.Send()
	return
}

var opPutAttributes *aws.Operation

// SelectRequest generates a request for the Select operation.
func (c *SimpleDB) SelectRequest(input *SelectInput) (req *aws.Request, output *SelectOutput) {
	if opSelect == nil {
		opSelect = &aws.Operation{
			Name:       "Select",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opSelect, input, output)
	output = &SelectOutput{}
	req.Data = output
	return
}

func (c *SimpleDB) Select(input *SelectInput) (output *SelectOutput, err error) {
	req, out := c.SelectRequest(input)
	output = out
	err = req.Send()
	return
}

var opSelect *aws.Operation

type Attribute struct {
	AlternateNameEncoding  *string `type:"string"`
	AlternateValueEncoding *string `type:"string"`
	Name                   *string `type:"string"`
	Value                  *string `type:"string"`

	metadataAttribute `json:"-", xml:"-"`
}

type metadataAttribute struct {
	SDKShapeTraits bool `type:"structure" required:"Name,Value"`
}

type AttributeDoesNotExist struct {
	BoxUsage *float32 `type:"float"`

	metadataAttributeDoesNotExist `json:"-", xml:"-"`
}

type metadataAttributeDoesNotExist struct {
	SDKShapeTraits bool `type:"structure"`
}

type BatchDeleteAttributesInput struct {
	DomainName *string          `type:"string"`
	Items      []*DeletableItem `locationNameList:"Item" type:"list" flattened:"true"`

	metadataBatchDeleteAttributesInput `json:"-", xml:"-"`
}

type metadataBatchDeleteAttributesInput struct {
	SDKShapeTraits bool `type:"structure" required:"DomainName,Items"`
}

type BatchPutAttributesInput struct {
	DomainName *string            `type:"string"`
	Items      []*ReplaceableItem `locationNameList:"Item" type:"list" flattened:"true"`

	metadataBatchPutAttributesInput `json:"-", xml:"-"`
}

type metadataBatchPutAttributesInput struct {
	SDKShapeTraits bool `type:"structure" required:"DomainName,Items"`
}

type CreateDomainInput struct {
	DomainName *string `type:"string"`

	metadataCreateDomainInput `json:"-", xml:"-"`
}

type metadataCreateDomainInput struct {
	SDKShapeTraits bool `type:"structure" required:"DomainName"`
}

type DeletableAttribute struct {
	Name  *string `type:"string"`
	Value *string `type:"string"`

	metadataDeletableAttribute `json:"-", xml:"-"`
}

type metadataDeletableAttribute struct {
	SDKShapeTraits bool `type:"structure" required:"Name"`
}

type DeletableItem struct {
	Attributes []*DeletableAttribute `locationNameList:"Attribute" type:"list" flattened:"true"`
	Name       *string               `locationName:"ItemName" type:"string"`

	metadataDeletableItem `json:"-", xml:"-"`
}

type metadataDeletableItem struct {
	SDKShapeTraits bool `type:"structure" required:"Name"`
}

type DeleteAttributesInput struct {
	Attributes []*DeletableAttribute `locationNameList:"Attribute" type:"list" flattened:"true"`
	DomainName *string               `type:"string"`
	Expected   *UpdateCondition      `type:"structure"`
	ItemName   *string               `type:"string"`

	metadataDeleteAttributesInput `json:"-", xml:"-"`
}

type metadataDeleteAttributesInput struct {
	SDKShapeTraits bool `type:"structure" required:"DomainName,ItemName"`
}

type DeleteDomainInput struct {
	DomainName *string `type:"string"`

	metadataDeleteDomainInput `json:"-", xml:"-"`
}

type metadataDeleteDomainInput struct {
	SDKShapeTraits bool `type:"structure" required:"DomainName"`
}

type DomainMetadataInput struct {
	DomainName *string `type:"string"`

	metadataDomainMetadataInput `json:"-", xml:"-"`
}

type metadataDomainMetadataInput struct {
	SDKShapeTraits bool `type:"structure" required:"DomainName"`
}

type DomainMetadataOutput struct {
	AttributeNameCount       *int   `type:"integer"`
	AttributeNamesSizeBytes  *int64 `type:"long"`
	AttributeValueCount      *int   `type:"integer"`
	AttributeValuesSizeBytes *int64 `type:"long"`
	ItemCount                *int   `type:"integer"`
	ItemNamesSizeBytes       *int64 `type:"long"`
	Timestamp                *int   `type:"integer"`

	metadataDomainMetadataOutput `json:"-", xml:"-"`
}

type metadataDomainMetadataOutput struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"DomainMetadataResult"`
}

type DuplicateItemName struct {
	BoxUsage *float32 `type:"float"`

	metadataDuplicateItemName `json:"-", xml:"-"`
}

type metadataDuplicateItemName struct {
	SDKShapeTraits bool `type:"structure"`
}

type GetAttributesInput struct {
	AttributeNames []*string `locationNameList:"AttributeName" type:"list" flattened:"true"`
	ConsistentRead *bool     `type:"boolean"`
	DomainName     *string   `type:"string"`
	ItemName       *string   `type:"string"`

	metadataGetAttributesInput `json:"-", xml:"-"`
}

type metadataGetAttributesInput struct {
	SDKShapeTraits bool `type:"structure" required:"DomainName,ItemName"`
}

type GetAttributesOutput struct {
	Attributes []*Attribute `locationNameList:"Attribute" type:"list" flattened:"true"`

	metadataGetAttributesOutput `json:"-", xml:"-"`
}

type metadataGetAttributesOutput struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"GetAttributesResult"`
}

type InvalidNextToken struct {
	BoxUsage *float32 `type:"float"`

	metadataInvalidNextToken `json:"-", xml:"-"`
}

type metadataInvalidNextToken struct {
	SDKShapeTraits bool `type:"structure"`
}

type InvalidNumberPredicates struct {
	BoxUsage *float32 `type:"float"`

	metadataInvalidNumberPredicates `json:"-", xml:"-"`
}

type metadataInvalidNumberPredicates struct {
	SDKShapeTraits bool `type:"structure"`
}

type InvalidNumberValueTests struct {
	BoxUsage *float32 `type:"float"`

	metadataInvalidNumberValueTests `json:"-", xml:"-"`
}

type metadataInvalidNumberValueTests struct {
	SDKShapeTraits bool `type:"structure"`
}

type InvalidParameterValue struct {
	BoxUsage *float32 `type:"float"`

	metadataInvalidParameterValue `json:"-", xml:"-"`
}

type metadataInvalidParameterValue struct {
	SDKShapeTraits bool `type:"structure"`
}

type InvalidQueryExpression struct {
	BoxUsage *float32 `type:"float"`

	metadataInvalidQueryExpression `json:"-", xml:"-"`
}

type metadataInvalidQueryExpression struct {
	SDKShapeTraits bool `type:"structure"`
}

type Item struct {
	AlternateNameEncoding *string      `type:"string"`
	Attributes            []*Attribute `locationNameList:"Attribute" type:"list" flattened:"true"`
	Name                  *string      `type:"string"`

	metadataItem `json:"-", xml:"-"`
}

type metadataItem struct {
	SDKShapeTraits bool `type:"structure" required:"Name,Attributes"`
}

type ListDomainsInput struct {
	MaxNumberOfDomains *int    `type:"integer"`
	NextToken          *string `type:"string"`

	metadataListDomainsInput `json:"-", xml:"-"`
}

type metadataListDomainsInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type ListDomainsOutput struct {
	DomainNames []*string `locationNameList:"DomainName" type:"list" flattened:"true"`
	NextToken   *string   `type:"string"`

	metadataListDomainsOutput `json:"-", xml:"-"`
}

type metadataListDomainsOutput struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"ListDomainsResult"`
}

type MissingParameter struct {
	BoxUsage *float32 `type:"float"`

	metadataMissingParameter `json:"-", xml:"-"`
}

type metadataMissingParameter struct {
	SDKShapeTraits bool `type:"structure"`
}

type NoSuchDomain struct {
	BoxUsage *float32 `type:"float"`

	metadataNoSuchDomain `json:"-", xml:"-"`
}

type metadataNoSuchDomain struct {
	SDKShapeTraits bool `type:"structure"`
}

type NumberDomainAttributesExceeded struct {
	BoxUsage *float32 `type:"float"`

	metadataNumberDomainAttributesExceeded `json:"-", xml:"-"`
}

type metadataNumberDomainAttributesExceeded struct {
	SDKShapeTraits bool `type:"structure"`
}

type NumberDomainBytesExceeded struct {
	BoxUsage *float32 `type:"float"`

	metadataNumberDomainBytesExceeded `json:"-", xml:"-"`
}

type metadataNumberDomainBytesExceeded struct {
	SDKShapeTraits bool `type:"structure"`
}

type NumberDomainsExceeded struct {
	BoxUsage *float32 `type:"float"`

	metadataNumberDomainsExceeded `json:"-", xml:"-"`
}

type metadataNumberDomainsExceeded struct {
	SDKShapeTraits bool `type:"structure"`
}

type NumberItemAttributesExceeded struct {
	BoxUsage *float32 `type:"float"`

	metadataNumberItemAttributesExceeded `json:"-", xml:"-"`
}

type metadataNumberItemAttributesExceeded struct {
	SDKShapeTraits bool `type:"structure"`
}

type NumberSubmittedAttributesExceeded struct {
	BoxUsage *float32 `type:"float"`

	metadataNumberSubmittedAttributesExceeded `json:"-", xml:"-"`
}

type metadataNumberSubmittedAttributesExceeded struct {
	SDKShapeTraits bool `type:"structure"`
}

type NumberSubmittedItemsExceeded struct {
	BoxUsage *float32 `type:"float"`

	metadataNumberSubmittedItemsExceeded `json:"-", xml:"-"`
}

type metadataNumberSubmittedItemsExceeded struct {
	SDKShapeTraits bool `type:"structure"`
}

type PutAttributesInput struct {
	Attributes []*ReplaceableAttribute `locationNameList:"Attribute" type:"list" flattened:"true"`
	DomainName *string                 `type:"string"`
	Expected   *UpdateCondition        `type:"structure"`
	ItemName   *string                 `type:"string"`

	metadataPutAttributesInput `json:"-", xml:"-"`
}

type metadataPutAttributesInput struct {
	SDKShapeTraits bool `type:"structure" required:"DomainName,ItemName,Attributes"`
}

type ReplaceableAttribute struct {
	Name    *string `type:"string"`
	Replace *bool   `type:"boolean"`
	Value   *string `type:"string"`

	metadataReplaceableAttribute `json:"-", xml:"-"`
}

type metadataReplaceableAttribute struct {
	SDKShapeTraits bool `type:"structure" required:"Name,Value"`
}

type ReplaceableItem struct {
	Attributes []*ReplaceableAttribute `locationNameList:"Attribute" type:"list" flattened:"true"`
	Name       *string                 `locationName:"ItemName" type:"string"`

	metadataReplaceableItem `json:"-", xml:"-"`
}

type metadataReplaceableItem struct {
	SDKShapeTraits bool `type:"structure" required:"Name,Attributes"`
}

type RequestTimeout struct {
	BoxUsage *float32 `type:"float"`

	metadataRequestTimeout `json:"-", xml:"-"`
}

type metadataRequestTimeout struct {
	SDKShapeTraits bool `type:"structure"`
}

type SelectInput struct {
	ConsistentRead   *bool   `type:"boolean"`
	NextToken        *string `type:"string"`
	SelectExpression *string `type:"string"`

	metadataSelectInput `json:"-", xml:"-"`
}

type metadataSelectInput struct {
	SDKShapeTraits bool `type:"structure" required:"SelectExpression"`
}

type SelectOutput struct {
	Items     []*Item `locationNameList:"Item" type:"list" flattened:"true"`
	NextToken *string `type:"string"`

	metadataSelectOutput `json:"-", xml:"-"`
}

type metadataSelectOutput struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"SelectResult"`
}

type TooManyRequestedAttributes struct {
	BoxUsage *float32 `type:"float"`

	metadataTooManyRequestedAttributes `json:"-", xml:"-"`
}

type metadataTooManyRequestedAttributes struct {
	SDKShapeTraits bool `type:"structure"`
}

type UpdateCondition struct {
	Exists *bool   `type:"boolean"`
	Name   *string `type:"string"`
	Value  *string `type:"string"`

	metadataUpdateCondition `json:"-", xml:"-"`
}

type metadataUpdateCondition struct {
	SDKShapeTraits bool `type:"structure"`
}