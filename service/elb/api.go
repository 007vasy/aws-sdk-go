package elb

// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.

import (
	"time"

	"github.com/awslabs/aws-sdk-go/aws"
)

// AddTagsRequest generates a request for the AddTags operation.
func (c *ELB) AddTagsRequest(input *AddTagsInput) (req *aws.Request, output *AddTagsOutput) {
	if opAddTags == nil {
		opAddTags = &aws.Operation{
			Name:       "AddTags",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opAddTags, input, output)
	output = &AddTagsOutput{}
	req.Data = output
	return
}

func (c *ELB) AddTags(input *AddTagsInput) (output *AddTagsOutput, err error) {
	req, out := c.AddTagsRequest(input)
	output = out
	err = req.Send()
	return
}

var opAddTags *aws.Operation

// ApplySecurityGroupsToLoadBalancerRequest generates a request for the ApplySecurityGroupsToLoadBalancer operation.
func (c *ELB) ApplySecurityGroupsToLoadBalancerRequest(input *ApplySecurityGroupsToLoadBalancerInput) (req *aws.Request, output *ApplySecurityGroupsToLoadBalancerOutput) {
	if opApplySecurityGroupsToLoadBalancer == nil {
		opApplySecurityGroupsToLoadBalancer = &aws.Operation{
			Name:       "ApplySecurityGroupsToLoadBalancer",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opApplySecurityGroupsToLoadBalancer, input, output)
	output = &ApplySecurityGroupsToLoadBalancerOutput{}
	req.Data = output
	return
}

func (c *ELB) ApplySecurityGroupsToLoadBalancer(input *ApplySecurityGroupsToLoadBalancerInput) (output *ApplySecurityGroupsToLoadBalancerOutput, err error) {
	req, out := c.ApplySecurityGroupsToLoadBalancerRequest(input)
	output = out
	err = req.Send()
	return
}

var opApplySecurityGroupsToLoadBalancer *aws.Operation

// AttachLoadBalancerToSubnetsRequest generates a request for the AttachLoadBalancerToSubnets operation.
func (c *ELB) AttachLoadBalancerToSubnetsRequest(input *AttachLoadBalancerToSubnetsInput) (req *aws.Request, output *AttachLoadBalancerToSubnetsOutput) {
	if opAttachLoadBalancerToSubnets == nil {
		opAttachLoadBalancerToSubnets = &aws.Operation{
			Name:       "AttachLoadBalancerToSubnets",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opAttachLoadBalancerToSubnets, input, output)
	output = &AttachLoadBalancerToSubnetsOutput{}
	req.Data = output
	return
}

func (c *ELB) AttachLoadBalancerToSubnets(input *AttachLoadBalancerToSubnetsInput) (output *AttachLoadBalancerToSubnetsOutput, err error) {
	req, out := c.AttachLoadBalancerToSubnetsRequest(input)
	output = out
	err = req.Send()
	return
}

var opAttachLoadBalancerToSubnets *aws.Operation

// ConfigureHealthCheckRequest generates a request for the ConfigureHealthCheck operation.
func (c *ELB) ConfigureHealthCheckRequest(input *ConfigureHealthCheckInput) (req *aws.Request, output *ConfigureHealthCheckOutput) {
	if opConfigureHealthCheck == nil {
		opConfigureHealthCheck = &aws.Operation{
			Name:       "ConfigureHealthCheck",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opConfigureHealthCheck, input, output)
	output = &ConfigureHealthCheckOutput{}
	req.Data = output
	return
}

func (c *ELB) ConfigureHealthCheck(input *ConfigureHealthCheckInput) (output *ConfigureHealthCheckOutput, err error) {
	req, out := c.ConfigureHealthCheckRequest(input)
	output = out
	err = req.Send()
	return
}

var opConfigureHealthCheck *aws.Operation

// CreateAppCookieStickinessPolicyRequest generates a request for the CreateAppCookieStickinessPolicy operation.
func (c *ELB) CreateAppCookieStickinessPolicyRequest(input *CreateAppCookieStickinessPolicyInput) (req *aws.Request, output *CreateAppCookieStickinessPolicyOutput) {
	if opCreateAppCookieStickinessPolicy == nil {
		opCreateAppCookieStickinessPolicy = &aws.Operation{
			Name:       "CreateAppCookieStickinessPolicy",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opCreateAppCookieStickinessPolicy, input, output)
	output = &CreateAppCookieStickinessPolicyOutput{}
	req.Data = output
	return
}

func (c *ELB) CreateAppCookieStickinessPolicy(input *CreateAppCookieStickinessPolicyInput) (output *CreateAppCookieStickinessPolicyOutput, err error) {
	req, out := c.CreateAppCookieStickinessPolicyRequest(input)
	output = out
	err = req.Send()
	return
}

var opCreateAppCookieStickinessPolicy *aws.Operation

// CreateLBCookieStickinessPolicyRequest generates a request for the CreateLBCookieStickinessPolicy operation.
func (c *ELB) CreateLBCookieStickinessPolicyRequest(input *CreateLBCookieStickinessPolicyInput) (req *aws.Request, output *CreateLBCookieStickinessPolicyOutput) {
	if opCreateLBCookieStickinessPolicy == nil {
		opCreateLBCookieStickinessPolicy = &aws.Operation{
			Name:       "CreateLBCookieStickinessPolicy",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opCreateLBCookieStickinessPolicy, input, output)
	output = &CreateLBCookieStickinessPolicyOutput{}
	req.Data = output
	return
}

func (c *ELB) CreateLBCookieStickinessPolicy(input *CreateLBCookieStickinessPolicyInput) (output *CreateLBCookieStickinessPolicyOutput, err error) {
	req, out := c.CreateLBCookieStickinessPolicyRequest(input)
	output = out
	err = req.Send()
	return
}

var opCreateLBCookieStickinessPolicy *aws.Operation

// CreateLoadBalancerRequest generates a request for the CreateLoadBalancer operation.
func (c *ELB) CreateLoadBalancerRequest(input *CreateLoadBalancerInput) (req *aws.Request, output *CreateLoadBalancerOutput) {
	if opCreateLoadBalancer == nil {
		opCreateLoadBalancer = &aws.Operation{
			Name:       "CreateLoadBalancer",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opCreateLoadBalancer, input, output)
	output = &CreateLoadBalancerOutput{}
	req.Data = output
	return
}

func (c *ELB) CreateLoadBalancer(input *CreateLoadBalancerInput) (output *CreateLoadBalancerOutput, err error) {
	req, out := c.CreateLoadBalancerRequest(input)
	output = out
	err = req.Send()
	return
}

var opCreateLoadBalancer *aws.Operation

// CreateLoadBalancerListenersRequest generates a request for the CreateLoadBalancerListeners operation.
func (c *ELB) CreateLoadBalancerListenersRequest(input *CreateLoadBalancerListenersInput) (req *aws.Request, output *CreateLoadBalancerListenersOutput) {
	if opCreateLoadBalancerListeners == nil {
		opCreateLoadBalancerListeners = &aws.Operation{
			Name:       "CreateLoadBalancerListeners",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opCreateLoadBalancerListeners, input, output)
	output = &CreateLoadBalancerListenersOutput{}
	req.Data = output
	return
}

func (c *ELB) CreateLoadBalancerListeners(input *CreateLoadBalancerListenersInput) (output *CreateLoadBalancerListenersOutput, err error) {
	req, out := c.CreateLoadBalancerListenersRequest(input)
	output = out
	err = req.Send()
	return
}

var opCreateLoadBalancerListeners *aws.Operation

// CreateLoadBalancerPolicyRequest generates a request for the CreateLoadBalancerPolicy operation.
func (c *ELB) CreateLoadBalancerPolicyRequest(input *CreateLoadBalancerPolicyInput) (req *aws.Request, output *CreateLoadBalancerPolicyOutput) {
	if opCreateLoadBalancerPolicy == nil {
		opCreateLoadBalancerPolicy = &aws.Operation{
			Name:       "CreateLoadBalancerPolicy",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opCreateLoadBalancerPolicy, input, output)
	output = &CreateLoadBalancerPolicyOutput{}
	req.Data = output
	return
}

func (c *ELB) CreateLoadBalancerPolicy(input *CreateLoadBalancerPolicyInput) (output *CreateLoadBalancerPolicyOutput, err error) {
	req, out := c.CreateLoadBalancerPolicyRequest(input)
	output = out
	err = req.Send()
	return
}

var opCreateLoadBalancerPolicy *aws.Operation

// DeleteLoadBalancerRequest generates a request for the DeleteLoadBalancer operation.
func (c *ELB) DeleteLoadBalancerRequest(input *DeleteLoadBalancerInput) (req *aws.Request, output *DeleteLoadBalancerOutput) {
	if opDeleteLoadBalancer == nil {
		opDeleteLoadBalancer = &aws.Operation{
			Name:       "DeleteLoadBalancer",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDeleteLoadBalancer, input, output)
	output = &DeleteLoadBalancerOutput{}
	req.Data = output
	return
}

func (c *ELB) DeleteLoadBalancer(input *DeleteLoadBalancerInput) (output *DeleteLoadBalancerOutput, err error) {
	req, out := c.DeleteLoadBalancerRequest(input)
	output = out
	err = req.Send()
	return
}

var opDeleteLoadBalancer *aws.Operation

// DeleteLoadBalancerListenersRequest generates a request for the DeleteLoadBalancerListeners operation.
func (c *ELB) DeleteLoadBalancerListenersRequest(input *DeleteLoadBalancerListenersInput) (req *aws.Request, output *DeleteLoadBalancerListenersOutput) {
	if opDeleteLoadBalancerListeners == nil {
		opDeleteLoadBalancerListeners = &aws.Operation{
			Name:       "DeleteLoadBalancerListeners",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDeleteLoadBalancerListeners, input, output)
	output = &DeleteLoadBalancerListenersOutput{}
	req.Data = output
	return
}

func (c *ELB) DeleteLoadBalancerListeners(input *DeleteLoadBalancerListenersInput) (output *DeleteLoadBalancerListenersOutput, err error) {
	req, out := c.DeleteLoadBalancerListenersRequest(input)
	output = out
	err = req.Send()
	return
}

var opDeleteLoadBalancerListeners *aws.Operation

// DeleteLoadBalancerPolicyRequest generates a request for the DeleteLoadBalancerPolicy operation.
func (c *ELB) DeleteLoadBalancerPolicyRequest(input *DeleteLoadBalancerPolicyInput) (req *aws.Request, output *DeleteLoadBalancerPolicyOutput) {
	if opDeleteLoadBalancerPolicy == nil {
		opDeleteLoadBalancerPolicy = &aws.Operation{
			Name:       "DeleteLoadBalancerPolicy",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDeleteLoadBalancerPolicy, input, output)
	output = &DeleteLoadBalancerPolicyOutput{}
	req.Data = output
	return
}

func (c *ELB) DeleteLoadBalancerPolicy(input *DeleteLoadBalancerPolicyInput) (output *DeleteLoadBalancerPolicyOutput, err error) {
	req, out := c.DeleteLoadBalancerPolicyRequest(input)
	output = out
	err = req.Send()
	return
}

var opDeleteLoadBalancerPolicy *aws.Operation

// DeregisterInstancesFromLoadBalancerRequest generates a request for the DeregisterInstancesFromLoadBalancer operation.
func (c *ELB) DeregisterInstancesFromLoadBalancerRequest(input *DeregisterInstancesFromLoadBalancerInput) (req *aws.Request, output *DeregisterInstancesFromLoadBalancerOutput) {
	if opDeregisterInstancesFromLoadBalancer == nil {
		opDeregisterInstancesFromLoadBalancer = &aws.Operation{
			Name:       "DeregisterInstancesFromLoadBalancer",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDeregisterInstancesFromLoadBalancer, input, output)
	output = &DeregisterInstancesFromLoadBalancerOutput{}
	req.Data = output
	return
}

func (c *ELB) DeregisterInstancesFromLoadBalancer(input *DeregisterInstancesFromLoadBalancerInput) (output *DeregisterInstancesFromLoadBalancerOutput, err error) {
	req, out := c.DeregisterInstancesFromLoadBalancerRequest(input)
	output = out
	err = req.Send()
	return
}

var opDeregisterInstancesFromLoadBalancer *aws.Operation

// DescribeInstanceHealthRequest generates a request for the DescribeInstanceHealth operation.
func (c *ELB) DescribeInstanceHealthRequest(input *DescribeInstanceHealthInput) (req *aws.Request, output *DescribeInstanceHealthOutput) {
	if opDescribeInstanceHealth == nil {
		opDescribeInstanceHealth = &aws.Operation{
			Name:       "DescribeInstanceHealth",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDescribeInstanceHealth, input, output)
	output = &DescribeInstanceHealthOutput{}
	req.Data = output
	return
}

func (c *ELB) DescribeInstanceHealth(input *DescribeInstanceHealthInput) (output *DescribeInstanceHealthOutput, err error) {
	req, out := c.DescribeInstanceHealthRequest(input)
	output = out
	err = req.Send()
	return
}

var opDescribeInstanceHealth *aws.Operation

// DescribeLoadBalancerAttributesRequest generates a request for the DescribeLoadBalancerAttributes operation.
func (c *ELB) DescribeLoadBalancerAttributesRequest(input *DescribeLoadBalancerAttributesInput) (req *aws.Request, output *DescribeLoadBalancerAttributesOutput) {
	if opDescribeLoadBalancerAttributes == nil {
		opDescribeLoadBalancerAttributes = &aws.Operation{
			Name:       "DescribeLoadBalancerAttributes",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDescribeLoadBalancerAttributes, input, output)
	output = &DescribeLoadBalancerAttributesOutput{}
	req.Data = output
	return
}

func (c *ELB) DescribeLoadBalancerAttributes(input *DescribeLoadBalancerAttributesInput) (output *DescribeLoadBalancerAttributesOutput, err error) {
	req, out := c.DescribeLoadBalancerAttributesRequest(input)
	output = out
	err = req.Send()
	return
}

var opDescribeLoadBalancerAttributes *aws.Operation

// DescribeLoadBalancerPoliciesRequest generates a request for the DescribeLoadBalancerPolicies operation.
func (c *ELB) DescribeLoadBalancerPoliciesRequest(input *DescribeLoadBalancerPoliciesInput) (req *aws.Request, output *DescribeLoadBalancerPoliciesOutput) {
	if opDescribeLoadBalancerPolicies == nil {
		opDescribeLoadBalancerPolicies = &aws.Operation{
			Name:       "DescribeLoadBalancerPolicies",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDescribeLoadBalancerPolicies, input, output)
	output = &DescribeLoadBalancerPoliciesOutput{}
	req.Data = output
	return
}

func (c *ELB) DescribeLoadBalancerPolicies(input *DescribeLoadBalancerPoliciesInput) (output *DescribeLoadBalancerPoliciesOutput, err error) {
	req, out := c.DescribeLoadBalancerPoliciesRequest(input)
	output = out
	err = req.Send()
	return
}

var opDescribeLoadBalancerPolicies *aws.Operation

// DescribeLoadBalancerPolicyTypesRequest generates a request for the DescribeLoadBalancerPolicyTypes operation.
func (c *ELB) DescribeLoadBalancerPolicyTypesRequest(input *DescribeLoadBalancerPolicyTypesInput) (req *aws.Request, output *DescribeLoadBalancerPolicyTypesOutput) {
	if opDescribeLoadBalancerPolicyTypes == nil {
		opDescribeLoadBalancerPolicyTypes = &aws.Operation{
			Name:       "DescribeLoadBalancerPolicyTypes",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDescribeLoadBalancerPolicyTypes, input, output)
	output = &DescribeLoadBalancerPolicyTypesOutput{}
	req.Data = output
	return
}

func (c *ELB) DescribeLoadBalancerPolicyTypes(input *DescribeLoadBalancerPolicyTypesInput) (output *DescribeLoadBalancerPolicyTypesOutput, err error) {
	req, out := c.DescribeLoadBalancerPolicyTypesRequest(input)
	output = out
	err = req.Send()
	return
}

var opDescribeLoadBalancerPolicyTypes *aws.Operation

// DescribeLoadBalancersRequest generates a request for the DescribeLoadBalancers operation.
func (c *ELB) DescribeLoadBalancersRequest(input *DescribeLoadBalancersInput) (req *aws.Request, output *DescribeLoadBalancersOutput) {
	if opDescribeLoadBalancers == nil {
		opDescribeLoadBalancers = &aws.Operation{
			Name:       "DescribeLoadBalancers",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDescribeLoadBalancers, input, output)
	output = &DescribeLoadBalancersOutput{}
	req.Data = output
	return
}

func (c *ELB) DescribeLoadBalancers(input *DescribeLoadBalancersInput) (output *DescribeLoadBalancersOutput, err error) {
	req, out := c.DescribeLoadBalancersRequest(input)
	output = out
	err = req.Send()
	return
}

var opDescribeLoadBalancers *aws.Operation

// DescribeTagsRequest generates a request for the DescribeTags operation.
func (c *ELB) DescribeTagsRequest(input *DescribeTagsInput) (req *aws.Request, output *DescribeTagsOutput) {
	if opDescribeTags == nil {
		opDescribeTags = &aws.Operation{
			Name:       "DescribeTags",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDescribeTags, input, output)
	output = &DescribeTagsOutput{}
	req.Data = output
	return
}

func (c *ELB) DescribeTags(input *DescribeTagsInput) (output *DescribeTagsOutput, err error) {
	req, out := c.DescribeTagsRequest(input)
	output = out
	err = req.Send()
	return
}

var opDescribeTags *aws.Operation

// DetachLoadBalancerFromSubnetsRequest generates a request for the DetachLoadBalancerFromSubnets operation.
func (c *ELB) DetachLoadBalancerFromSubnetsRequest(input *DetachLoadBalancerFromSubnetsInput) (req *aws.Request, output *DetachLoadBalancerFromSubnetsOutput) {
	if opDetachLoadBalancerFromSubnets == nil {
		opDetachLoadBalancerFromSubnets = &aws.Operation{
			Name:       "DetachLoadBalancerFromSubnets",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDetachLoadBalancerFromSubnets, input, output)
	output = &DetachLoadBalancerFromSubnetsOutput{}
	req.Data = output
	return
}

func (c *ELB) DetachLoadBalancerFromSubnets(input *DetachLoadBalancerFromSubnetsInput) (output *DetachLoadBalancerFromSubnetsOutput, err error) {
	req, out := c.DetachLoadBalancerFromSubnetsRequest(input)
	output = out
	err = req.Send()
	return
}

var opDetachLoadBalancerFromSubnets *aws.Operation

// DisableAvailabilityZonesForLoadBalancerRequest generates a request for the DisableAvailabilityZonesForLoadBalancer operation.
func (c *ELB) DisableAvailabilityZonesForLoadBalancerRequest(input *DisableAvailabilityZonesForLoadBalancerInput) (req *aws.Request, output *DisableAvailabilityZonesForLoadBalancerOutput) {
	if opDisableAvailabilityZonesForLoadBalancer == nil {
		opDisableAvailabilityZonesForLoadBalancer = &aws.Operation{
			Name:       "DisableAvailabilityZonesForLoadBalancer",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDisableAvailabilityZonesForLoadBalancer, input, output)
	output = &DisableAvailabilityZonesForLoadBalancerOutput{}
	req.Data = output
	return
}

func (c *ELB) DisableAvailabilityZonesForLoadBalancer(input *DisableAvailabilityZonesForLoadBalancerInput) (output *DisableAvailabilityZonesForLoadBalancerOutput, err error) {
	req, out := c.DisableAvailabilityZonesForLoadBalancerRequest(input)
	output = out
	err = req.Send()
	return
}

var opDisableAvailabilityZonesForLoadBalancer *aws.Operation

// EnableAvailabilityZonesForLoadBalancerRequest generates a request for the EnableAvailabilityZonesForLoadBalancer operation.
func (c *ELB) EnableAvailabilityZonesForLoadBalancerRequest(input *EnableAvailabilityZonesForLoadBalancerInput) (req *aws.Request, output *EnableAvailabilityZonesForLoadBalancerOutput) {
	if opEnableAvailabilityZonesForLoadBalancer == nil {
		opEnableAvailabilityZonesForLoadBalancer = &aws.Operation{
			Name:       "EnableAvailabilityZonesForLoadBalancer",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opEnableAvailabilityZonesForLoadBalancer, input, output)
	output = &EnableAvailabilityZonesForLoadBalancerOutput{}
	req.Data = output
	return
}

func (c *ELB) EnableAvailabilityZonesForLoadBalancer(input *EnableAvailabilityZonesForLoadBalancerInput) (output *EnableAvailabilityZonesForLoadBalancerOutput, err error) {
	req, out := c.EnableAvailabilityZonesForLoadBalancerRequest(input)
	output = out
	err = req.Send()
	return
}

var opEnableAvailabilityZonesForLoadBalancer *aws.Operation

// ModifyLoadBalancerAttributesRequest generates a request for the ModifyLoadBalancerAttributes operation.
func (c *ELB) ModifyLoadBalancerAttributesRequest(input *ModifyLoadBalancerAttributesInput) (req *aws.Request, output *ModifyLoadBalancerAttributesOutput) {
	if opModifyLoadBalancerAttributes == nil {
		opModifyLoadBalancerAttributes = &aws.Operation{
			Name:       "ModifyLoadBalancerAttributes",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opModifyLoadBalancerAttributes, input, output)
	output = &ModifyLoadBalancerAttributesOutput{}
	req.Data = output
	return
}

func (c *ELB) ModifyLoadBalancerAttributes(input *ModifyLoadBalancerAttributesInput) (output *ModifyLoadBalancerAttributesOutput, err error) {
	req, out := c.ModifyLoadBalancerAttributesRequest(input)
	output = out
	err = req.Send()
	return
}

var opModifyLoadBalancerAttributes *aws.Operation

// RegisterInstancesWithLoadBalancerRequest generates a request for the RegisterInstancesWithLoadBalancer operation.
func (c *ELB) RegisterInstancesWithLoadBalancerRequest(input *RegisterInstancesWithLoadBalancerInput) (req *aws.Request, output *RegisterInstancesWithLoadBalancerOutput) {
	if opRegisterInstancesWithLoadBalancer == nil {
		opRegisterInstancesWithLoadBalancer = &aws.Operation{
			Name:       "RegisterInstancesWithLoadBalancer",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opRegisterInstancesWithLoadBalancer, input, output)
	output = &RegisterInstancesWithLoadBalancerOutput{}
	req.Data = output
	return
}

func (c *ELB) RegisterInstancesWithLoadBalancer(input *RegisterInstancesWithLoadBalancerInput) (output *RegisterInstancesWithLoadBalancerOutput, err error) {
	req, out := c.RegisterInstancesWithLoadBalancerRequest(input)
	output = out
	err = req.Send()
	return
}

var opRegisterInstancesWithLoadBalancer *aws.Operation

// RemoveTagsRequest generates a request for the RemoveTags operation.
func (c *ELB) RemoveTagsRequest(input *RemoveTagsInput) (req *aws.Request, output *RemoveTagsOutput) {
	if opRemoveTags == nil {
		opRemoveTags = &aws.Operation{
			Name:       "RemoveTags",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opRemoveTags, input, output)
	output = &RemoveTagsOutput{}
	req.Data = output
	return
}

func (c *ELB) RemoveTags(input *RemoveTagsInput) (output *RemoveTagsOutput, err error) {
	req, out := c.RemoveTagsRequest(input)
	output = out
	err = req.Send()
	return
}

var opRemoveTags *aws.Operation

// SetLoadBalancerListenerSSLCertificateRequest generates a request for the SetLoadBalancerListenerSSLCertificate operation.
func (c *ELB) SetLoadBalancerListenerSSLCertificateRequest(input *SetLoadBalancerListenerSSLCertificateInput) (req *aws.Request, output *SetLoadBalancerListenerSSLCertificateOutput) {
	if opSetLoadBalancerListenerSSLCertificate == nil {
		opSetLoadBalancerListenerSSLCertificate = &aws.Operation{
			Name:       "SetLoadBalancerListenerSSLCertificate",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opSetLoadBalancerListenerSSLCertificate, input, output)
	output = &SetLoadBalancerListenerSSLCertificateOutput{}
	req.Data = output
	return
}

func (c *ELB) SetLoadBalancerListenerSSLCertificate(input *SetLoadBalancerListenerSSLCertificateInput) (output *SetLoadBalancerListenerSSLCertificateOutput, err error) {
	req, out := c.SetLoadBalancerListenerSSLCertificateRequest(input)
	output = out
	err = req.Send()
	return
}

var opSetLoadBalancerListenerSSLCertificate *aws.Operation

// SetLoadBalancerPoliciesForBackendServerRequest generates a request for the SetLoadBalancerPoliciesForBackendServer operation.
func (c *ELB) SetLoadBalancerPoliciesForBackendServerRequest(input *SetLoadBalancerPoliciesForBackendServerInput) (req *aws.Request, output *SetLoadBalancerPoliciesForBackendServerOutput) {
	if opSetLoadBalancerPoliciesForBackendServer == nil {
		opSetLoadBalancerPoliciesForBackendServer = &aws.Operation{
			Name:       "SetLoadBalancerPoliciesForBackendServer",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opSetLoadBalancerPoliciesForBackendServer, input, output)
	output = &SetLoadBalancerPoliciesForBackendServerOutput{}
	req.Data = output
	return
}

func (c *ELB) SetLoadBalancerPoliciesForBackendServer(input *SetLoadBalancerPoliciesForBackendServerInput) (output *SetLoadBalancerPoliciesForBackendServerOutput, err error) {
	req, out := c.SetLoadBalancerPoliciesForBackendServerRequest(input)
	output = out
	err = req.Send()
	return
}

var opSetLoadBalancerPoliciesForBackendServer *aws.Operation

// SetLoadBalancerPoliciesOfListenerRequest generates a request for the SetLoadBalancerPoliciesOfListener operation.
func (c *ELB) SetLoadBalancerPoliciesOfListenerRequest(input *SetLoadBalancerPoliciesOfListenerInput) (req *aws.Request, output *SetLoadBalancerPoliciesOfListenerOutput) {
	if opSetLoadBalancerPoliciesOfListener == nil {
		opSetLoadBalancerPoliciesOfListener = &aws.Operation{
			Name:       "SetLoadBalancerPoliciesOfListener",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opSetLoadBalancerPoliciesOfListener, input, output)
	output = &SetLoadBalancerPoliciesOfListenerOutput{}
	req.Data = output
	return
}

func (c *ELB) SetLoadBalancerPoliciesOfListener(input *SetLoadBalancerPoliciesOfListenerInput) (output *SetLoadBalancerPoliciesOfListenerOutput, err error) {
	req, out := c.SetLoadBalancerPoliciesOfListenerRequest(input)
	output = out
	err = req.Send()
	return
}

var opSetLoadBalancerPoliciesOfListener *aws.Operation

type AccessLog struct {
	EmitInterval   *int    `type:"integer"`
	Enabled        *bool   `type:"boolean"`
	S3BucketName   *string `type:"string"`
	S3BucketPrefix *string `type:"string"`

	metadataAccessLog `json:"-", xml:"-"`
}

type metadataAccessLog struct {
	SDKShapeTraits bool `type:"structure" required:"Enabled"`
}

type AddTagsInput struct {
	LoadBalancerNames []*string `type:"list"`
	Tags              []*Tag    `type:"list"`

	metadataAddTagsInput `json:"-", xml:"-"`
}

type metadataAddTagsInput struct {
	SDKShapeTraits bool `type:"structure" required:"LoadBalancerNames,Tags"`
}

type AddTagsOutput struct {
	metadataAddTagsOutput `json:"-", xml:"-"`
}

type metadataAddTagsOutput struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"AddTagsResult"`
}

type AdditionalAttribute struct {
	Key   *string `type:"string"`
	Value *string `type:"string"`

	metadataAdditionalAttribute `json:"-", xml:"-"`
}

type metadataAdditionalAttribute struct {
	SDKShapeTraits bool `type:"structure"`
}

type AppCookieStickinessPolicy struct {
	CookieName *string `type:"string"`
	PolicyName *string `type:"string"`

	metadataAppCookieStickinessPolicy `json:"-", xml:"-"`
}

type metadataAppCookieStickinessPolicy struct {
	SDKShapeTraits bool `type:"structure"`
}

type ApplySecurityGroupsToLoadBalancerInput struct {
	LoadBalancerName *string   `type:"string"`
	SecurityGroups   []*string `type:"list"`

	metadataApplySecurityGroupsToLoadBalancerInput `json:"-", xml:"-"`
}

type metadataApplySecurityGroupsToLoadBalancerInput struct {
	SDKShapeTraits bool `type:"structure" required:"LoadBalancerName,SecurityGroups"`
}

type ApplySecurityGroupsToLoadBalancerOutput struct {
	SecurityGroups []*string `type:"list"`

	metadataApplySecurityGroupsToLoadBalancerOutput `json:"-", xml:"-"`
}

type metadataApplySecurityGroupsToLoadBalancerOutput struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"ApplySecurityGroupsToLoadBalancerResult"`
}

type AttachLoadBalancerToSubnetsInput struct {
	LoadBalancerName *string   `type:"string"`
	Subnets          []*string `type:"list"`

	metadataAttachLoadBalancerToSubnetsInput `json:"-", xml:"-"`
}

type metadataAttachLoadBalancerToSubnetsInput struct {
	SDKShapeTraits bool `type:"structure" required:"LoadBalancerName,Subnets"`
}

type AttachLoadBalancerToSubnetsOutput struct {
	Subnets []*string `type:"list"`

	metadataAttachLoadBalancerToSubnetsOutput `json:"-", xml:"-"`
}

type metadataAttachLoadBalancerToSubnetsOutput struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"AttachLoadBalancerToSubnetsResult"`
}

type BackendServerDescription struct {
	InstancePort *int      `type:"integer"`
	PolicyNames  []*string `type:"list"`

	metadataBackendServerDescription `json:"-", xml:"-"`
}

type metadataBackendServerDescription struct {
	SDKShapeTraits bool `type:"structure"`
}

type ConfigureHealthCheckInput struct {
	HealthCheck      *HealthCheck `type:"structure"`
	LoadBalancerName *string      `type:"string"`

	metadataConfigureHealthCheckInput `json:"-", xml:"-"`
}

type metadataConfigureHealthCheckInput struct {
	SDKShapeTraits bool `type:"structure" required:"LoadBalancerName,HealthCheck"`
}

type ConfigureHealthCheckOutput struct {
	HealthCheck *HealthCheck `type:"structure"`

	metadataConfigureHealthCheckOutput `json:"-", xml:"-"`
}

type metadataConfigureHealthCheckOutput struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"ConfigureHealthCheckResult"`
}

type ConnectionDraining struct {
	Enabled *bool `type:"boolean"`
	Timeout *int  `type:"integer"`

	metadataConnectionDraining `json:"-", xml:"-"`
}

type metadataConnectionDraining struct {
	SDKShapeTraits bool `type:"structure" required:"Enabled"`
}

type ConnectionSettings struct {
	IdleTimeout *int `type:"integer"`

	metadataConnectionSettings `json:"-", xml:"-"`
}

type metadataConnectionSettings struct {
	SDKShapeTraits bool `type:"structure" required:"IdleTimeout"`
}

type CreateAppCookieStickinessPolicyInput struct {
	CookieName       *string `type:"string"`
	LoadBalancerName *string `type:"string"`
	PolicyName       *string `type:"string"`

	metadataCreateAppCookieStickinessPolicyInput `json:"-", xml:"-"`
}

type metadataCreateAppCookieStickinessPolicyInput struct {
	SDKShapeTraits bool `type:"structure" required:"LoadBalancerName,PolicyName,CookieName"`
}

type CreateAppCookieStickinessPolicyOutput struct {
	metadataCreateAppCookieStickinessPolicyOutput `json:"-", xml:"-"`
}

type metadataCreateAppCookieStickinessPolicyOutput struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"CreateAppCookieStickinessPolicyResult"`
}

type CreateLBCookieStickinessPolicyInput struct {
	CookieExpirationPeriod *int64  `type:"long"`
	LoadBalancerName       *string `type:"string"`
	PolicyName             *string `type:"string"`

	metadataCreateLBCookieStickinessPolicyInput `json:"-", xml:"-"`
}

type metadataCreateLBCookieStickinessPolicyInput struct {
	SDKShapeTraits bool `type:"structure" required:"LoadBalancerName,PolicyName"`
}

type CreateLBCookieStickinessPolicyOutput struct {
	metadataCreateLBCookieStickinessPolicyOutput `json:"-", xml:"-"`
}

type metadataCreateLBCookieStickinessPolicyOutput struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"CreateLBCookieStickinessPolicyResult"`
}

type CreateLoadBalancerInput struct {
	AvailabilityZones []*string   `type:"list"`
	Listeners         []*Listener `type:"list"`
	LoadBalancerName  *string     `type:"string"`
	Scheme            *string     `type:"string"`
	SecurityGroups    []*string   `type:"list"`
	Subnets           []*string   `type:"list"`
	Tags              []*Tag      `type:"list"`

	metadataCreateLoadBalancerInput `json:"-", xml:"-"`
}

type metadataCreateLoadBalancerInput struct {
	SDKShapeTraits bool `type:"structure" required:"LoadBalancerName,Listeners"`
}

type CreateLoadBalancerListenersInput struct {
	Listeners        []*Listener `type:"list"`
	LoadBalancerName *string     `type:"string"`

	metadataCreateLoadBalancerListenersInput `json:"-", xml:"-"`
}

type metadataCreateLoadBalancerListenersInput struct {
	SDKShapeTraits bool `type:"structure" required:"LoadBalancerName,Listeners"`
}

type CreateLoadBalancerListenersOutput struct {
	metadataCreateLoadBalancerListenersOutput `json:"-", xml:"-"`
}

type metadataCreateLoadBalancerListenersOutput struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"CreateLoadBalancerListenersResult"`
}

type CreateLoadBalancerOutput struct {
	DNSName *string `type:"string"`

	metadataCreateLoadBalancerOutput `json:"-", xml:"-"`
}

type metadataCreateLoadBalancerOutput struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"CreateLoadBalancerResult"`
}

type CreateLoadBalancerPolicyInput struct {
	LoadBalancerName *string            `type:"string"`
	PolicyAttributes []*PolicyAttribute `type:"list"`
	PolicyName       *string            `type:"string"`
	PolicyTypeName   *string            `type:"string"`

	metadataCreateLoadBalancerPolicyInput `json:"-", xml:"-"`
}

type metadataCreateLoadBalancerPolicyInput struct {
	SDKShapeTraits bool `type:"structure" required:"LoadBalancerName,PolicyName,PolicyTypeName"`
}

type CreateLoadBalancerPolicyOutput struct {
	metadataCreateLoadBalancerPolicyOutput `json:"-", xml:"-"`
}

type metadataCreateLoadBalancerPolicyOutput struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"CreateLoadBalancerPolicyResult"`
}

type CrossZoneLoadBalancing struct {
	Enabled *bool `type:"boolean"`

	metadataCrossZoneLoadBalancing `json:"-", xml:"-"`
}

type metadataCrossZoneLoadBalancing struct {
	SDKShapeTraits bool `type:"structure" required:"Enabled"`
}

type DeleteLoadBalancerInput struct {
	LoadBalancerName *string `type:"string"`

	metadataDeleteLoadBalancerInput `json:"-", xml:"-"`
}

type metadataDeleteLoadBalancerInput struct {
	SDKShapeTraits bool `type:"structure" required:"LoadBalancerName"`
}

type DeleteLoadBalancerListenersInput struct {
	LoadBalancerName  *string `type:"string"`
	LoadBalancerPorts []*int  `type:"list"`

	metadataDeleteLoadBalancerListenersInput `json:"-", xml:"-"`
}

type metadataDeleteLoadBalancerListenersInput struct {
	SDKShapeTraits bool `type:"structure" required:"LoadBalancerName,LoadBalancerPorts"`
}

type DeleteLoadBalancerListenersOutput struct {
	metadataDeleteLoadBalancerListenersOutput `json:"-", xml:"-"`
}

type metadataDeleteLoadBalancerListenersOutput struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"DeleteLoadBalancerListenersResult"`
}

type DeleteLoadBalancerOutput struct {
	metadataDeleteLoadBalancerOutput `json:"-", xml:"-"`
}

type metadataDeleteLoadBalancerOutput struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"DeleteLoadBalancerResult"`
}

type DeleteLoadBalancerPolicyInput struct {
	LoadBalancerName *string `type:"string"`
	PolicyName       *string `type:"string"`

	metadataDeleteLoadBalancerPolicyInput `json:"-", xml:"-"`
}

type metadataDeleteLoadBalancerPolicyInput struct {
	SDKShapeTraits bool `type:"structure" required:"LoadBalancerName,PolicyName"`
}

type DeleteLoadBalancerPolicyOutput struct {
	metadataDeleteLoadBalancerPolicyOutput `json:"-", xml:"-"`
}

type metadataDeleteLoadBalancerPolicyOutput struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"DeleteLoadBalancerPolicyResult"`
}

type DeregisterInstancesFromLoadBalancerInput struct {
	Instances        []*Instance `type:"list"`
	LoadBalancerName *string     `type:"string"`

	metadataDeregisterInstancesFromLoadBalancerInput `json:"-", xml:"-"`
}

type metadataDeregisterInstancesFromLoadBalancerInput struct {
	SDKShapeTraits bool `type:"structure" required:"LoadBalancerName,Instances"`
}

type DeregisterInstancesFromLoadBalancerOutput struct {
	Instances []*Instance `type:"list"`

	metadataDeregisterInstancesFromLoadBalancerOutput `json:"-", xml:"-"`
}

type metadataDeregisterInstancesFromLoadBalancerOutput struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"DeregisterInstancesFromLoadBalancerResult"`
}

type DescribeInstanceHealthInput struct {
	Instances        []*Instance `type:"list"`
	LoadBalancerName *string     `type:"string"`

	metadataDescribeInstanceHealthInput `json:"-", xml:"-"`
}

type metadataDescribeInstanceHealthInput struct {
	SDKShapeTraits bool `type:"structure" required:"LoadBalancerName"`
}

type DescribeInstanceHealthOutput struct {
	InstanceStates []*InstanceState `type:"list"`

	metadataDescribeInstanceHealthOutput `json:"-", xml:"-"`
}

type metadataDescribeInstanceHealthOutput struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"DescribeInstanceHealthResult"`
}

type DescribeLoadBalancerAttributesInput struct {
	LoadBalancerName *string `type:"string"`

	metadataDescribeLoadBalancerAttributesInput `json:"-", xml:"-"`
}

type metadataDescribeLoadBalancerAttributesInput struct {
	SDKShapeTraits bool `type:"structure" required:"LoadBalancerName"`
}

type DescribeLoadBalancerAttributesOutput struct {
	LoadBalancerAttributes *LoadBalancerAttributes `type:"structure"`

	metadataDescribeLoadBalancerAttributesOutput `json:"-", xml:"-"`
}

type metadataDescribeLoadBalancerAttributesOutput struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"DescribeLoadBalancerAttributesResult"`
}

type DescribeLoadBalancerPoliciesInput struct {
	LoadBalancerName *string   `type:"string"`
	PolicyNames      []*string `type:"list"`

	metadataDescribeLoadBalancerPoliciesInput `json:"-", xml:"-"`
}

type metadataDescribeLoadBalancerPoliciesInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeLoadBalancerPoliciesOutput struct {
	PolicyDescriptions []*PolicyDescription `type:"list"`

	metadataDescribeLoadBalancerPoliciesOutput `json:"-", xml:"-"`
}

type metadataDescribeLoadBalancerPoliciesOutput struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"DescribeLoadBalancerPoliciesResult"`
}

type DescribeLoadBalancerPolicyTypesInput struct {
	PolicyTypeNames []*string `type:"list"`

	metadataDescribeLoadBalancerPolicyTypesInput `json:"-", xml:"-"`
}

type metadataDescribeLoadBalancerPolicyTypesInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeLoadBalancerPolicyTypesOutput struct {
	PolicyTypeDescriptions []*PolicyTypeDescription `type:"list"`

	metadataDescribeLoadBalancerPolicyTypesOutput `json:"-", xml:"-"`
}

type metadataDescribeLoadBalancerPolicyTypesOutput struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"DescribeLoadBalancerPolicyTypesResult"`
}

type DescribeLoadBalancersInput struct {
	LoadBalancerNames []*string `type:"list"`
	Marker            *string   `type:"string"`
	PageSize          *int      `type:"integer"`

	metadataDescribeLoadBalancersInput `json:"-", xml:"-"`
}

type metadataDescribeLoadBalancersInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeLoadBalancersOutput struct {
	LoadBalancerDescriptions []*LoadBalancerDescription `type:"list"`
	NextMarker               *string                    `type:"string"`

	metadataDescribeLoadBalancersOutput `json:"-", xml:"-"`
}

type metadataDescribeLoadBalancersOutput struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"DescribeLoadBalancersResult"`
}

type DescribeTagsInput struct {
	LoadBalancerNames []*string `type:"list"`

	metadataDescribeTagsInput `json:"-", xml:"-"`
}

type metadataDescribeTagsInput struct {
	SDKShapeTraits bool `type:"structure" required:"LoadBalancerNames"`
}

type DescribeTagsOutput struct {
	TagDescriptions []*TagDescription `type:"list"`

	metadataDescribeTagsOutput `json:"-", xml:"-"`
}

type metadataDescribeTagsOutput struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"DescribeTagsResult"`
}

type DetachLoadBalancerFromSubnetsInput struct {
	LoadBalancerName *string   `type:"string"`
	Subnets          []*string `type:"list"`

	metadataDetachLoadBalancerFromSubnetsInput `json:"-", xml:"-"`
}

type metadataDetachLoadBalancerFromSubnetsInput struct {
	SDKShapeTraits bool `type:"structure" required:"LoadBalancerName,Subnets"`
}

type DetachLoadBalancerFromSubnetsOutput struct {
	Subnets []*string `type:"list"`

	metadataDetachLoadBalancerFromSubnetsOutput `json:"-", xml:"-"`
}

type metadataDetachLoadBalancerFromSubnetsOutput struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"DetachLoadBalancerFromSubnetsResult"`
}

type DisableAvailabilityZonesForLoadBalancerInput struct {
	AvailabilityZones []*string `type:"list"`
	LoadBalancerName  *string   `type:"string"`

	metadataDisableAvailabilityZonesForLoadBalancerInput `json:"-", xml:"-"`
}

type metadataDisableAvailabilityZonesForLoadBalancerInput struct {
	SDKShapeTraits bool `type:"structure" required:"LoadBalancerName,AvailabilityZones"`
}

type DisableAvailabilityZonesForLoadBalancerOutput struct {
	AvailabilityZones []*string `type:"list"`

	metadataDisableAvailabilityZonesForLoadBalancerOutput `json:"-", xml:"-"`
}

type metadataDisableAvailabilityZonesForLoadBalancerOutput struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"DisableAvailabilityZonesForLoadBalancerResult"`
}

type EnableAvailabilityZonesForLoadBalancerInput struct {
	AvailabilityZones []*string `type:"list"`
	LoadBalancerName  *string   `type:"string"`

	metadataEnableAvailabilityZonesForLoadBalancerInput `json:"-", xml:"-"`
}

type metadataEnableAvailabilityZonesForLoadBalancerInput struct {
	SDKShapeTraits bool `type:"structure" required:"LoadBalancerName,AvailabilityZones"`
}

type EnableAvailabilityZonesForLoadBalancerOutput struct {
	AvailabilityZones []*string `type:"list"`

	metadataEnableAvailabilityZonesForLoadBalancerOutput `json:"-", xml:"-"`
}

type metadataEnableAvailabilityZonesForLoadBalancerOutput struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"EnableAvailabilityZonesForLoadBalancerResult"`
}

type HealthCheck struct {
	HealthyThreshold   *int    `type:"integer"`
	Interval           *int    `type:"integer"`
	Target             *string `type:"string"`
	Timeout            *int    `type:"integer"`
	UnhealthyThreshold *int    `type:"integer"`

	metadataHealthCheck `json:"-", xml:"-"`
}

type metadataHealthCheck struct {
	SDKShapeTraits bool `type:"structure" required:"Target,Interval,Timeout,UnhealthyThreshold,HealthyThreshold"`
}

type Instance struct {
	InstanceID *string `locationName:"InstanceId" type:"string"`

	metadataInstance `json:"-", xml:"-"`
}

type metadataInstance struct {
	SDKShapeTraits bool `type:"structure"`
}

type InstanceState struct {
	Description *string `type:"string"`
	InstanceID  *string `locationName:"InstanceId" type:"string"`
	ReasonCode  *string `type:"string"`
	State       *string `type:"string"`

	metadataInstanceState `json:"-", xml:"-"`
}

type metadataInstanceState struct {
	SDKShapeTraits bool `type:"structure"`
}

type LBCookieStickinessPolicy struct {
	CookieExpirationPeriod *int64  `type:"long"`
	PolicyName             *string `type:"string"`

	metadataLBCookieStickinessPolicy `json:"-", xml:"-"`
}

type metadataLBCookieStickinessPolicy struct {
	SDKShapeTraits bool `type:"structure"`
}

type Listener struct {
	InstancePort     *int    `type:"integer"`
	InstanceProtocol *string `type:"string"`
	LoadBalancerPort *int    `type:"integer"`
	Protocol         *string `type:"string"`
	SSLCertificateID *string `locationName:"SSLCertificateId" type:"string"`

	metadataListener `json:"-", xml:"-"`
}

type metadataListener struct {
	SDKShapeTraits bool `type:"structure" required:"Protocol,LoadBalancerPort,InstancePort"`
}

type ListenerDescription struct {
	Listener    *Listener `type:"structure"`
	PolicyNames []*string `type:"list"`

	metadataListenerDescription `json:"-", xml:"-"`
}

type metadataListenerDescription struct {
	SDKShapeTraits bool `type:"structure"`
}

type LoadBalancerAttributes struct {
	AccessLog              *AccessLog              `type:"structure"`
	AdditionalAttributes   []*AdditionalAttribute  `type:"list"`
	ConnectionDraining     *ConnectionDraining     `type:"structure"`
	ConnectionSettings     *ConnectionSettings     `type:"structure"`
	CrossZoneLoadBalancing *CrossZoneLoadBalancing `type:"structure"`

	metadataLoadBalancerAttributes `json:"-", xml:"-"`
}

type metadataLoadBalancerAttributes struct {
	SDKShapeTraits bool `type:"structure"`
}

type LoadBalancerDescription struct {
	AvailabilityZones         []*string                   `type:"list"`
	BackendServerDescriptions []*BackendServerDescription `type:"list"`
	CanonicalHostedZoneName   *string                     `type:"string"`
	CanonicalHostedZoneNameID *string                     `type:"string"`
	CreatedTime               *time.Time                  `type:"timestamp" timestampFormat:"iso8601"`
	DNSName                   *string                     `type:"string"`
	HealthCheck               *HealthCheck                `type:"structure"`
	Instances                 []*Instance                 `type:"list"`
	ListenerDescriptions      []*ListenerDescription      `type:"list"`
	LoadBalancerName          *string                     `type:"string"`
	Policies                  *Policies                   `type:"structure"`
	Scheme                    *string                     `type:"string"`
	SecurityGroups            []*string                   `type:"list"`
	SourceSecurityGroup       *SourceSecurityGroup        `type:"structure"`
	Subnets                   []*string                   `type:"list"`
	VPCID                     *string                     `locationName:"VPCId" type:"string"`

	metadataLoadBalancerDescription `json:"-", xml:"-"`
}

type metadataLoadBalancerDescription struct {
	SDKShapeTraits bool `type:"structure"`
}

type ModifyLoadBalancerAttributesInput struct {
	LoadBalancerAttributes *LoadBalancerAttributes `type:"structure"`
	LoadBalancerName       *string                 `type:"string"`

	metadataModifyLoadBalancerAttributesInput `json:"-", xml:"-"`
}

type metadataModifyLoadBalancerAttributesInput struct {
	SDKShapeTraits bool `type:"structure" required:"LoadBalancerName,LoadBalancerAttributes"`
}

type ModifyLoadBalancerAttributesOutput struct {
	LoadBalancerAttributes *LoadBalancerAttributes `type:"structure"`
	LoadBalancerName       *string                 `type:"string"`

	metadataModifyLoadBalancerAttributesOutput `json:"-", xml:"-"`
}

type metadataModifyLoadBalancerAttributesOutput struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"ModifyLoadBalancerAttributesResult"`
}

type Policies struct {
	AppCookieStickinessPolicies []*AppCookieStickinessPolicy `type:"list"`
	LBCookieStickinessPolicies  []*LBCookieStickinessPolicy  `type:"list"`
	OtherPolicies               []*string                    `type:"list"`

	metadataPolicies `json:"-", xml:"-"`
}

type metadataPolicies struct {
	SDKShapeTraits bool `type:"structure"`
}

type PolicyAttribute struct {
	AttributeName  *string `type:"string"`
	AttributeValue *string `type:"string"`

	metadataPolicyAttribute `json:"-", xml:"-"`
}

type metadataPolicyAttribute struct {
	SDKShapeTraits bool `type:"structure"`
}

type PolicyAttributeDescription struct {
	AttributeName  *string `type:"string"`
	AttributeValue *string `type:"string"`

	metadataPolicyAttributeDescription `json:"-", xml:"-"`
}

type metadataPolicyAttributeDescription struct {
	SDKShapeTraits bool `type:"structure"`
}

type PolicyAttributeTypeDescription struct {
	AttributeName *string `type:"string"`
	AttributeType *string `type:"string"`
	Cardinality   *string `type:"string"`
	DefaultValue  *string `type:"string"`
	Description   *string `type:"string"`

	metadataPolicyAttributeTypeDescription `json:"-", xml:"-"`
}

type metadataPolicyAttributeTypeDescription struct {
	SDKShapeTraits bool `type:"structure"`
}

type PolicyDescription struct {
	PolicyAttributeDescriptions []*PolicyAttributeDescription `type:"list"`
	PolicyName                  *string                       `type:"string"`
	PolicyTypeName              *string                       `type:"string"`

	metadataPolicyDescription `json:"-", xml:"-"`
}

type metadataPolicyDescription struct {
	SDKShapeTraits bool `type:"structure"`
}

type PolicyTypeDescription struct {
	Description                     *string                           `type:"string"`
	PolicyAttributeTypeDescriptions []*PolicyAttributeTypeDescription `type:"list"`
	PolicyTypeName                  *string                           `type:"string"`

	metadataPolicyTypeDescription `json:"-", xml:"-"`
}

type metadataPolicyTypeDescription struct {
	SDKShapeTraits bool `type:"structure"`
}

type RegisterInstancesWithLoadBalancerInput struct {
	Instances        []*Instance `type:"list"`
	LoadBalancerName *string     `type:"string"`

	metadataRegisterInstancesWithLoadBalancerInput `json:"-", xml:"-"`
}

type metadataRegisterInstancesWithLoadBalancerInput struct {
	SDKShapeTraits bool `type:"structure" required:"LoadBalancerName,Instances"`
}

type RegisterInstancesWithLoadBalancerOutput struct {
	Instances []*Instance `type:"list"`

	metadataRegisterInstancesWithLoadBalancerOutput `json:"-", xml:"-"`
}

type metadataRegisterInstancesWithLoadBalancerOutput struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"RegisterInstancesWithLoadBalancerResult"`
}

type RemoveTagsInput struct {
	LoadBalancerNames []*string     `type:"list"`
	Tags              []*TagKeyOnly `type:"list"`

	metadataRemoveTagsInput `json:"-", xml:"-"`
}

type metadataRemoveTagsInput struct {
	SDKShapeTraits bool `type:"structure" required:"LoadBalancerNames,Tags"`
}

type RemoveTagsOutput struct {
	metadataRemoveTagsOutput `json:"-", xml:"-"`
}

type metadataRemoveTagsOutput struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"RemoveTagsResult"`
}

type SetLoadBalancerListenerSSLCertificateInput struct {
	LoadBalancerName *string `type:"string"`
	LoadBalancerPort *int    `type:"integer"`
	SSLCertificateID *string `locationName:"SSLCertificateId" type:"string"`

	metadataSetLoadBalancerListenerSSLCertificateInput `json:"-", xml:"-"`
}

type metadataSetLoadBalancerListenerSSLCertificateInput struct {
	SDKShapeTraits bool `type:"structure" required:"LoadBalancerName,LoadBalancerPort,SSLCertificateId"`
}

type SetLoadBalancerListenerSSLCertificateOutput struct {
	metadataSetLoadBalancerListenerSSLCertificateOutput `json:"-", xml:"-"`
}

type metadataSetLoadBalancerListenerSSLCertificateOutput struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"SetLoadBalancerListenerSSLCertificateResult"`
}

type SetLoadBalancerPoliciesForBackendServerInput struct {
	InstancePort     *int      `type:"integer"`
	LoadBalancerName *string   `type:"string"`
	PolicyNames      []*string `type:"list"`

	metadataSetLoadBalancerPoliciesForBackendServerInput `json:"-", xml:"-"`
}

type metadataSetLoadBalancerPoliciesForBackendServerInput struct {
	SDKShapeTraits bool `type:"structure" required:"LoadBalancerName,InstancePort,PolicyNames"`
}

type SetLoadBalancerPoliciesForBackendServerOutput struct {
	metadataSetLoadBalancerPoliciesForBackendServerOutput `json:"-", xml:"-"`
}

type metadataSetLoadBalancerPoliciesForBackendServerOutput struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"SetLoadBalancerPoliciesForBackendServerResult"`
}

type SetLoadBalancerPoliciesOfListenerInput struct {
	LoadBalancerName *string   `type:"string"`
	LoadBalancerPort *int      `type:"integer"`
	PolicyNames      []*string `type:"list"`

	metadataSetLoadBalancerPoliciesOfListenerInput `json:"-", xml:"-"`
}

type metadataSetLoadBalancerPoliciesOfListenerInput struct {
	SDKShapeTraits bool `type:"structure" required:"LoadBalancerName,LoadBalancerPort,PolicyNames"`
}

type SetLoadBalancerPoliciesOfListenerOutput struct {
	metadataSetLoadBalancerPoliciesOfListenerOutput `json:"-", xml:"-"`
}

type metadataSetLoadBalancerPoliciesOfListenerOutput struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"SetLoadBalancerPoliciesOfListenerResult"`
}

type SourceSecurityGroup struct {
	GroupName  *string `type:"string"`
	OwnerAlias *string `type:"string"`

	metadataSourceSecurityGroup `json:"-", xml:"-"`
}

type metadataSourceSecurityGroup struct {
	SDKShapeTraits bool `type:"structure"`
}

type Tag struct {
	Key   *string `type:"string"`
	Value *string `type:"string"`

	metadataTag `json:"-", xml:"-"`
}

type metadataTag struct {
	SDKShapeTraits bool `type:"structure" required:"Key"`
}

type TagDescription struct {
	LoadBalancerName *string `type:"string"`
	Tags             []*Tag  `type:"list"`

	metadataTagDescription `json:"-", xml:"-"`
}

type metadataTagDescription struct {
	SDKShapeTraits bool `type:"structure"`
}

type TagKeyOnly struct {
	Key *string `type:"string"`

	metadataTagKeyOnly `json:"-", xml:"-"`
}

type metadataTagKeyOnly struct {
	SDKShapeTraits bool `type:"structure"`
}