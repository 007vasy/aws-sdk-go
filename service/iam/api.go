package iam

// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.

import (
	"time"

	"github.com/awslabs/aws-sdk-go/aws"
)

// AddClientIDToOpenIDConnectProviderRequest generates a request for the AddClientIDToOpenIDConnectProvider operation.
func (c *IAM) AddClientIDToOpenIDConnectProviderRequest(input *AddClientIDToOpenIDConnectProviderInput) (req *aws.Request) {
	if opAddClientIDToOpenIDConnectProvider == nil {
		opAddClientIDToOpenIDConnectProvider = &aws.Operation{
			Name:       "AddClientIDToOpenIDConnectProvider",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opAddClientIDToOpenIDConnectProvider, input, nil)

	return
}

func (c *IAM) AddClientIDToOpenIDConnectProvider(input *AddClientIDToOpenIDConnectProviderInput) (err error) {
	req := c.AddClientIDToOpenIDConnectProviderRequest(input)
	err = req.Send()
	return
}

var opAddClientIDToOpenIDConnectProvider *aws.Operation

// AddRoleToInstanceProfileRequest generates a request for the AddRoleToInstanceProfile operation.
func (c *IAM) AddRoleToInstanceProfileRequest(input *AddRoleToInstanceProfileInput) (req *aws.Request) {
	if opAddRoleToInstanceProfile == nil {
		opAddRoleToInstanceProfile = &aws.Operation{
			Name:       "AddRoleToInstanceProfile",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opAddRoleToInstanceProfile, input, nil)

	return
}

func (c *IAM) AddRoleToInstanceProfile(input *AddRoleToInstanceProfileInput) (err error) {
	req := c.AddRoleToInstanceProfileRequest(input)
	err = req.Send()
	return
}

var opAddRoleToInstanceProfile *aws.Operation

// AddUserToGroupRequest generates a request for the AddUserToGroup operation.
func (c *IAM) AddUserToGroupRequest(input *AddUserToGroupInput) (req *aws.Request) {
	if opAddUserToGroup == nil {
		opAddUserToGroup = &aws.Operation{
			Name:       "AddUserToGroup",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opAddUserToGroup, input, nil)

	return
}

func (c *IAM) AddUserToGroup(input *AddUserToGroupInput) (err error) {
	req := c.AddUserToGroupRequest(input)
	err = req.Send()
	return
}

var opAddUserToGroup *aws.Operation

// AttachGroupPolicyRequest generates a request for the AttachGroupPolicy operation.
func (c *IAM) AttachGroupPolicyRequest(input *AttachGroupPolicyInput) (req *aws.Request) {
	if opAttachGroupPolicy == nil {
		opAttachGroupPolicy = &aws.Operation{
			Name:       "AttachGroupPolicy",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opAttachGroupPolicy, input, nil)

	return
}

func (c *IAM) AttachGroupPolicy(input *AttachGroupPolicyInput) (err error) {
	req := c.AttachGroupPolicyRequest(input)
	err = req.Send()
	return
}

var opAttachGroupPolicy *aws.Operation

// AttachRolePolicyRequest generates a request for the AttachRolePolicy operation.
func (c *IAM) AttachRolePolicyRequest(input *AttachRolePolicyInput) (req *aws.Request) {
	if opAttachRolePolicy == nil {
		opAttachRolePolicy = &aws.Operation{
			Name:       "AttachRolePolicy",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opAttachRolePolicy, input, nil)

	return
}

func (c *IAM) AttachRolePolicy(input *AttachRolePolicyInput) (err error) {
	req := c.AttachRolePolicyRequest(input)
	err = req.Send()
	return
}

var opAttachRolePolicy *aws.Operation

// AttachUserPolicyRequest generates a request for the AttachUserPolicy operation.
func (c *IAM) AttachUserPolicyRequest(input *AttachUserPolicyInput) (req *aws.Request) {
	if opAttachUserPolicy == nil {
		opAttachUserPolicy = &aws.Operation{
			Name:       "AttachUserPolicy",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opAttachUserPolicy, input, nil)

	return
}

func (c *IAM) AttachUserPolicy(input *AttachUserPolicyInput) (err error) {
	req := c.AttachUserPolicyRequest(input)
	err = req.Send()
	return
}

var opAttachUserPolicy *aws.Operation

// ChangePasswordRequest generates a request for the ChangePassword operation.
func (c *IAM) ChangePasswordRequest(input *ChangePasswordInput) (req *aws.Request) {
	if opChangePassword == nil {
		opChangePassword = &aws.Operation{
			Name:       "ChangePassword",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opChangePassword, input, nil)

	return
}

func (c *IAM) ChangePassword(input *ChangePasswordInput) (err error) {
	req := c.ChangePasswordRequest(input)
	err = req.Send()
	return
}

var opChangePassword *aws.Operation

// CreateAccessKeyRequest generates a request for the CreateAccessKey operation.
func (c *IAM) CreateAccessKeyRequest(input *CreateAccessKeyInput) (req *aws.Request, output *CreateAccessKeyOutput) {
	if opCreateAccessKey == nil {
		opCreateAccessKey = &aws.Operation{
			Name:       "CreateAccessKey",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opCreateAccessKey, input, output)
	output = &CreateAccessKeyOutput{}
	req.Data = output
	return
}

func (c *IAM) CreateAccessKey(input *CreateAccessKeyInput) (output *CreateAccessKeyOutput, err error) {
	req, out := c.CreateAccessKeyRequest(input)
	output = out
	err = req.Send()
	return
}

var opCreateAccessKey *aws.Operation

// CreateAccountAliasRequest generates a request for the CreateAccountAlias operation.
func (c *IAM) CreateAccountAliasRequest(input *CreateAccountAliasInput) (req *aws.Request) {
	if opCreateAccountAlias == nil {
		opCreateAccountAlias = &aws.Operation{
			Name:       "CreateAccountAlias",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opCreateAccountAlias, input, nil)

	return
}

func (c *IAM) CreateAccountAlias(input *CreateAccountAliasInput) (err error) {
	req := c.CreateAccountAliasRequest(input)
	err = req.Send()
	return
}

var opCreateAccountAlias *aws.Operation

// CreateGroupRequest generates a request for the CreateGroup operation.
func (c *IAM) CreateGroupRequest(input *CreateGroupInput) (req *aws.Request, output *CreateGroupOutput) {
	if opCreateGroup == nil {
		opCreateGroup = &aws.Operation{
			Name:       "CreateGroup",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opCreateGroup, input, output)
	output = &CreateGroupOutput{}
	req.Data = output
	return
}

func (c *IAM) CreateGroup(input *CreateGroupInput) (output *CreateGroupOutput, err error) {
	req, out := c.CreateGroupRequest(input)
	output = out
	err = req.Send()
	return
}

var opCreateGroup *aws.Operation

// CreateInstanceProfileRequest generates a request for the CreateInstanceProfile operation.
func (c *IAM) CreateInstanceProfileRequest(input *CreateInstanceProfileInput) (req *aws.Request, output *CreateInstanceProfileOutput) {
	if opCreateInstanceProfile == nil {
		opCreateInstanceProfile = &aws.Operation{
			Name:       "CreateInstanceProfile",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opCreateInstanceProfile, input, output)
	output = &CreateInstanceProfileOutput{}
	req.Data = output
	return
}

func (c *IAM) CreateInstanceProfile(input *CreateInstanceProfileInput) (output *CreateInstanceProfileOutput, err error) {
	req, out := c.CreateInstanceProfileRequest(input)
	output = out
	err = req.Send()
	return
}

var opCreateInstanceProfile *aws.Operation

// CreateLoginProfileRequest generates a request for the CreateLoginProfile operation.
func (c *IAM) CreateLoginProfileRequest(input *CreateLoginProfileInput) (req *aws.Request, output *CreateLoginProfileOutput) {
	if opCreateLoginProfile == nil {
		opCreateLoginProfile = &aws.Operation{
			Name:       "CreateLoginProfile",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opCreateLoginProfile, input, output)
	output = &CreateLoginProfileOutput{}
	req.Data = output
	return
}

func (c *IAM) CreateLoginProfile(input *CreateLoginProfileInput) (output *CreateLoginProfileOutput, err error) {
	req, out := c.CreateLoginProfileRequest(input)
	output = out
	err = req.Send()
	return
}

var opCreateLoginProfile *aws.Operation

// CreateOpenIDConnectProviderRequest generates a request for the CreateOpenIDConnectProvider operation.
func (c *IAM) CreateOpenIDConnectProviderRequest(input *CreateOpenIDConnectProviderInput) (req *aws.Request, output *CreateOpenIDConnectProviderOutput) {
	if opCreateOpenIDConnectProvider == nil {
		opCreateOpenIDConnectProvider = &aws.Operation{
			Name:       "CreateOpenIDConnectProvider",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opCreateOpenIDConnectProvider, input, output)
	output = &CreateOpenIDConnectProviderOutput{}
	req.Data = output
	return
}

func (c *IAM) CreateOpenIDConnectProvider(input *CreateOpenIDConnectProviderInput) (output *CreateOpenIDConnectProviderOutput, err error) {
	req, out := c.CreateOpenIDConnectProviderRequest(input)
	output = out
	err = req.Send()
	return
}

var opCreateOpenIDConnectProvider *aws.Operation

// CreatePolicyRequest generates a request for the CreatePolicy operation.
func (c *IAM) CreatePolicyRequest(input *CreatePolicyInput) (req *aws.Request, output *CreatePolicyOutput) {
	if opCreatePolicy == nil {
		opCreatePolicy = &aws.Operation{
			Name:       "CreatePolicy",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opCreatePolicy, input, output)
	output = &CreatePolicyOutput{}
	req.Data = output
	return
}

func (c *IAM) CreatePolicy(input *CreatePolicyInput) (output *CreatePolicyOutput, err error) {
	req, out := c.CreatePolicyRequest(input)
	output = out
	err = req.Send()
	return
}

var opCreatePolicy *aws.Operation

// CreatePolicyVersionRequest generates a request for the CreatePolicyVersion operation.
func (c *IAM) CreatePolicyVersionRequest(input *CreatePolicyVersionInput) (req *aws.Request, output *CreatePolicyVersionOutput) {
	if opCreatePolicyVersion == nil {
		opCreatePolicyVersion = &aws.Operation{
			Name:       "CreatePolicyVersion",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opCreatePolicyVersion, input, output)
	output = &CreatePolicyVersionOutput{}
	req.Data = output
	return
}

func (c *IAM) CreatePolicyVersion(input *CreatePolicyVersionInput) (output *CreatePolicyVersionOutput, err error) {
	req, out := c.CreatePolicyVersionRequest(input)
	output = out
	err = req.Send()
	return
}

var opCreatePolicyVersion *aws.Operation

// CreateRoleRequest generates a request for the CreateRole operation.
func (c *IAM) CreateRoleRequest(input *CreateRoleInput) (req *aws.Request, output *CreateRoleOutput) {
	if opCreateRole == nil {
		opCreateRole = &aws.Operation{
			Name:       "CreateRole",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opCreateRole, input, output)
	output = &CreateRoleOutput{}
	req.Data = output
	return
}

func (c *IAM) CreateRole(input *CreateRoleInput) (output *CreateRoleOutput, err error) {
	req, out := c.CreateRoleRequest(input)
	output = out
	err = req.Send()
	return
}

var opCreateRole *aws.Operation

// CreateSAMLProviderRequest generates a request for the CreateSAMLProvider operation.
func (c *IAM) CreateSAMLProviderRequest(input *CreateSAMLProviderInput) (req *aws.Request, output *CreateSAMLProviderOutput) {
	if opCreateSAMLProvider == nil {
		opCreateSAMLProvider = &aws.Operation{
			Name:       "CreateSAMLProvider",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opCreateSAMLProvider, input, output)
	output = &CreateSAMLProviderOutput{}
	req.Data = output
	return
}

func (c *IAM) CreateSAMLProvider(input *CreateSAMLProviderInput) (output *CreateSAMLProviderOutput, err error) {
	req, out := c.CreateSAMLProviderRequest(input)
	output = out
	err = req.Send()
	return
}

var opCreateSAMLProvider *aws.Operation

// CreateUserRequest generates a request for the CreateUser operation.
func (c *IAM) CreateUserRequest(input *CreateUserInput) (req *aws.Request, output *CreateUserOutput) {
	if opCreateUser == nil {
		opCreateUser = &aws.Operation{
			Name:       "CreateUser",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opCreateUser, input, output)
	output = &CreateUserOutput{}
	req.Data = output
	return
}

func (c *IAM) CreateUser(input *CreateUserInput) (output *CreateUserOutput, err error) {
	req, out := c.CreateUserRequest(input)
	output = out
	err = req.Send()
	return
}

var opCreateUser *aws.Operation

// CreateVirtualMFADeviceRequest generates a request for the CreateVirtualMFADevice operation.
func (c *IAM) CreateVirtualMFADeviceRequest(input *CreateVirtualMFADeviceInput) (req *aws.Request, output *CreateVirtualMFADeviceOutput) {
	if opCreateVirtualMFADevice == nil {
		opCreateVirtualMFADevice = &aws.Operation{
			Name:       "CreateVirtualMFADevice",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opCreateVirtualMFADevice, input, output)
	output = &CreateVirtualMFADeviceOutput{}
	req.Data = output
	return
}

func (c *IAM) CreateVirtualMFADevice(input *CreateVirtualMFADeviceInput) (output *CreateVirtualMFADeviceOutput, err error) {
	req, out := c.CreateVirtualMFADeviceRequest(input)
	output = out
	err = req.Send()
	return
}

var opCreateVirtualMFADevice *aws.Operation

// DeactivateMFADeviceRequest generates a request for the DeactivateMFADevice operation.
func (c *IAM) DeactivateMFADeviceRequest(input *DeactivateMFADeviceInput) (req *aws.Request) {
	if opDeactivateMFADevice == nil {
		opDeactivateMFADevice = &aws.Operation{
			Name:       "DeactivateMFADevice",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDeactivateMFADevice, input, nil)

	return
}

func (c *IAM) DeactivateMFADevice(input *DeactivateMFADeviceInput) (err error) {
	req := c.DeactivateMFADeviceRequest(input)
	err = req.Send()
	return
}

var opDeactivateMFADevice *aws.Operation

// DeleteAccessKeyRequest generates a request for the DeleteAccessKey operation.
func (c *IAM) DeleteAccessKeyRequest(input *DeleteAccessKeyInput) (req *aws.Request) {
	if opDeleteAccessKey == nil {
		opDeleteAccessKey = &aws.Operation{
			Name:       "DeleteAccessKey",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDeleteAccessKey, input, nil)

	return
}

func (c *IAM) DeleteAccessKey(input *DeleteAccessKeyInput) (err error) {
	req := c.DeleteAccessKeyRequest(input)
	err = req.Send()
	return
}

var opDeleteAccessKey *aws.Operation

// DeleteAccountAliasRequest generates a request for the DeleteAccountAlias operation.
func (c *IAM) DeleteAccountAliasRequest(input *DeleteAccountAliasInput) (req *aws.Request) {
	if opDeleteAccountAlias == nil {
		opDeleteAccountAlias = &aws.Operation{
			Name:       "DeleteAccountAlias",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDeleteAccountAlias, input, nil)

	return
}

func (c *IAM) DeleteAccountAlias(input *DeleteAccountAliasInput) (err error) {
	req := c.DeleteAccountAliasRequest(input)
	err = req.Send()
	return
}

var opDeleteAccountAlias *aws.Operation

// DeleteAccountPasswordPolicyRequest generates a request for the DeleteAccountPasswordPolicy operation.
func (c *IAM) DeleteAccountPasswordPolicyRequest() (req *aws.Request) {
	if opDeleteAccountPasswordPolicy == nil {
		opDeleteAccountPasswordPolicy = &aws.Operation{
			Name:       "DeleteAccountPasswordPolicy",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDeleteAccountPasswordPolicy, nil, nil)

	return
}

func (c *IAM) DeleteAccountPasswordPolicy() (err error) {
	req := c.DeleteAccountPasswordPolicyRequest()
	err = req.Send()
	return
}

var opDeleteAccountPasswordPolicy *aws.Operation

// DeleteGroupRequest generates a request for the DeleteGroup operation.
func (c *IAM) DeleteGroupRequest(input *DeleteGroupInput) (req *aws.Request) {
	if opDeleteGroup == nil {
		opDeleteGroup = &aws.Operation{
			Name:       "DeleteGroup",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDeleteGroup, input, nil)

	return
}

func (c *IAM) DeleteGroup(input *DeleteGroupInput) (err error) {
	req := c.DeleteGroupRequest(input)
	err = req.Send()
	return
}

var opDeleteGroup *aws.Operation

// DeleteGroupPolicyRequest generates a request for the DeleteGroupPolicy operation.
func (c *IAM) DeleteGroupPolicyRequest(input *DeleteGroupPolicyInput) (req *aws.Request) {
	if opDeleteGroupPolicy == nil {
		opDeleteGroupPolicy = &aws.Operation{
			Name:       "DeleteGroupPolicy",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDeleteGroupPolicy, input, nil)

	return
}

func (c *IAM) DeleteGroupPolicy(input *DeleteGroupPolicyInput) (err error) {
	req := c.DeleteGroupPolicyRequest(input)
	err = req.Send()
	return
}

var opDeleteGroupPolicy *aws.Operation

// DeleteInstanceProfileRequest generates a request for the DeleteInstanceProfile operation.
func (c *IAM) DeleteInstanceProfileRequest(input *DeleteInstanceProfileInput) (req *aws.Request) {
	if opDeleteInstanceProfile == nil {
		opDeleteInstanceProfile = &aws.Operation{
			Name:       "DeleteInstanceProfile",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDeleteInstanceProfile, input, nil)

	return
}

func (c *IAM) DeleteInstanceProfile(input *DeleteInstanceProfileInput) (err error) {
	req := c.DeleteInstanceProfileRequest(input)
	err = req.Send()
	return
}

var opDeleteInstanceProfile *aws.Operation

// DeleteLoginProfileRequest generates a request for the DeleteLoginProfile operation.
func (c *IAM) DeleteLoginProfileRequest(input *DeleteLoginProfileInput) (req *aws.Request) {
	if opDeleteLoginProfile == nil {
		opDeleteLoginProfile = &aws.Operation{
			Name:       "DeleteLoginProfile",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDeleteLoginProfile, input, nil)

	return
}

func (c *IAM) DeleteLoginProfile(input *DeleteLoginProfileInput) (err error) {
	req := c.DeleteLoginProfileRequest(input)
	err = req.Send()
	return
}

var opDeleteLoginProfile *aws.Operation

// DeleteOpenIDConnectProviderRequest generates a request for the DeleteOpenIDConnectProvider operation.
func (c *IAM) DeleteOpenIDConnectProviderRequest(input *DeleteOpenIDConnectProviderInput) (req *aws.Request) {
	if opDeleteOpenIDConnectProvider == nil {
		opDeleteOpenIDConnectProvider = &aws.Operation{
			Name:       "DeleteOpenIDConnectProvider",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDeleteOpenIDConnectProvider, input, nil)

	return
}

func (c *IAM) DeleteOpenIDConnectProvider(input *DeleteOpenIDConnectProviderInput) (err error) {
	req := c.DeleteOpenIDConnectProviderRequest(input)
	err = req.Send()
	return
}

var opDeleteOpenIDConnectProvider *aws.Operation

// DeletePolicyRequest generates a request for the DeletePolicy operation.
func (c *IAM) DeletePolicyRequest(input *DeletePolicyInput) (req *aws.Request) {
	if opDeletePolicy == nil {
		opDeletePolicy = &aws.Operation{
			Name:       "DeletePolicy",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDeletePolicy, input, nil)

	return
}

func (c *IAM) DeletePolicy(input *DeletePolicyInput) (err error) {
	req := c.DeletePolicyRequest(input)
	err = req.Send()
	return
}

var opDeletePolicy *aws.Operation

// DeletePolicyVersionRequest generates a request for the DeletePolicyVersion operation.
func (c *IAM) DeletePolicyVersionRequest(input *DeletePolicyVersionInput) (req *aws.Request) {
	if opDeletePolicyVersion == nil {
		opDeletePolicyVersion = &aws.Operation{
			Name:       "DeletePolicyVersion",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDeletePolicyVersion, input, nil)

	return
}

func (c *IAM) DeletePolicyVersion(input *DeletePolicyVersionInput) (err error) {
	req := c.DeletePolicyVersionRequest(input)
	err = req.Send()
	return
}

var opDeletePolicyVersion *aws.Operation

// DeleteRoleRequest generates a request for the DeleteRole operation.
func (c *IAM) DeleteRoleRequest(input *DeleteRoleInput) (req *aws.Request) {
	if opDeleteRole == nil {
		opDeleteRole = &aws.Operation{
			Name:       "DeleteRole",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDeleteRole, input, nil)

	return
}

func (c *IAM) DeleteRole(input *DeleteRoleInput) (err error) {
	req := c.DeleteRoleRequest(input)
	err = req.Send()
	return
}

var opDeleteRole *aws.Operation

// DeleteRolePolicyRequest generates a request for the DeleteRolePolicy operation.
func (c *IAM) DeleteRolePolicyRequest(input *DeleteRolePolicyInput) (req *aws.Request) {
	if opDeleteRolePolicy == nil {
		opDeleteRolePolicy = &aws.Operation{
			Name:       "DeleteRolePolicy",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDeleteRolePolicy, input, nil)

	return
}

func (c *IAM) DeleteRolePolicy(input *DeleteRolePolicyInput) (err error) {
	req := c.DeleteRolePolicyRequest(input)
	err = req.Send()
	return
}

var opDeleteRolePolicy *aws.Operation

// DeleteSAMLProviderRequest generates a request for the DeleteSAMLProvider operation.
func (c *IAM) DeleteSAMLProviderRequest(input *DeleteSAMLProviderInput) (req *aws.Request) {
	if opDeleteSAMLProvider == nil {
		opDeleteSAMLProvider = &aws.Operation{
			Name:       "DeleteSAMLProvider",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDeleteSAMLProvider, input, nil)

	return
}

func (c *IAM) DeleteSAMLProvider(input *DeleteSAMLProviderInput) (err error) {
	req := c.DeleteSAMLProviderRequest(input)
	err = req.Send()
	return
}

var opDeleteSAMLProvider *aws.Operation

// DeleteServerCertificateRequest generates a request for the DeleteServerCertificate operation.
func (c *IAM) DeleteServerCertificateRequest(input *DeleteServerCertificateInput) (req *aws.Request) {
	if opDeleteServerCertificate == nil {
		opDeleteServerCertificate = &aws.Operation{
			Name:       "DeleteServerCertificate",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDeleteServerCertificate, input, nil)

	return
}

func (c *IAM) DeleteServerCertificate(input *DeleteServerCertificateInput) (err error) {
	req := c.DeleteServerCertificateRequest(input)
	err = req.Send()
	return
}

var opDeleteServerCertificate *aws.Operation

// DeleteSigningCertificateRequest generates a request for the DeleteSigningCertificate operation.
func (c *IAM) DeleteSigningCertificateRequest(input *DeleteSigningCertificateInput) (req *aws.Request) {
	if opDeleteSigningCertificate == nil {
		opDeleteSigningCertificate = &aws.Operation{
			Name:       "DeleteSigningCertificate",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDeleteSigningCertificate, input, nil)

	return
}

func (c *IAM) DeleteSigningCertificate(input *DeleteSigningCertificateInput) (err error) {
	req := c.DeleteSigningCertificateRequest(input)
	err = req.Send()
	return
}

var opDeleteSigningCertificate *aws.Operation

// DeleteUserRequest generates a request for the DeleteUser operation.
func (c *IAM) DeleteUserRequest(input *DeleteUserInput) (req *aws.Request) {
	if opDeleteUser == nil {
		opDeleteUser = &aws.Operation{
			Name:       "DeleteUser",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDeleteUser, input, nil)

	return
}

func (c *IAM) DeleteUser(input *DeleteUserInput) (err error) {
	req := c.DeleteUserRequest(input)
	err = req.Send()
	return
}

var opDeleteUser *aws.Operation

// DeleteUserPolicyRequest generates a request for the DeleteUserPolicy operation.
func (c *IAM) DeleteUserPolicyRequest(input *DeleteUserPolicyInput) (req *aws.Request) {
	if opDeleteUserPolicy == nil {
		opDeleteUserPolicy = &aws.Operation{
			Name:       "DeleteUserPolicy",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDeleteUserPolicy, input, nil)

	return
}

func (c *IAM) DeleteUserPolicy(input *DeleteUserPolicyInput) (err error) {
	req := c.DeleteUserPolicyRequest(input)
	err = req.Send()
	return
}

var opDeleteUserPolicy *aws.Operation

// DeleteVirtualMFADeviceRequest generates a request for the DeleteVirtualMFADevice operation.
func (c *IAM) DeleteVirtualMFADeviceRequest(input *DeleteVirtualMFADeviceInput) (req *aws.Request) {
	if opDeleteVirtualMFADevice == nil {
		opDeleteVirtualMFADevice = &aws.Operation{
			Name:       "DeleteVirtualMFADevice",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDeleteVirtualMFADevice, input, nil)

	return
}

func (c *IAM) DeleteVirtualMFADevice(input *DeleteVirtualMFADeviceInput) (err error) {
	req := c.DeleteVirtualMFADeviceRequest(input)
	err = req.Send()
	return
}

var opDeleteVirtualMFADevice *aws.Operation

// DetachGroupPolicyRequest generates a request for the DetachGroupPolicy operation.
func (c *IAM) DetachGroupPolicyRequest(input *DetachGroupPolicyInput) (req *aws.Request) {
	if opDetachGroupPolicy == nil {
		opDetachGroupPolicy = &aws.Operation{
			Name:       "DetachGroupPolicy",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDetachGroupPolicy, input, nil)

	return
}

func (c *IAM) DetachGroupPolicy(input *DetachGroupPolicyInput) (err error) {
	req := c.DetachGroupPolicyRequest(input)
	err = req.Send()
	return
}

var opDetachGroupPolicy *aws.Operation

// DetachRolePolicyRequest generates a request for the DetachRolePolicy operation.
func (c *IAM) DetachRolePolicyRequest(input *DetachRolePolicyInput) (req *aws.Request) {
	if opDetachRolePolicy == nil {
		opDetachRolePolicy = &aws.Operation{
			Name:       "DetachRolePolicy",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDetachRolePolicy, input, nil)

	return
}

func (c *IAM) DetachRolePolicy(input *DetachRolePolicyInput) (err error) {
	req := c.DetachRolePolicyRequest(input)
	err = req.Send()
	return
}

var opDetachRolePolicy *aws.Operation

// DetachUserPolicyRequest generates a request for the DetachUserPolicy operation.
func (c *IAM) DetachUserPolicyRequest(input *DetachUserPolicyInput) (req *aws.Request) {
	if opDetachUserPolicy == nil {
		opDetachUserPolicy = &aws.Operation{
			Name:       "DetachUserPolicy",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDetachUserPolicy, input, nil)

	return
}

func (c *IAM) DetachUserPolicy(input *DetachUserPolicyInput) (err error) {
	req := c.DetachUserPolicyRequest(input)
	err = req.Send()
	return
}

var opDetachUserPolicy *aws.Operation

// EnableMFADeviceRequest generates a request for the EnableMFADevice operation.
func (c *IAM) EnableMFADeviceRequest(input *EnableMFADeviceInput) (req *aws.Request) {
	if opEnableMFADevice == nil {
		opEnableMFADevice = &aws.Operation{
			Name:       "EnableMFADevice",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opEnableMFADevice, input, nil)

	return
}

func (c *IAM) EnableMFADevice(input *EnableMFADeviceInput) (err error) {
	req := c.EnableMFADeviceRequest(input)
	err = req.Send()
	return
}

var opEnableMFADevice *aws.Operation

// GenerateCredentialReportRequest generates a request for the GenerateCredentialReport operation.
func (c *IAM) GenerateCredentialReportRequest() (req *aws.Request, output *GenerateCredentialReportOutput) {
	if opGenerateCredentialReport == nil {
		opGenerateCredentialReport = &aws.Operation{
			Name:       "GenerateCredentialReport",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opGenerateCredentialReport, nil, output)
	output = &GenerateCredentialReportOutput{}
	req.Data = output
	return
}

func (c *IAM) GenerateCredentialReport() (output *GenerateCredentialReportOutput, err error) {
	req, out := c.GenerateCredentialReportRequest()
	output = out
	err = req.Send()
	return
}

var opGenerateCredentialReport *aws.Operation

// GetAccountAuthorizationDetailsRequest generates a request for the GetAccountAuthorizationDetails operation.
func (c *IAM) GetAccountAuthorizationDetailsRequest(input *GetAccountAuthorizationDetailsInput) (req *aws.Request, output *GetAccountAuthorizationDetailsOutput) {
	if opGetAccountAuthorizationDetails == nil {
		opGetAccountAuthorizationDetails = &aws.Operation{
			Name:       "GetAccountAuthorizationDetails",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opGetAccountAuthorizationDetails, input, output)
	output = &GetAccountAuthorizationDetailsOutput{}
	req.Data = output
	return
}

func (c *IAM) GetAccountAuthorizationDetails(input *GetAccountAuthorizationDetailsInput) (output *GetAccountAuthorizationDetailsOutput, err error) {
	req, out := c.GetAccountAuthorizationDetailsRequest(input)
	output = out
	err = req.Send()
	return
}

var opGetAccountAuthorizationDetails *aws.Operation

// GetAccountPasswordPolicyRequest generates a request for the GetAccountPasswordPolicy operation.
func (c *IAM) GetAccountPasswordPolicyRequest() (req *aws.Request, output *GetAccountPasswordPolicyOutput) {
	if opGetAccountPasswordPolicy == nil {
		opGetAccountPasswordPolicy = &aws.Operation{
			Name:       "GetAccountPasswordPolicy",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opGetAccountPasswordPolicy, nil, output)
	output = &GetAccountPasswordPolicyOutput{}
	req.Data = output
	return
}

func (c *IAM) GetAccountPasswordPolicy() (output *GetAccountPasswordPolicyOutput, err error) {
	req, out := c.GetAccountPasswordPolicyRequest()
	output = out
	err = req.Send()
	return
}

var opGetAccountPasswordPolicy *aws.Operation

// GetAccountSummaryRequest generates a request for the GetAccountSummary operation.
func (c *IAM) GetAccountSummaryRequest() (req *aws.Request, output *GetAccountSummaryOutput) {
	if opGetAccountSummary == nil {
		opGetAccountSummary = &aws.Operation{
			Name:       "GetAccountSummary",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opGetAccountSummary, nil, output)
	output = &GetAccountSummaryOutput{}
	req.Data = output
	return
}

func (c *IAM) GetAccountSummary() (output *GetAccountSummaryOutput, err error) {
	req, out := c.GetAccountSummaryRequest()
	output = out
	err = req.Send()
	return
}

var opGetAccountSummary *aws.Operation

// GetCredentialReportRequest generates a request for the GetCredentialReport operation.
func (c *IAM) GetCredentialReportRequest() (req *aws.Request, output *GetCredentialReportOutput) {
	if opGetCredentialReport == nil {
		opGetCredentialReport = &aws.Operation{
			Name:       "GetCredentialReport",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opGetCredentialReport, nil, output)
	output = &GetCredentialReportOutput{}
	req.Data = output
	return
}

func (c *IAM) GetCredentialReport() (output *GetCredentialReportOutput, err error) {
	req, out := c.GetCredentialReportRequest()
	output = out
	err = req.Send()
	return
}

var opGetCredentialReport *aws.Operation

// GetGroupRequest generates a request for the GetGroup operation.
func (c *IAM) GetGroupRequest(input *GetGroupInput) (req *aws.Request, output *GetGroupOutput) {
	if opGetGroup == nil {
		opGetGroup = &aws.Operation{
			Name:       "GetGroup",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opGetGroup, input, output)
	output = &GetGroupOutput{}
	req.Data = output
	return
}

func (c *IAM) GetGroup(input *GetGroupInput) (output *GetGroupOutput, err error) {
	req, out := c.GetGroupRequest(input)
	output = out
	err = req.Send()
	return
}

var opGetGroup *aws.Operation

// GetGroupPolicyRequest generates a request for the GetGroupPolicy operation.
func (c *IAM) GetGroupPolicyRequest(input *GetGroupPolicyInput) (req *aws.Request, output *GetGroupPolicyOutput) {
	if opGetGroupPolicy == nil {
		opGetGroupPolicy = &aws.Operation{
			Name:       "GetGroupPolicy",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opGetGroupPolicy, input, output)
	output = &GetGroupPolicyOutput{}
	req.Data = output
	return
}

func (c *IAM) GetGroupPolicy(input *GetGroupPolicyInput) (output *GetGroupPolicyOutput, err error) {
	req, out := c.GetGroupPolicyRequest(input)
	output = out
	err = req.Send()
	return
}

var opGetGroupPolicy *aws.Operation

// GetInstanceProfileRequest generates a request for the GetInstanceProfile operation.
func (c *IAM) GetInstanceProfileRequest(input *GetInstanceProfileInput) (req *aws.Request, output *GetInstanceProfileOutput) {
	if opGetInstanceProfile == nil {
		opGetInstanceProfile = &aws.Operation{
			Name:       "GetInstanceProfile",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opGetInstanceProfile, input, output)
	output = &GetInstanceProfileOutput{}
	req.Data = output
	return
}

func (c *IAM) GetInstanceProfile(input *GetInstanceProfileInput) (output *GetInstanceProfileOutput, err error) {
	req, out := c.GetInstanceProfileRequest(input)
	output = out
	err = req.Send()
	return
}

var opGetInstanceProfile *aws.Operation

// GetLoginProfileRequest generates a request for the GetLoginProfile operation.
func (c *IAM) GetLoginProfileRequest(input *GetLoginProfileInput) (req *aws.Request, output *GetLoginProfileOutput) {
	if opGetLoginProfile == nil {
		opGetLoginProfile = &aws.Operation{
			Name:       "GetLoginProfile",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opGetLoginProfile, input, output)
	output = &GetLoginProfileOutput{}
	req.Data = output
	return
}

func (c *IAM) GetLoginProfile(input *GetLoginProfileInput) (output *GetLoginProfileOutput, err error) {
	req, out := c.GetLoginProfileRequest(input)
	output = out
	err = req.Send()
	return
}

var opGetLoginProfile *aws.Operation

// GetOpenIDConnectProviderRequest generates a request for the GetOpenIDConnectProvider operation.
func (c *IAM) GetOpenIDConnectProviderRequest(input *GetOpenIDConnectProviderInput) (req *aws.Request, output *GetOpenIDConnectProviderOutput) {
	if opGetOpenIDConnectProvider == nil {
		opGetOpenIDConnectProvider = &aws.Operation{
			Name:       "GetOpenIDConnectProvider",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opGetOpenIDConnectProvider, input, output)
	output = &GetOpenIDConnectProviderOutput{}
	req.Data = output
	return
}

func (c *IAM) GetOpenIDConnectProvider(input *GetOpenIDConnectProviderInput) (output *GetOpenIDConnectProviderOutput, err error) {
	req, out := c.GetOpenIDConnectProviderRequest(input)
	output = out
	err = req.Send()
	return
}

var opGetOpenIDConnectProvider *aws.Operation

// GetPolicyRequest generates a request for the GetPolicy operation.
func (c *IAM) GetPolicyRequest(input *GetPolicyInput) (req *aws.Request, output *GetPolicyOutput) {
	if opGetPolicy == nil {
		opGetPolicy = &aws.Operation{
			Name:       "GetPolicy",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opGetPolicy, input, output)
	output = &GetPolicyOutput{}
	req.Data = output
	return
}

func (c *IAM) GetPolicy(input *GetPolicyInput) (output *GetPolicyOutput, err error) {
	req, out := c.GetPolicyRequest(input)
	output = out
	err = req.Send()
	return
}

var opGetPolicy *aws.Operation

// GetPolicyVersionRequest generates a request for the GetPolicyVersion operation.
func (c *IAM) GetPolicyVersionRequest(input *GetPolicyVersionInput) (req *aws.Request, output *GetPolicyVersionOutput) {
	if opGetPolicyVersion == nil {
		opGetPolicyVersion = &aws.Operation{
			Name:       "GetPolicyVersion",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opGetPolicyVersion, input, output)
	output = &GetPolicyVersionOutput{}
	req.Data = output
	return
}

func (c *IAM) GetPolicyVersion(input *GetPolicyVersionInput) (output *GetPolicyVersionOutput, err error) {
	req, out := c.GetPolicyVersionRequest(input)
	output = out
	err = req.Send()
	return
}

var opGetPolicyVersion *aws.Operation

// GetRoleRequest generates a request for the GetRole operation.
func (c *IAM) GetRoleRequest(input *GetRoleInput) (req *aws.Request, output *GetRoleOutput) {
	if opGetRole == nil {
		opGetRole = &aws.Operation{
			Name:       "GetRole",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opGetRole, input, output)
	output = &GetRoleOutput{}
	req.Data = output
	return
}

func (c *IAM) GetRole(input *GetRoleInput) (output *GetRoleOutput, err error) {
	req, out := c.GetRoleRequest(input)
	output = out
	err = req.Send()
	return
}

var opGetRole *aws.Operation

// GetRolePolicyRequest generates a request for the GetRolePolicy operation.
func (c *IAM) GetRolePolicyRequest(input *GetRolePolicyInput) (req *aws.Request, output *GetRolePolicyOutput) {
	if opGetRolePolicy == nil {
		opGetRolePolicy = &aws.Operation{
			Name:       "GetRolePolicy",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opGetRolePolicy, input, output)
	output = &GetRolePolicyOutput{}
	req.Data = output
	return
}

func (c *IAM) GetRolePolicy(input *GetRolePolicyInput) (output *GetRolePolicyOutput, err error) {
	req, out := c.GetRolePolicyRequest(input)
	output = out
	err = req.Send()
	return
}

var opGetRolePolicy *aws.Operation

// GetSAMLProviderRequest generates a request for the GetSAMLProvider operation.
func (c *IAM) GetSAMLProviderRequest(input *GetSAMLProviderInput) (req *aws.Request, output *GetSAMLProviderOutput) {
	if opGetSAMLProvider == nil {
		opGetSAMLProvider = &aws.Operation{
			Name:       "GetSAMLProvider",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opGetSAMLProvider, input, output)
	output = &GetSAMLProviderOutput{}
	req.Data = output
	return
}

func (c *IAM) GetSAMLProvider(input *GetSAMLProviderInput) (output *GetSAMLProviderOutput, err error) {
	req, out := c.GetSAMLProviderRequest(input)
	output = out
	err = req.Send()
	return
}

var opGetSAMLProvider *aws.Operation

// GetServerCertificateRequest generates a request for the GetServerCertificate operation.
func (c *IAM) GetServerCertificateRequest(input *GetServerCertificateInput) (req *aws.Request, output *GetServerCertificateOutput) {
	if opGetServerCertificate == nil {
		opGetServerCertificate = &aws.Operation{
			Name:       "GetServerCertificate",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opGetServerCertificate, input, output)
	output = &GetServerCertificateOutput{}
	req.Data = output
	return
}

func (c *IAM) GetServerCertificate(input *GetServerCertificateInput) (output *GetServerCertificateOutput, err error) {
	req, out := c.GetServerCertificateRequest(input)
	output = out
	err = req.Send()
	return
}

var opGetServerCertificate *aws.Operation

// GetUserRequest generates a request for the GetUser operation.
func (c *IAM) GetUserRequest(input *GetUserInput) (req *aws.Request, output *GetUserOutput) {
	if opGetUser == nil {
		opGetUser = &aws.Operation{
			Name:       "GetUser",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opGetUser, input, output)
	output = &GetUserOutput{}
	req.Data = output
	return
}

func (c *IAM) GetUser(input *GetUserInput) (output *GetUserOutput, err error) {
	req, out := c.GetUserRequest(input)
	output = out
	err = req.Send()
	return
}

var opGetUser *aws.Operation

// GetUserPolicyRequest generates a request for the GetUserPolicy operation.
func (c *IAM) GetUserPolicyRequest(input *GetUserPolicyInput) (req *aws.Request, output *GetUserPolicyOutput) {
	if opGetUserPolicy == nil {
		opGetUserPolicy = &aws.Operation{
			Name:       "GetUserPolicy",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opGetUserPolicy, input, output)
	output = &GetUserPolicyOutput{}
	req.Data = output
	return
}

func (c *IAM) GetUserPolicy(input *GetUserPolicyInput) (output *GetUserPolicyOutput, err error) {
	req, out := c.GetUserPolicyRequest(input)
	output = out
	err = req.Send()
	return
}

var opGetUserPolicy *aws.Operation

// ListAccessKeysRequest generates a request for the ListAccessKeys operation.
func (c *IAM) ListAccessKeysRequest(input *ListAccessKeysInput) (req *aws.Request, output *ListAccessKeysOutput) {
	if opListAccessKeys == nil {
		opListAccessKeys = &aws.Operation{
			Name:       "ListAccessKeys",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opListAccessKeys, input, output)
	output = &ListAccessKeysOutput{}
	req.Data = output
	return
}

func (c *IAM) ListAccessKeys(input *ListAccessKeysInput) (output *ListAccessKeysOutput, err error) {
	req, out := c.ListAccessKeysRequest(input)
	output = out
	err = req.Send()
	return
}

var opListAccessKeys *aws.Operation

// ListAccountAliasesRequest generates a request for the ListAccountAliases operation.
func (c *IAM) ListAccountAliasesRequest(input *ListAccountAliasesInput) (req *aws.Request, output *ListAccountAliasesOutput) {
	if opListAccountAliases == nil {
		opListAccountAliases = &aws.Operation{
			Name:       "ListAccountAliases",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opListAccountAliases, input, output)
	output = &ListAccountAliasesOutput{}
	req.Data = output
	return
}

func (c *IAM) ListAccountAliases(input *ListAccountAliasesInput) (output *ListAccountAliasesOutput, err error) {
	req, out := c.ListAccountAliasesRequest(input)
	output = out
	err = req.Send()
	return
}

var opListAccountAliases *aws.Operation

// ListAttachedGroupPoliciesRequest generates a request for the ListAttachedGroupPolicies operation.
func (c *IAM) ListAttachedGroupPoliciesRequest(input *ListAttachedGroupPoliciesInput) (req *aws.Request, output *ListAttachedGroupPoliciesOutput) {
	if opListAttachedGroupPolicies == nil {
		opListAttachedGroupPolicies = &aws.Operation{
			Name:       "ListAttachedGroupPolicies",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opListAttachedGroupPolicies, input, output)
	output = &ListAttachedGroupPoliciesOutput{}
	req.Data = output
	return
}

func (c *IAM) ListAttachedGroupPolicies(input *ListAttachedGroupPoliciesInput) (output *ListAttachedGroupPoliciesOutput, err error) {
	req, out := c.ListAttachedGroupPoliciesRequest(input)
	output = out
	err = req.Send()
	return
}

var opListAttachedGroupPolicies *aws.Operation

// ListAttachedRolePoliciesRequest generates a request for the ListAttachedRolePolicies operation.
func (c *IAM) ListAttachedRolePoliciesRequest(input *ListAttachedRolePoliciesInput) (req *aws.Request, output *ListAttachedRolePoliciesOutput) {
	if opListAttachedRolePolicies == nil {
		opListAttachedRolePolicies = &aws.Operation{
			Name:       "ListAttachedRolePolicies",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opListAttachedRolePolicies, input, output)
	output = &ListAttachedRolePoliciesOutput{}
	req.Data = output
	return
}

func (c *IAM) ListAttachedRolePolicies(input *ListAttachedRolePoliciesInput) (output *ListAttachedRolePoliciesOutput, err error) {
	req, out := c.ListAttachedRolePoliciesRequest(input)
	output = out
	err = req.Send()
	return
}

var opListAttachedRolePolicies *aws.Operation

// ListAttachedUserPoliciesRequest generates a request for the ListAttachedUserPolicies operation.
func (c *IAM) ListAttachedUserPoliciesRequest(input *ListAttachedUserPoliciesInput) (req *aws.Request, output *ListAttachedUserPoliciesOutput) {
	if opListAttachedUserPolicies == nil {
		opListAttachedUserPolicies = &aws.Operation{
			Name:       "ListAttachedUserPolicies",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opListAttachedUserPolicies, input, output)
	output = &ListAttachedUserPoliciesOutput{}
	req.Data = output
	return
}

func (c *IAM) ListAttachedUserPolicies(input *ListAttachedUserPoliciesInput) (output *ListAttachedUserPoliciesOutput, err error) {
	req, out := c.ListAttachedUserPoliciesRequest(input)
	output = out
	err = req.Send()
	return
}

var opListAttachedUserPolicies *aws.Operation

// ListEntitiesForPolicyRequest generates a request for the ListEntitiesForPolicy operation.
func (c *IAM) ListEntitiesForPolicyRequest(input *ListEntitiesForPolicyInput) (req *aws.Request, output *ListEntitiesForPolicyOutput) {
	if opListEntitiesForPolicy == nil {
		opListEntitiesForPolicy = &aws.Operation{
			Name:       "ListEntitiesForPolicy",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opListEntitiesForPolicy, input, output)
	output = &ListEntitiesForPolicyOutput{}
	req.Data = output
	return
}

func (c *IAM) ListEntitiesForPolicy(input *ListEntitiesForPolicyInput) (output *ListEntitiesForPolicyOutput, err error) {
	req, out := c.ListEntitiesForPolicyRequest(input)
	output = out
	err = req.Send()
	return
}

var opListEntitiesForPolicy *aws.Operation

// ListGroupPoliciesRequest generates a request for the ListGroupPolicies operation.
func (c *IAM) ListGroupPoliciesRequest(input *ListGroupPoliciesInput) (req *aws.Request, output *ListGroupPoliciesOutput) {
	if opListGroupPolicies == nil {
		opListGroupPolicies = &aws.Operation{
			Name:       "ListGroupPolicies",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opListGroupPolicies, input, output)
	output = &ListGroupPoliciesOutput{}
	req.Data = output
	return
}

func (c *IAM) ListGroupPolicies(input *ListGroupPoliciesInput) (output *ListGroupPoliciesOutput, err error) {
	req, out := c.ListGroupPoliciesRequest(input)
	output = out
	err = req.Send()
	return
}

var opListGroupPolicies *aws.Operation

// ListGroupsRequest generates a request for the ListGroups operation.
func (c *IAM) ListGroupsRequest(input *ListGroupsInput) (req *aws.Request, output *ListGroupsOutput) {
	if opListGroups == nil {
		opListGroups = &aws.Operation{
			Name:       "ListGroups",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opListGroups, input, output)
	output = &ListGroupsOutput{}
	req.Data = output
	return
}

func (c *IAM) ListGroups(input *ListGroupsInput) (output *ListGroupsOutput, err error) {
	req, out := c.ListGroupsRequest(input)
	output = out
	err = req.Send()
	return
}

var opListGroups *aws.Operation

// ListGroupsForUserRequest generates a request for the ListGroupsForUser operation.
func (c *IAM) ListGroupsForUserRequest(input *ListGroupsForUserInput) (req *aws.Request, output *ListGroupsForUserOutput) {
	if opListGroupsForUser == nil {
		opListGroupsForUser = &aws.Operation{
			Name:       "ListGroupsForUser",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opListGroupsForUser, input, output)
	output = &ListGroupsForUserOutput{}
	req.Data = output
	return
}

func (c *IAM) ListGroupsForUser(input *ListGroupsForUserInput) (output *ListGroupsForUserOutput, err error) {
	req, out := c.ListGroupsForUserRequest(input)
	output = out
	err = req.Send()
	return
}

var opListGroupsForUser *aws.Operation

// ListInstanceProfilesRequest generates a request for the ListInstanceProfiles operation.
func (c *IAM) ListInstanceProfilesRequest(input *ListInstanceProfilesInput) (req *aws.Request, output *ListInstanceProfilesOutput) {
	if opListInstanceProfiles == nil {
		opListInstanceProfiles = &aws.Operation{
			Name:       "ListInstanceProfiles",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opListInstanceProfiles, input, output)
	output = &ListInstanceProfilesOutput{}
	req.Data = output
	return
}

func (c *IAM) ListInstanceProfiles(input *ListInstanceProfilesInput) (output *ListInstanceProfilesOutput, err error) {
	req, out := c.ListInstanceProfilesRequest(input)
	output = out
	err = req.Send()
	return
}

var opListInstanceProfiles *aws.Operation

// ListInstanceProfilesForRoleRequest generates a request for the ListInstanceProfilesForRole operation.
func (c *IAM) ListInstanceProfilesForRoleRequest(input *ListInstanceProfilesForRoleInput) (req *aws.Request, output *ListInstanceProfilesForRoleOutput) {
	if opListInstanceProfilesForRole == nil {
		opListInstanceProfilesForRole = &aws.Operation{
			Name:       "ListInstanceProfilesForRole",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opListInstanceProfilesForRole, input, output)
	output = &ListInstanceProfilesForRoleOutput{}
	req.Data = output
	return
}

func (c *IAM) ListInstanceProfilesForRole(input *ListInstanceProfilesForRoleInput) (output *ListInstanceProfilesForRoleOutput, err error) {
	req, out := c.ListInstanceProfilesForRoleRequest(input)
	output = out
	err = req.Send()
	return
}

var opListInstanceProfilesForRole *aws.Operation

// ListMFADevicesRequest generates a request for the ListMFADevices operation.
func (c *IAM) ListMFADevicesRequest(input *ListMFADevicesInput) (req *aws.Request, output *ListMFADevicesOutput) {
	if opListMFADevices == nil {
		opListMFADevices = &aws.Operation{
			Name:       "ListMFADevices",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opListMFADevices, input, output)
	output = &ListMFADevicesOutput{}
	req.Data = output
	return
}

func (c *IAM) ListMFADevices(input *ListMFADevicesInput) (output *ListMFADevicesOutput, err error) {
	req, out := c.ListMFADevicesRequest(input)
	output = out
	err = req.Send()
	return
}

var opListMFADevices *aws.Operation

// ListOpenIDConnectProvidersRequest generates a request for the ListOpenIDConnectProviders operation.
func (c *IAM) ListOpenIDConnectProvidersRequest(input *ListOpenIDConnectProvidersInput) (req *aws.Request, output *ListOpenIDConnectProvidersOutput) {
	if opListOpenIDConnectProviders == nil {
		opListOpenIDConnectProviders = &aws.Operation{
			Name:       "ListOpenIDConnectProviders",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opListOpenIDConnectProviders, input, output)
	output = &ListOpenIDConnectProvidersOutput{}
	req.Data = output
	return
}

func (c *IAM) ListOpenIDConnectProviders(input *ListOpenIDConnectProvidersInput) (output *ListOpenIDConnectProvidersOutput, err error) {
	req, out := c.ListOpenIDConnectProvidersRequest(input)
	output = out
	err = req.Send()
	return
}

var opListOpenIDConnectProviders *aws.Operation

// ListPoliciesRequest generates a request for the ListPolicies operation.
func (c *IAM) ListPoliciesRequest(input *ListPoliciesInput) (req *aws.Request, output *ListPoliciesOutput) {
	if opListPolicies == nil {
		opListPolicies = &aws.Operation{
			Name:       "ListPolicies",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opListPolicies, input, output)
	output = &ListPoliciesOutput{}
	req.Data = output
	return
}

func (c *IAM) ListPolicies(input *ListPoliciesInput) (output *ListPoliciesOutput, err error) {
	req, out := c.ListPoliciesRequest(input)
	output = out
	err = req.Send()
	return
}

var opListPolicies *aws.Operation

// ListPolicyVersionsRequest generates a request for the ListPolicyVersions operation.
func (c *IAM) ListPolicyVersionsRequest(input *ListPolicyVersionsInput) (req *aws.Request, output *ListPolicyVersionsOutput) {
	if opListPolicyVersions == nil {
		opListPolicyVersions = &aws.Operation{
			Name:       "ListPolicyVersions",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opListPolicyVersions, input, output)
	output = &ListPolicyVersionsOutput{}
	req.Data = output
	return
}

func (c *IAM) ListPolicyVersions(input *ListPolicyVersionsInput) (output *ListPolicyVersionsOutput, err error) {
	req, out := c.ListPolicyVersionsRequest(input)
	output = out
	err = req.Send()
	return
}

var opListPolicyVersions *aws.Operation

// ListRolePoliciesRequest generates a request for the ListRolePolicies operation.
func (c *IAM) ListRolePoliciesRequest(input *ListRolePoliciesInput) (req *aws.Request, output *ListRolePoliciesOutput) {
	if opListRolePolicies == nil {
		opListRolePolicies = &aws.Operation{
			Name:       "ListRolePolicies",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opListRolePolicies, input, output)
	output = &ListRolePoliciesOutput{}
	req.Data = output
	return
}

func (c *IAM) ListRolePolicies(input *ListRolePoliciesInput) (output *ListRolePoliciesOutput, err error) {
	req, out := c.ListRolePoliciesRequest(input)
	output = out
	err = req.Send()
	return
}

var opListRolePolicies *aws.Operation

// ListRolesRequest generates a request for the ListRoles operation.
func (c *IAM) ListRolesRequest(input *ListRolesInput) (req *aws.Request, output *ListRolesOutput) {
	if opListRoles == nil {
		opListRoles = &aws.Operation{
			Name:       "ListRoles",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opListRoles, input, output)
	output = &ListRolesOutput{}
	req.Data = output
	return
}

func (c *IAM) ListRoles(input *ListRolesInput) (output *ListRolesOutput, err error) {
	req, out := c.ListRolesRequest(input)
	output = out
	err = req.Send()
	return
}

var opListRoles *aws.Operation

// ListSAMLProvidersRequest generates a request for the ListSAMLProviders operation.
func (c *IAM) ListSAMLProvidersRequest(input *ListSAMLProvidersInput) (req *aws.Request, output *ListSAMLProvidersOutput) {
	if opListSAMLProviders == nil {
		opListSAMLProviders = &aws.Operation{
			Name:       "ListSAMLProviders",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opListSAMLProviders, input, output)
	output = &ListSAMLProvidersOutput{}
	req.Data = output
	return
}

func (c *IAM) ListSAMLProviders(input *ListSAMLProvidersInput) (output *ListSAMLProvidersOutput, err error) {
	req, out := c.ListSAMLProvidersRequest(input)
	output = out
	err = req.Send()
	return
}

var opListSAMLProviders *aws.Operation

// ListServerCertificatesRequest generates a request for the ListServerCertificates operation.
func (c *IAM) ListServerCertificatesRequest(input *ListServerCertificatesInput) (req *aws.Request, output *ListServerCertificatesOutput) {
	if opListServerCertificates == nil {
		opListServerCertificates = &aws.Operation{
			Name:       "ListServerCertificates",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opListServerCertificates, input, output)
	output = &ListServerCertificatesOutput{}
	req.Data = output
	return
}

func (c *IAM) ListServerCertificates(input *ListServerCertificatesInput) (output *ListServerCertificatesOutput, err error) {
	req, out := c.ListServerCertificatesRequest(input)
	output = out
	err = req.Send()
	return
}

var opListServerCertificates *aws.Operation

// ListSigningCertificatesRequest generates a request for the ListSigningCertificates operation.
func (c *IAM) ListSigningCertificatesRequest(input *ListSigningCertificatesInput) (req *aws.Request, output *ListSigningCertificatesOutput) {
	if opListSigningCertificates == nil {
		opListSigningCertificates = &aws.Operation{
			Name:       "ListSigningCertificates",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opListSigningCertificates, input, output)
	output = &ListSigningCertificatesOutput{}
	req.Data = output
	return
}

func (c *IAM) ListSigningCertificates(input *ListSigningCertificatesInput) (output *ListSigningCertificatesOutput, err error) {
	req, out := c.ListSigningCertificatesRequest(input)
	output = out
	err = req.Send()
	return
}

var opListSigningCertificates *aws.Operation

// ListUserPoliciesRequest generates a request for the ListUserPolicies operation.
func (c *IAM) ListUserPoliciesRequest(input *ListUserPoliciesInput) (req *aws.Request, output *ListUserPoliciesOutput) {
	if opListUserPolicies == nil {
		opListUserPolicies = &aws.Operation{
			Name:       "ListUserPolicies",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opListUserPolicies, input, output)
	output = &ListUserPoliciesOutput{}
	req.Data = output
	return
}

func (c *IAM) ListUserPolicies(input *ListUserPoliciesInput) (output *ListUserPoliciesOutput, err error) {
	req, out := c.ListUserPoliciesRequest(input)
	output = out
	err = req.Send()
	return
}

var opListUserPolicies *aws.Operation

// ListUsersRequest generates a request for the ListUsers operation.
func (c *IAM) ListUsersRequest(input *ListUsersInput) (req *aws.Request, output *ListUsersOutput) {
	if opListUsers == nil {
		opListUsers = &aws.Operation{
			Name:       "ListUsers",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opListUsers, input, output)
	output = &ListUsersOutput{}
	req.Data = output
	return
}

func (c *IAM) ListUsers(input *ListUsersInput) (output *ListUsersOutput, err error) {
	req, out := c.ListUsersRequest(input)
	output = out
	err = req.Send()
	return
}

var opListUsers *aws.Operation

// ListVirtualMFADevicesRequest generates a request for the ListVirtualMFADevices operation.
func (c *IAM) ListVirtualMFADevicesRequest(input *ListVirtualMFADevicesInput) (req *aws.Request, output *ListVirtualMFADevicesOutput) {
	if opListVirtualMFADevices == nil {
		opListVirtualMFADevices = &aws.Operation{
			Name:       "ListVirtualMFADevices",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opListVirtualMFADevices, input, output)
	output = &ListVirtualMFADevicesOutput{}
	req.Data = output
	return
}

func (c *IAM) ListVirtualMFADevices(input *ListVirtualMFADevicesInput) (output *ListVirtualMFADevicesOutput, err error) {
	req, out := c.ListVirtualMFADevicesRequest(input)
	output = out
	err = req.Send()
	return
}

var opListVirtualMFADevices *aws.Operation

// PutGroupPolicyRequest generates a request for the PutGroupPolicy operation.
func (c *IAM) PutGroupPolicyRequest(input *PutGroupPolicyInput) (req *aws.Request) {
	if opPutGroupPolicy == nil {
		opPutGroupPolicy = &aws.Operation{
			Name:       "PutGroupPolicy",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opPutGroupPolicy, input, nil)

	return
}

func (c *IAM) PutGroupPolicy(input *PutGroupPolicyInput) (err error) {
	req := c.PutGroupPolicyRequest(input)
	err = req.Send()
	return
}

var opPutGroupPolicy *aws.Operation

// PutRolePolicyRequest generates a request for the PutRolePolicy operation.
func (c *IAM) PutRolePolicyRequest(input *PutRolePolicyInput) (req *aws.Request) {
	if opPutRolePolicy == nil {
		opPutRolePolicy = &aws.Operation{
			Name:       "PutRolePolicy",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opPutRolePolicy, input, nil)

	return
}

func (c *IAM) PutRolePolicy(input *PutRolePolicyInput) (err error) {
	req := c.PutRolePolicyRequest(input)
	err = req.Send()
	return
}

var opPutRolePolicy *aws.Operation

// PutUserPolicyRequest generates a request for the PutUserPolicy operation.
func (c *IAM) PutUserPolicyRequest(input *PutUserPolicyInput) (req *aws.Request) {
	if opPutUserPolicy == nil {
		opPutUserPolicy = &aws.Operation{
			Name:       "PutUserPolicy",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opPutUserPolicy, input, nil)

	return
}

func (c *IAM) PutUserPolicy(input *PutUserPolicyInput) (err error) {
	req := c.PutUserPolicyRequest(input)
	err = req.Send()
	return
}

var opPutUserPolicy *aws.Operation

// RemoveClientIDFromOpenIDConnectProviderRequest generates a request for the RemoveClientIDFromOpenIDConnectProvider operation.
func (c *IAM) RemoveClientIDFromOpenIDConnectProviderRequest(input *RemoveClientIDFromOpenIDConnectProviderInput) (req *aws.Request) {
	if opRemoveClientIDFromOpenIDConnectProvider == nil {
		opRemoveClientIDFromOpenIDConnectProvider = &aws.Operation{
			Name:       "RemoveClientIDFromOpenIDConnectProvider",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opRemoveClientIDFromOpenIDConnectProvider, input, nil)

	return
}

func (c *IAM) RemoveClientIDFromOpenIDConnectProvider(input *RemoveClientIDFromOpenIDConnectProviderInput) (err error) {
	req := c.RemoveClientIDFromOpenIDConnectProviderRequest(input)
	err = req.Send()
	return
}

var opRemoveClientIDFromOpenIDConnectProvider *aws.Operation

// RemoveRoleFromInstanceProfileRequest generates a request for the RemoveRoleFromInstanceProfile operation.
func (c *IAM) RemoveRoleFromInstanceProfileRequest(input *RemoveRoleFromInstanceProfileInput) (req *aws.Request) {
	if opRemoveRoleFromInstanceProfile == nil {
		opRemoveRoleFromInstanceProfile = &aws.Operation{
			Name:       "RemoveRoleFromInstanceProfile",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opRemoveRoleFromInstanceProfile, input, nil)

	return
}

func (c *IAM) RemoveRoleFromInstanceProfile(input *RemoveRoleFromInstanceProfileInput) (err error) {
	req := c.RemoveRoleFromInstanceProfileRequest(input)
	err = req.Send()
	return
}

var opRemoveRoleFromInstanceProfile *aws.Operation

// RemoveUserFromGroupRequest generates a request for the RemoveUserFromGroup operation.
func (c *IAM) RemoveUserFromGroupRequest(input *RemoveUserFromGroupInput) (req *aws.Request) {
	if opRemoveUserFromGroup == nil {
		opRemoveUserFromGroup = &aws.Operation{
			Name:       "RemoveUserFromGroup",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opRemoveUserFromGroup, input, nil)

	return
}

func (c *IAM) RemoveUserFromGroup(input *RemoveUserFromGroupInput) (err error) {
	req := c.RemoveUserFromGroupRequest(input)
	err = req.Send()
	return
}

var opRemoveUserFromGroup *aws.Operation

// ResyncMFADeviceRequest generates a request for the ResyncMFADevice operation.
func (c *IAM) ResyncMFADeviceRequest(input *ResyncMFADeviceInput) (req *aws.Request) {
	if opResyncMFADevice == nil {
		opResyncMFADevice = &aws.Operation{
			Name:       "ResyncMFADevice",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opResyncMFADevice, input, nil)

	return
}

func (c *IAM) ResyncMFADevice(input *ResyncMFADeviceInput) (err error) {
	req := c.ResyncMFADeviceRequest(input)
	err = req.Send()
	return
}

var opResyncMFADevice *aws.Operation

// SetDefaultPolicyVersionRequest generates a request for the SetDefaultPolicyVersion operation.
func (c *IAM) SetDefaultPolicyVersionRequest(input *SetDefaultPolicyVersionInput) (req *aws.Request) {
	if opSetDefaultPolicyVersion == nil {
		opSetDefaultPolicyVersion = &aws.Operation{
			Name:       "SetDefaultPolicyVersion",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opSetDefaultPolicyVersion, input, nil)

	return
}

func (c *IAM) SetDefaultPolicyVersion(input *SetDefaultPolicyVersionInput) (err error) {
	req := c.SetDefaultPolicyVersionRequest(input)
	err = req.Send()
	return
}

var opSetDefaultPolicyVersion *aws.Operation

// UpdateAccessKeyRequest generates a request for the UpdateAccessKey operation.
func (c *IAM) UpdateAccessKeyRequest(input *UpdateAccessKeyInput) (req *aws.Request) {
	if opUpdateAccessKey == nil {
		opUpdateAccessKey = &aws.Operation{
			Name:       "UpdateAccessKey",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opUpdateAccessKey, input, nil)

	return
}

func (c *IAM) UpdateAccessKey(input *UpdateAccessKeyInput) (err error) {
	req := c.UpdateAccessKeyRequest(input)
	err = req.Send()
	return
}

var opUpdateAccessKey *aws.Operation

// UpdateAccountPasswordPolicyRequest generates a request for the UpdateAccountPasswordPolicy operation.
func (c *IAM) UpdateAccountPasswordPolicyRequest(input *UpdateAccountPasswordPolicyInput) (req *aws.Request) {
	if opUpdateAccountPasswordPolicy == nil {
		opUpdateAccountPasswordPolicy = &aws.Operation{
			Name:       "UpdateAccountPasswordPolicy",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opUpdateAccountPasswordPolicy, input, nil)

	return
}

func (c *IAM) UpdateAccountPasswordPolicy(input *UpdateAccountPasswordPolicyInput) (err error) {
	req := c.UpdateAccountPasswordPolicyRequest(input)
	err = req.Send()
	return
}

var opUpdateAccountPasswordPolicy *aws.Operation

// UpdateAssumeRolePolicyRequest generates a request for the UpdateAssumeRolePolicy operation.
func (c *IAM) UpdateAssumeRolePolicyRequest(input *UpdateAssumeRolePolicyInput) (req *aws.Request) {
	if opUpdateAssumeRolePolicy == nil {
		opUpdateAssumeRolePolicy = &aws.Operation{
			Name:       "UpdateAssumeRolePolicy",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opUpdateAssumeRolePolicy, input, nil)

	return
}

func (c *IAM) UpdateAssumeRolePolicy(input *UpdateAssumeRolePolicyInput) (err error) {
	req := c.UpdateAssumeRolePolicyRequest(input)
	err = req.Send()
	return
}

var opUpdateAssumeRolePolicy *aws.Operation

// UpdateGroupRequest generates a request for the UpdateGroup operation.
func (c *IAM) UpdateGroupRequest(input *UpdateGroupInput) (req *aws.Request) {
	if opUpdateGroup == nil {
		opUpdateGroup = &aws.Operation{
			Name:       "UpdateGroup",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opUpdateGroup, input, nil)

	return
}

func (c *IAM) UpdateGroup(input *UpdateGroupInput) (err error) {
	req := c.UpdateGroupRequest(input)
	err = req.Send()
	return
}

var opUpdateGroup *aws.Operation

// UpdateLoginProfileRequest generates a request for the UpdateLoginProfile operation.
func (c *IAM) UpdateLoginProfileRequest(input *UpdateLoginProfileInput) (req *aws.Request) {
	if opUpdateLoginProfile == nil {
		opUpdateLoginProfile = &aws.Operation{
			Name:       "UpdateLoginProfile",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opUpdateLoginProfile, input, nil)

	return
}

func (c *IAM) UpdateLoginProfile(input *UpdateLoginProfileInput) (err error) {
	req := c.UpdateLoginProfileRequest(input)
	err = req.Send()
	return
}

var opUpdateLoginProfile *aws.Operation

// UpdateOpenIDConnectProviderThumbprintRequest generates a request for the UpdateOpenIDConnectProviderThumbprint operation.
func (c *IAM) UpdateOpenIDConnectProviderThumbprintRequest(input *UpdateOpenIDConnectProviderThumbprintInput) (req *aws.Request) {
	if opUpdateOpenIDConnectProviderThumbprint == nil {
		opUpdateOpenIDConnectProviderThumbprint = &aws.Operation{
			Name:       "UpdateOpenIDConnectProviderThumbprint",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opUpdateOpenIDConnectProviderThumbprint, input, nil)

	return
}

func (c *IAM) UpdateOpenIDConnectProviderThumbprint(input *UpdateOpenIDConnectProviderThumbprintInput) (err error) {
	req := c.UpdateOpenIDConnectProviderThumbprintRequest(input)
	err = req.Send()
	return
}

var opUpdateOpenIDConnectProviderThumbprint *aws.Operation

// UpdateSAMLProviderRequest generates a request for the UpdateSAMLProvider operation.
func (c *IAM) UpdateSAMLProviderRequest(input *UpdateSAMLProviderInput) (req *aws.Request, output *UpdateSAMLProviderOutput) {
	if opUpdateSAMLProvider == nil {
		opUpdateSAMLProvider = &aws.Operation{
			Name:       "UpdateSAMLProvider",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opUpdateSAMLProvider, input, output)
	output = &UpdateSAMLProviderOutput{}
	req.Data = output
	return
}

func (c *IAM) UpdateSAMLProvider(input *UpdateSAMLProviderInput) (output *UpdateSAMLProviderOutput, err error) {
	req, out := c.UpdateSAMLProviderRequest(input)
	output = out
	err = req.Send()
	return
}

var opUpdateSAMLProvider *aws.Operation

// UpdateServerCertificateRequest generates a request for the UpdateServerCertificate operation.
func (c *IAM) UpdateServerCertificateRequest(input *UpdateServerCertificateInput) (req *aws.Request) {
	if opUpdateServerCertificate == nil {
		opUpdateServerCertificate = &aws.Operation{
			Name:       "UpdateServerCertificate",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opUpdateServerCertificate, input, nil)

	return
}

func (c *IAM) UpdateServerCertificate(input *UpdateServerCertificateInput) (err error) {
	req := c.UpdateServerCertificateRequest(input)
	err = req.Send()
	return
}

var opUpdateServerCertificate *aws.Operation

// UpdateSigningCertificateRequest generates a request for the UpdateSigningCertificate operation.
func (c *IAM) UpdateSigningCertificateRequest(input *UpdateSigningCertificateInput) (req *aws.Request) {
	if opUpdateSigningCertificate == nil {
		opUpdateSigningCertificate = &aws.Operation{
			Name:       "UpdateSigningCertificate",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opUpdateSigningCertificate, input, nil)

	return
}

func (c *IAM) UpdateSigningCertificate(input *UpdateSigningCertificateInput) (err error) {
	req := c.UpdateSigningCertificateRequest(input)
	err = req.Send()
	return
}

var opUpdateSigningCertificate *aws.Operation

// UpdateUserRequest generates a request for the UpdateUser operation.
func (c *IAM) UpdateUserRequest(input *UpdateUserInput) (req *aws.Request) {
	if opUpdateUser == nil {
		opUpdateUser = &aws.Operation{
			Name:       "UpdateUser",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opUpdateUser, input, nil)

	return
}

func (c *IAM) UpdateUser(input *UpdateUserInput) (err error) {
	req := c.UpdateUserRequest(input)
	err = req.Send()
	return
}

var opUpdateUser *aws.Operation

// UploadServerCertificateRequest generates a request for the UploadServerCertificate operation.
func (c *IAM) UploadServerCertificateRequest(input *UploadServerCertificateInput) (req *aws.Request, output *UploadServerCertificateOutput) {
	if opUploadServerCertificate == nil {
		opUploadServerCertificate = &aws.Operation{
			Name:       "UploadServerCertificate",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opUploadServerCertificate, input, output)
	output = &UploadServerCertificateOutput{}
	req.Data = output
	return
}

func (c *IAM) UploadServerCertificate(input *UploadServerCertificateInput) (output *UploadServerCertificateOutput, err error) {
	req, out := c.UploadServerCertificateRequest(input)
	output = out
	err = req.Send()
	return
}

var opUploadServerCertificate *aws.Operation

// UploadSigningCertificateRequest generates a request for the UploadSigningCertificate operation.
func (c *IAM) UploadSigningCertificateRequest(input *UploadSigningCertificateInput) (req *aws.Request, output *UploadSigningCertificateOutput) {
	if opUploadSigningCertificate == nil {
		opUploadSigningCertificate = &aws.Operation{
			Name:       "UploadSigningCertificate",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opUploadSigningCertificate, input, output)
	output = &UploadSigningCertificateOutput{}
	req.Data = output
	return
}

func (c *IAM) UploadSigningCertificate(input *UploadSigningCertificateInput) (output *UploadSigningCertificateOutput, err error) {
	req, out := c.UploadSigningCertificateRequest(input)
	output = out
	err = req.Send()
	return
}

var opUploadSigningCertificate *aws.Operation

type AccessKey struct {
	AccessKeyID     *string    `locationName:"AccessKeyId" type:"string"`
	CreateDate      *time.Time `type:"timestamp" timestampFormat:"iso8601"`
	SecretAccessKey *string    `type:"string"`
	Status          *string    `type:"string"`
	UserName        *string    `type:"string"`

	metadataAccessKey `json:"-", xml:"-"`
}

type metadataAccessKey struct {
	SDKShapeTraits bool `type:"structure" required:"UserName,AccessKeyId,Status,SecretAccessKey"`
}

type AccessKeyMetadata struct {
	AccessKeyID *string    `locationName:"AccessKeyId" type:"string"`
	CreateDate  *time.Time `type:"timestamp" timestampFormat:"iso8601"`
	Status      *string    `type:"string"`
	UserName    *string    `type:"string"`

	metadataAccessKeyMetadata `json:"-", xml:"-"`
}

type metadataAccessKeyMetadata struct {
	SDKShapeTraits bool `type:"structure"`
}

type AddClientIDToOpenIDConnectProviderInput struct {
	ClientID                 *string `type:"string"`
	OpenIDConnectProviderARN *string `locationName:"OpenIDConnectProviderArn" type:"string"`

	metadataAddClientIDToOpenIDConnectProviderInput `json:"-", xml:"-"`
}

type metadataAddClientIDToOpenIDConnectProviderInput struct {
	SDKShapeTraits bool `type:"structure" required:"OpenIDConnectProviderArn,ClientID"`
}

type AddRoleToInstanceProfileInput struct {
	InstanceProfileName *string `type:"string"`
	RoleName            *string `type:"string"`

	metadataAddRoleToInstanceProfileInput `json:"-", xml:"-"`
}

type metadataAddRoleToInstanceProfileInput struct {
	SDKShapeTraits bool `type:"structure" required:"InstanceProfileName,RoleName"`
}

type AddUserToGroupInput struct {
	GroupName *string `type:"string"`
	UserName  *string `type:"string"`

	metadataAddUserToGroupInput `json:"-", xml:"-"`
}

type metadataAddUserToGroupInput struct {
	SDKShapeTraits bool `type:"structure" required:"GroupName,UserName"`
}

type AttachGroupPolicyInput struct {
	GroupName *string `type:"string"`
	PolicyARN *string `locationName:"PolicyArn" type:"string"`

	metadataAttachGroupPolicyInput `json:"-", xml:"-"`
}

type metadataAttachGroupPolicyInput struct {
	SDKShapeTraits bool `type:"structure" required:"GroupName,PolicyArn"`
}

type AttachRolePolicyInput struct {
	PolicyARN *string `locationName:"PolicyArn" type:"string"`
	RoleName  *string `type:"string"`

	metadataAttachRolePolicyInput `json:"-", xml:"-"`
}

type metadataAttachRolePolicyInput struct {
	SDKShapeTraits bool `type:"structure" required:"RoleName,PolicyArn"`
}

type AttachUserPolicyInput struct {
	PolicyARN *string `locationName:"PolicyArn" type:"string"`
	UserName  *string `type:"string"`

	metadataAttachUserPolicyInput `json:"-", xml:"-"`
}

type metadataAttachUserPolicyInput struct {
	SDKShapeTraits bool `type:"structure" required:"UserName,PolicyArn"`
}

type AttachedPolicy struct {
	PolicyARN  *string `locationName:"PolicyArn" type:"string"`
	PolicyName *string `type:"string"`

	metadataAttachedPolicy `json:"-", xml:"-"`
}

type metadataAttachedPolicy struct {
	SDKShapeTraits bool `type:"structure"`
}

type ChangePasswordInput struct {
	NewPassword *string `type:"string"`
	OldPassword *string `type:"string"`

	metadataChangePasswordInput `json:"-", xml:"-"`
}

type metadataChangePasswordInput struct {
	SDKShapeTraits bool `type:"structure" required:"OldPassword,NewPassword"`
}

type CreateAccessKeyInput struct {
	UserName *string `type:"string"`

	metadataCreateAccessKeyInput `json:"-", xml:"-"`
}

type metadataCreateAccessKeyInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type CreateAccessKeyOutput struct {
	AccessKey *AccessKey `type:"structure"`

	metadataCreateAccessKeyOutput `json:"-", xml:"-"`
}

type metadataCreateAccessKeyOutput struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"CreateAccessKeyResult" required:"AccessKey"`
}

type CreateAccountAliasInput struct {
	AccountAlias *string `type:"string"`

	metadataCreateAccountAliasInput `json:"-", xml:"-"`
}

type metadataCreateAccountAliasInput struct {
	SDKShapeTraits bool `type:"structure" required:"AccountAlias"`
}

type CreateGroupInput struct {
	GroupName *string `type:"string"`
	Path      *string `type:"string"`

	metadataCreateGroupInput `json:"-", xml:"-"`
}

type metadataCreateGroupInput struct {
	SDKShapeTraits bool `type:"structure" required:"GroupName"`
}

type CreateGroupOutput struct {
	Group *Group `type:"structure"`

	metadataCreateGroupOutput `json:"-", xml:"-"`
}

type metadataCreateGroupOutput struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"CreateGroupResult" required:"Group"`
}

type CreateInstanceProfileInput struct {
	InstanceProfileName *string `type:"string"`
	Path                *string `type:"string"`

	metadataCreateInstanceProfileInput `json:"-", xml:"-"`
}

type metadataCreateInstanceProfileInput struct {
	SDKShapeTraits bool `type:"structure" required:"InstanceProfileName"`
}

type CreateInstanceProfileOutput struct {
	InstanceProfile *InstanceProfile `type:"structure"`

	metadataCreateInstanceProfileOutput `json:"-", xml:"-"`
}

type metadataCreateInstanceProfileOutput struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"CreateInstanceProfileResult" required:"InstanceProfile"`
}

type CreateLoginProfileInput struct {
	Password              *string `type:"string"`
	PasswordResetRequired *bool   `type:"boolean"`
	UserName              *string `type:"string"`

	metadataCreateLoginProfileInput `json:"-", xml:"-"`
}

type metadataCreateLoginProfileInput struct {
	SDKShapeTraits bool `type:"structure" required:"UserName,Password"`
}

type CreateLoginProfileOutput struct {
	LoginProfile *LoginProfile `type:"structure"`

	metadataCreateLoginProfileOutput `json:"-", xml:"-"`
}

type metadataCreateLoginProfileOutput struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"CreateLoginProfileResult" required:"LoginProfile"`
}

type CreateOpenIDConnectProviderInput struct {
	ClientIDList   []*string `type:"list"`
	ThumbprintList []*string `type:"list"`
	URL            *string   `locationName:"Url" type:"string"`

	metadataCreateOpenIDConnectProviderInput `json:"-", xml:"-"`
}

type metadataCreateOpenIDConnectProviderInput struct {
	SDKShapeTraits bool `type:"structure" required:"Url,ThumbprintList"`
}

type CreateOpenIDConnectProviderOutput struct {
	OpenIDConnectProviderARN *string `locationName:"OpenIDConnectProviderArn" type:"string"`

	metadataCreateOpenIDConnectProviderOutput `json:"-", xml:"-"`
}

type metadataCreateOpenIDConnectProviderOutput struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"CreateOpenIDConnectProviderResult"`
}

type CreatePolicyInput struct {
	Description    *string `type:"string"`
	Path           *string `type:"string"`
	PolicyDocument *string `type:"string"`
	PolicyName     *string `type:"string"`

	metadataCreatePolicyInput `json:"-", xml:"-"`
}

type metadataCreatePolicyInput struct {
	SDKShapeTraits bool `type:"structure" required:"PolicyName,PolicyDocument"`
}

type CreatePolicyOutput struct {
	Policy *Policy `type:"structure"`

	metadataCreatePolicyOutput `json:"-", xml:"-"`
}

type metadataCreatePolicyOutput struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"CreatePolicyResult"`
}

type CreatePolicyVersionInput struct {
	PolicyARN      *string `locationName:"PolicyArn" type:"string"`
	PolicyDocument *string `type:"string"`
	SetAsDefault   *bool   `type:"boolean"`

	metadataCreatePolicyVersionInput `json:"-", xml:"-"`
}

type metadataCreatePolicyVersionInput struct {
	SDKShapeTraits bool `type:"structure" required:"PolicyArn,PolicyDocument"`
}

type CreatePolicyVersionOutput struct {
	PolicyVersion *PolicyVersion `type:"structure"`

	metadataCreatePolicyVersionOutput `json:"-", xml:"-"`
}

type metadataCreatePolicyVersionOutput struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"CreatePolicyVersionResult"`
}

type CreateRoleInput struct {
	AssumeRolePolicyDocument *string `type:"string"`
	Path                     *string `type:"string"`
	RoleName                 *string `type:"string"`

	metadataCreateRoleInput `json:"-", xml:"-"`
}

type metadataCreateRoleInput struct {
	SDKShapeTraits bool `type:"structure" required:"RoleName,AssumeRolePolicyDocument"`
}

type CreateRoleOutput struct {
	Role *Role `type:"structure"`

	metadataCreateRoleOutput `json:"-", xml:"-"`
}

type metadataCreateRoleOutput struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"CreateRoleResult" required:"Role"`
}

type CreateSAMLProviderInput struct {
	Name                 *string `type:"string"`
	SAMLMetadataDocument *string `type:"string"`

	metadataCreateSAMLProviderInput `json:"-", xml:"-"`
}

type metadataCreateSAMLProviderInput struct {
	SDKShapeTraits bool `type:"structure" required:"SAMLMetadataDocument,Name"`
}

type CreateSAMLProviderOutput struct {
	SAMLProviderARN *string `locationName:"SAMLProviderArn" type:"string"`

	metadataCreateSAMLProviderOutput `json:"-", xml:"-"`
}

type metadataCreateSAMLProviderOutput struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"CreateSAMLProviderResult"`
}

type CreateUserInput struct {
	Path     *string `type:"string"`
	UserName *string `type:"string"`

	metadataCreateUserInput `json:"-", xml:"-"`
}

type metadataCreateUserInput struct {
	SDKShapeTraits bool `type:"structure" required:"UserName"`
}

type CreateUserOutput struct {
	User *User `type:"structure"`

	metadataCreateUserOutput `json:"-", xml:"-"`
}

type metadataCreateUserOutput struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"CreateUserResult"`
}

type CreateVirtualMFADeviceInput struct {
	Path                 *string `type:"string"`
	VirtualMFADeviceName *string `type:"string"`

	metadataCreateVirtualMFADeviceInput `json:"-", xml:"-"`
}

type metadataCreateVirtualMFADeviceInput struct {
	SDKShapeTraits bool `type:"structure" required:"VirtualMFADeviceName"`
}

type CreateVirtualMFADeviceOutput struct {
	VirtualMFADevice *VirtualMFADevice `type:"structure"`

	metadataCreateVirtualMFADeviceOutput `json:"-", xml:"-"`
}

type metadataCreateVirtualMFADeviceOutput struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"CreateVirtualMFADeviceResult" required:"VirtualMFADevice"`
}

type CredentialReportExpiredException struct {
	Message *string `locationName:"message" type:"string"`

	metadataCredentialReportExpiredException `json:"-", xml:"-"`
}

type metadataCredentialReportExpiredException struct {
	SDKShapeTraits bool `type:"structure"`
}

type CredentialReportNotPresentException struct {
	Message *string `locationName:"message" type:"string"`

	metadataCredentialReportNotPresentException `json:"-", xml:"-"`
}

type metadataCredentialReportNotPresentException struct {
	SDKShapeTraits bool `type:"structure"`
}

type CredentialReportNotReadyException struct {
	Message *string `locationName:"message" type:"string"`

	metadataCredentialReportNotReadyException `json:"-", xml:"-"`
}

type metadataCredentialReportNotReadyException struct {
	SDKShapeTraits bool `type:"structure"`
}

type DeactivateMFADeviceInput struct {
	SerialNumber *string `type:"string"`
	UserName     *string `type:"string"`

	metadataDeactivateMFADeviceInput `json:"-", xml:"-"`
}

type metadataDeactivateMFADeviceInput struct {
	SDKShapeTraits bool `type:"structure" required:"UserName,SerialNumber"`
}

type DeleteAccessKeyInput struct {
	AccessKeyID *string `locationName:"AccessKeyId" type:"string"`
	UserName    *string `type:"string"`

	metadataDeleteAccessKeyInput `json:"-", xml:"-"`
}

type metadataDeleteAccessKeyInput struct {
	SDKShapeTraits bool `type:"structure" required:"AccessKeyId"`
}

type DeleteAccountAliasInput struct {
	AccountAlias *string `type:"string"`

	metadataDeleteAccountAliasInput `json:"-", xml:"-"`
}

type metadataDeleteAccountAliasInput struct {
	SDKShapeTraits bool `type:"structure" required:"AccountAlias"`
}

type DeleteConflictException struct {
	Message *string `locationName:"message" type:"string"`

	metadataDeleteConflictException `json:"-", xml:"-"`
}

type metadataDeleteConflictException struct {
	SDKShapeTraits bool `type:"structure"`
}

type DeleteGroupInput struct {
	GroupName *string `type:"string"`

	metadataDeleteGroupInput `json:"-", xml:"-"`
}

type metadataDeleteGroupInput struct {
	SDKShapeTraits bool `type:"structure" required:"GroupName"`
}

type DeleteGroupPolicyInput struct {
	GroupName  *string `type:"string"`
	PolicyName *string `type:"string"`

	metadataDeleteGroupPolicyInput `json:"-", xml:"-"`
}

type metadataDeleteGroupPolicyInput struct {
	SDKShapeTraits bool `type:"structure" required:"GroupName,PolicyName"`
}

type DeleteInstanceProfileInput struct {
	InstanceProfileName *string `type:"string"`

	metadataDeleteInstanceProfileInput `json:"-", xml:"-"`
}

type metadataDeleteInstanceProfileInput struct {
	SDKShapeTraits bool `type:"structure" required:"InstanceProfileName"`
}

type DeleteLoginProfileInput struct {
	UserName *string `type:"string"`

	metadataDeleteLoginProfileInput `json:"-", xml:"-"`
}

type metadataDeleteLoginProfileInput struct {
	SDKShapeTraits bool `type:"structure" required:"UserName"`
}

type DeleteOpenIDConnectProviderInput struct {
	OpenIDConnectProviderARN *string `locationName:"OpenIDConnectProviderArn" type:"string"`

	metadataDeleteOpenIDConnectProviderInput `json:"-", xml:"-"`
}

type metadataDeleteOpenIDConnectProviderInput struct {
	SDKShapeTraits bool `type:"structure" required:"OpenIDConnectProviderArn"`
}

type DeletePolicyInput struct {
	PolicyARN *string `locationName:"PolicyArn" type:"string"`

	metadataDeletePolicyInput `json:"-", xml:"-"`
}

type metadataDeletePolicyInput struct {
	SDKShapeTraits bool `type:"structure" required:"PolicyArn"`
}

type DeletePolicyVersionInput struct {
	PolicyARN *string `locationName:"PolicyArn" type:"string"`
	VersionID *string `locationName:"VersionId" type:"string"`

	metadataDeletePolicyVersionInput `json:"-", xml:"-"`
}

type metadataDeletePolicyVersionInput struct {
	SDKShapeTraits bool `type:"structure" required:"PolicyArn,VersionId"`
}

type DeleteRoleInput struct {
	RoleName *string `type:"string"`

	metadataDeleteRoleInput `json:"-", xml:"-"`
}

type metadataDeleteRoleInput struct {
	SDKShapeTraits bool `type:"structure" required:"RoleName"`
}

type DeleteRolePolicyInput struct {
	PolicyName *string `type:"string"`
	RoleName   *string `type:"string"`

	metadataDeleteRolePolicyInput `json:"-", xml:"-"`
}

type metadataDeleteRolePolicyInput struct {
	SDKShapeTraits bool `type:"structure" required:"RoleName,PolicyName"`
}

type DeleteSAMLProviderInput struct {
	SAMLProviderARN *string `locationName:"SAMLProviderArn" type:"string"`

	metadataDeleteSAMLProviderInput `json:"-", xml:"-"`
}

type metadataDeleteSAMLProviderInput struct {
	SDKShapeTraits bool `type:"structure" required:"SAMLProviderArn"`
}

type DeleteServerCertificateInput struct {
	ServerCertificateName *string `type:"string"`

	metadataDeleteServerCertificateInput `json:"-", xml:"-"`
}

type metadataDeleteServerCertificateInput struct {
	SDKShapeTraits bool `type:"structure" required:"ServerCertificateName"`
}

type DeleteSigningCertificateInput struct {
	CertificateID *string `locationName:"CertificateId" type:"string"`
	UserName      *string `type:"string"`

	metadataDeleteSigningCertificateInput `json:"-", xml:"-"`
}

type metadataDeleteSigningCertificateInput struct {
	SDKShapeTraits bool `type:"structure" required:"CertificateId"`
}

type DeleteUserInput struct {
	UserName *string `type:"string"`

	metadataDeleteUserInput `json:"-", xml:"-"`
}

type metadataDeleteUserInput struct {
	SDKShapeTraits bool `type:"structure" required:"UserName"`
}

type DeleteUserPolicyInput struct {
	PolicyName *string `type:"string"`
	UserName   *string `type:"string"`

	metadataDeleteUserPolicyInput `json:"-", xml:"-"`
}

type metadataDeleteUserPolicyInput struct {
	SDKShapeTraits bool `type:"structure" required:"UserName,PolicyName"`
}

type DeleteVirtualMFADeviceInput struct {
	SerialNumber *string `type:"string"`

	metadataDeleteVirtualMFADeviceInput `json:"-", xml:"-"`
}

type metadataDeleteVirtualMFADeviceInput struct {
	SDKShapeTraits bool `type:"structure" required:"SerialNumber"`
}

type DetachGroupPolicyInput struct {
	GroupName *string `type:"string"`
	PolicyARN *string `locationName:"PolicyArn" type:"string"`

	metadataDetachGroupPolicyInput `json:"-", xml:"-"`
}

type metadataDetachGroupPolicyInput struct {
	SDKShapeTraits bool `type:"structure" required:"GroupName,PolicyArn"`
}

type DetachRolePolicyInput struct {
	PolicyARN *string `locationName:"PolicyArn" type:"string"`
	RoleName  *string `type:"string"`

	metadataDetachRolePolicyInput `json:"-", xml:"-"`
}

type metadataDetachRolePolicyInput struct {
	SDKShapeTraits bool `type:"structure" required:"RoleName,PolicyArn"`
}

type DetachUserPolicyInput struct {
	PolicyARN *string `locationName:"PolicyArn" type:"string"`
	UserName  *string `type:"string"`

	metadataDetachUserPolicyInput `json:"-", xml:"-"`
}

type metadataDetachUserPolicyInput struct {
	SDKShapeTraits bool `type:"structure" required:"UserName,PolicyArn"`
}

type DuplicateCertificateException struct {
	Message *string `locationName:"message" type:"string"`

	metadataDuplicateCertificateException `json:"-", xml:"-"`
}

type metadataDuplicateCertificateException struct {
	SDKShapeTraits bool `type:"structure"`
}

type EnableMFADeviceInput struct {
	AuthenticationCode1 *string `type:"string"`
	AuthenticationCode2 *string `type:"string"`
	SerialNumber        *string `type:"string"`
	UserName            *string `type:"string"`

	metadataEnableMFADeviceInput `json:"-", xml:"-"`
}

type metadataEnableMFADeviceInput struct {
	SDKShapeTraits bool `type:"structure" required:"UserName,SerialNumber,AuthenticationCode1,AuthenticationCode2"`
}

type EntityAlreadyExistsException struct {
	Message *string `locationName:"message" type:"string"`

	metadataEntityAlreadyExistsException `json:"-", xml:"-"`
}

type metadataEntityAlreadyExistsException struct {
	SDKShapeTraits bool `type:"structure"`
}

type EntityTemporarilyUnmodifiableException struct {
	Message *string `locationName:"message" type:"string"`

	metadataEntityTemporarilyUnmodifiableException `json:"-", xml:"-"`
}

type metadataEntityTemporarilyUnmodifiableException struct {
	SDKShapeTraits bool `type:"structure"`
}

type GenerateCredentialReportOutput struct {
	Description *string `type:"string"`
	State       *string `type:"string"`

	metadataGenerateCredentialReportOutput `json:"-", xml:"-"`
}

type metadataGenerateCredentialReportOutput struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"GenerateCredentialReportResult"`
}

type GetAccountAuthorizationDetailsInput struct {
	Filter   []*string `type:"list"`
	Marker   *string   `type:"string"`
	MaxItems *int      `type:"integer"`

	metadataGetAccountAuthorizationDetailsInput `json:"-", xml:"-"`
}

type metadataGetAccountAuthorizationDetailsInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type GetAccountAuthorizationDetailsOutput struct {
	GroupDetailList []*GroupDetail `type:"list"`
	IsTruncated     *bool          `type:"boolean"`
	Marker          *string        `type:"string"`
	RoleDetailList  []*RoleDetail  `type:"list"`
	UserDetailList  []*UserDetail  `type:"list"`

	metadataGetAccountAuthorizationDetailsOutput `json:"-", xml:"-"`
}

type metadataGetAccountAuthorizationDetailsOutput struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"GetAccountAuthorizationDetailsResult"`
}

type GetAccountPasswordPolicyOutput struct {
	PasswordPolicy *PasswordPolicy `type:"structure"`

	metadataGetAccountPasswordPolicyOutput `json:"-", xml:"-"`
}

type metadataGetAccountPasswordPolicyOutput struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"GetAccountPasswordPolicyResult" required:"PasswordPolicy"`
}

type GetAccountSummaryOutput struct {
	SummaryMap *map[string]*int `type:"map"`

	metadataGetAccountSummaryOutput `json:"-", xml:"-"`
}

type metadataGetAccountSummaryOutput struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"GetAccountSummaryResult"`
}

type GetCredentialReportOutput struct {
	Content       []byte     `type:"blob"`
	GeneratedTime *time.Time `type:"timestamp" timestampFormat:"iso8601"`
	ReportFormat  *string    `type:"string"`

	metadataGetCredentialReportOutput `json:"-", xml:"-"`
}

type metadataGetCredentialReportOutput struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"GetCredentialReportResult"`
}

type GetGroupInput struct {
	GroupName *string `type:"string"`
	Marker    *string `type:"string"`
	MaxItems  *int    `type:"integer"`

	metadataGetGroupInput `json:"-", xml:"-"`
}

type metadataGetGroupInput struct {
	SDKShapeTraits bool `type:"structure" required:"GroupName"`
}

type GetGroupOutput struct {
	Group       *Group  `type:"structure"`
	IsTruncated *bool   `type:"boolean"`
	Marker      *string `type:"string"`
	Users       []*User `type:"list"`

	metadataGetGroupOutput `json:"-", xml:"-"`
}

type metadataGetGroupOutput struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"GetGroupResult" required:"Group,Users"`
}

type GetGroupPolicyInput struct {
	GroupName  *string `type:"string"`
	PolicyName *string `type:"string"`

	metadataGetGroupPolicyInput `json:"-", xml:"-"`
}

type metadataGetGroupPolicyInput struct {
	SDKShapeTraits bool `type:"structure" required:"GroupName,PolicyName"`
}

type GetGroupPolicyOutput struct {
	GroupName      *string `type:"string"`
	PolicyDocument *string `type:"string"`
	PolicyName     *string `type:"string"`

	metadataGetGroupPolicyOutput `json:"-", xml:"-"`
}

type metadataGetGroupPolicyOutput struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"GetGroupPolicyResult" required:"GroupName,PolicyName,PolicyDocument"`
}

type GetInstanceProfileInput struct {
	InstanceProfileName *string `type:"string"`

	metadataGetInstanceProfileInput `json:"-", xml:"-"`
}

type metadataGetInstanceProfileInput struct {
	SDKShapeTraits bool `type:"structure" required:"InstanceProfileName"`
}

type GetInstanceProfileOutput struct {
	InstanceProfile *InstanceProfile `type:"structure"`

	metadataGetInstanceProfileOutput `json:"-", xml:"-"`
}

type metadataGetInstanceProfileOutput struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"GetInstanceProfileResult" required:"InstanceProfile"`
}

type GetLoginProfileInput struct {
	UserName *string `type:"string"`

	metadataGetLoginProfileInput `json:"-", xml:"-"`
}

type metadataGetLoginProfileInput struct {
	SDKShapeTraits bool `type:"structure" required:"UserName"`
}

type GetLoginProfileOutput struct {
	LoginProfile *LoginProfile `type:"structure"`

	metadataGetLoginProfileOutput `json:"-", xml:"-"`
}

type metadataGetLoginProfileOutput struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"GetLoginProfileResult" required:"LoginProfile"`
}

type GetOpenIDConnectProviderInput struct {
	OpenIDConnectProviderARN *string `locationName:"OpenIDConnectProviderArn" type:"string"`

	metadataGetOpenIDConnectProviderInput `json:"-", xml:"-"`
}

type metadataGetOpenIDConnectProviderInput struct {
	SDKShapeTraits bool `type:"structure" required:"OpenIDConnectProviderArn"`
}

type GetOpenIDConnectProviderOutput struct {
	ClientIDList   []*string  `type:"list"`
	CreateDate     *time.Time `type:"timestamp" timestampFormat:"iso8601"`
	ThumbprintList []*string  `type:"list"`
	URL            *string    `locationName:"Url" type:"string"`

	metadataGetOpenIDConnectProviderOutput `json:"-", xml:"-"`
}

type metadataGetOpenIDConnectProviderOutput struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"GetOpenIDConnectProviderResult"`
}

type GetPolicyInput struct {
	PolicyARN *string `locationName:"PolicyArn" type:"string"`

	metadataGetPolicyInput `json:"-", xml:"-"`
}

type metadataGetPolicyInput struct {
	SDKShapeTraits bool `type:"structure" required:"PolicyArn"`
}

type GetPolicyOutput struct {
	Policy *Policy `type:"structure"`

	metadataGetPolicyOutput `json:"-", xml:"-"`
}

type metadataGetPolicyOutput struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"GetPolicyResult"`
}

type GetPolicyVersionInput struct {
	PolicyARN *string `locationName:"PolicyArn" type:"string"`
	VersionID *string `locationName:"VersionId" type:"string"`

	metadataGetPolicyVersionInput `json:"-", xml:"-"`
}

type metadataGetPolicyVersionInput struct {
	SDKShapeTraits bool `type:"structure" required:"PolicyArn,VersionId"`
}

type GetPolicyVersionOutput struct {
	PolicyVersion *PolicyVersion `type:"structure"`

	metadataGetPolicyVersionOutput `json:"-", xml:"-"`
}

type metadataGetPolicyVersionOutput struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"GetPolicyVersionResult"`
}

type GetRoleInput struct {
	RoleName *string `type:"string"`

	metadataGetRoleInput `json:"-", xml:"-"`
}

type metadataGetRoleInput struct {
	SDKShapeTraits bool `type:"structure" required:"RoleName"`
}

type GetRoleOutput struct {
	Role *Role `type:"structure"`

	metadataGetRoleOutput `json:"-", xml:"-"`
}

type metadataGetRoleOutput struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"GetRoleResult" required:"Role"`
}

type GetRolePolicyInput struct {
	PolicyName *string `type:"string"`
	RoleName   *string `type:"string"`

	metadataGetRolePolicyInput `json:"-", xml:"-"`
}

type metadataGetRolePolicyInput struct {
	SDKShapeTraits bool `type:"structure" required:"RoleName,PolicyName"`
}

type GetRolePolicyOutput struct {
	PolicyDocument *string `type:"string"`
	PolicyName     *string `type:"string"`
	RoleName       *string `type:"string"`

	metadataGetRolePolicyOutput `json:"-", xml:"-"`
}

type metadataGetRolePolicyOutput struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"GetRolePolicyResult" required:"RoleName,PolicyName,PolicyDocument"`
}

type GetSAMLProviderInput struct {
	SAMLProviderARN *string `locationName:"SAMLProviderArn" type:"string"`

	metadataGetSAMLProviderInput `json:"-", xml:"-"`
}

type metadataGetSAMLProviderInput struct {
	SDKShapeTraits bool `type:"structure" required:"SAMLProviderArn"`
}

type GetSAMLProviderOutput struct {
	CreateDate           *time.Time `type:"timestamp" timestampFormat:"iso8601"`
	SAMLMetadataDocument *string    `type:"string"`
	ValidUntil           *time.Time `type:"timestamp" timestampFormat:"iso8601"`

	metadataGetSAMLProviderOutput `json:"-", xml:"-"`
}

type metadataGetSAMLProviderOutput struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"GetSAMLProviderResult"`
}

type GetServerCertificateInput struct {
	ServerCertificateName *string `type:"string"`

	metadataGetServerCertificateInput `json:"-", xml:"-"`
}

type metadataGetServerCertificateInput struct {
	SDKShapeTraits bool `type:"structure" required:"ServerCertificateName"`
}

type GetServerCertificateOutput struct {
	ServerCertificate *ServerCertificate `type:"structure"`

	metadataGetServerCertificateOutput `json:"-", xml:"-"`
}

type metadataGetServerCertificateOutput struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"GetServerCertificateResult" required:"ServerCertificate"`
}

type GetUserInput struct {
	UserName *string `type:"string"`

	metadataGetUserInput `json:"-", xml:"-"`
}

type metadataGetUserInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type GetUserOutput struct {
	User *User `type:"structure"`

	metadataGetUserOutput `json:"-", xml:"-"`
}

type metadataGetUserOutput struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"GetUserResult" required:"User"`
}

type GetUserPolicyInput struct {
	PolicyName *string `type:"string"`
	UserName   *string `type:"string"`

	metadataGetUserPolicyInput `json:"-", xml:"-"`
}

type metadataGetUserPolicyInput struct {
	SDKShapeTraits bool `type:"structure" required:"UserName,PolicyName"`
}

type GetUserPolicyOutput struct {
	PolicyDocument *string `type:"string"`
	PolicyName     *string `type:"string"`
	UserName       *string `type:"string"`

	metadataGetUserPolicyOutput `json:"-", xml:"-"`
}

type metadataGetUserPolicyOutput struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"GetUserPolicyResult" required:"UserName,PolicyName,PolicyDocument"`
}

type Group struct {
	ARN        *string    `locationName:"Arn" type:"string"`
	CreateDate *time.Time `type:"timestamp" timestampFormat:"iso8601"`
	GroupID    *string    `locationName:"GroupId" type:"string"`
	GroupName  *string    `type:"string"`
	Path       *string    `type:"string"`

	metadataGroup `json:"-", xml:"-"`
}

type metadataGroup struct {
	SDKShapeTraits bool `type:"structure" required:"Path,GroupName,GroupId,Arn,CreateDate"`
}

type GroupDetail struct {
	ARN             *string         `locationName:"Arn" type:"string"`
	CreateDate      *time.Time      `type:"timestamp" timestampFormat:"iso8601"`
	GroupID         *string         `locationName:"GroupId" type:"string"`
	GroupName       *string         `type:"string"`
	GroupPolicyList []*PolicyDetail `type:"list"`
	Path            *string         `type:"string"`

	metadataGroupDetail `json:"-", xml:"-"`
}

type metadataGroupDetail struct {
	SDKShapeTraits bool `type:"structure"`
}

type InstanceProfile struct {
	ARN                 *string    `locationName:"Arn" type:"string"`
	CreateDate          *time.Time `type:"timestamp" timestampFormat:"iso8601"`
	InstanceProfileID   *string    `locationName:"InstanceProfileId" type:"string"`
	InstanceProfileName *string    `type:"string"`
	Path                *string    `type:"string"`
	Roles               []*Role    `type:"list"`

	metadataInstanceProfile `json:"-", xml:"-"`
}

type metadataInstanceProfile struct {
	SDKShapeTraits bool `type:"structure" required:"Path,InstanceProfileName,InstanceProfileId,Arn,CreateDate,Roles"`
}

type InvalidAuthenticationCodeException struct {
	Message *string `locationName:"message" type:"string"`

	metadataInvalidAuthenticationCodeException `json:"-", xml:"-"`
}

type metadataInvalidAuthenticationCodeException struct {
	SDKShapeTraits bool `type:"structure"`
}

type InvalidCertificateException struct {
	Message *string `locationName:"message" type:"string"`

	metadataInvalidCertificateException `json:"-", xml:"-"`
}

type metadataInvalidCertificateException struct {
	SDKShapeTraits bool `type:"structure"`
}

type InvalidInputException struct {
	Message *string `locationName:"message" type:"string"`

	metadataInvalidInputException `json:"-", xml:"-"`
}

type metadataInvalidInputException struct {
	SDKShapeTraits bool `type:"structure"`
}

type InvalidUserTypeException struct {
	Message *string `locationName:"message" type:"string"`

	metadataInvalidUserTypeException `json:"-", xml:"-"`
}

type metadataInvalidUserTypeException struct {
	SDKShapeTraits bool `type:"structure"`
}

type KeyPairMismatchException struct {
	Message *string `locationName:"message" type:"string"`

	metadataKeyPairMismatchException `json:"-", xml:"-"`
}

type metadataKeyPairMismatchException struct {
	SDKShapeTraits bool `type:"structure"`
}

type LimitExceededException struct {
	Message *string `locationName:"message" type:"string"`

	metadataLimitExceededException `json:"-", xml:"-"`
}

type metadataLimitExceededException struct {
	SDKShapeTraits bool `type:"structure"`
}

type ListAccessKeysInput struct {
	Marker   *string `type:"string"`
	MaxItems *int    `type:"integer"`
	UserName *string `type:"string"`

	metadataListAccessKeysInput `json:"-", xml:"-"`
}

type metadataListAccessKeysInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type ListAccessKeysOutput struct {
	AccessKeyMetadata []*AccessKeyMetadata `type:"list"`
	IsTruncated       *bool                `type:"boolean"`
	Marker            *string              `type:"string"`

	metadataListAccessKeysOutput `json:"-", xml:"-"`
}

type metadataListAccessKeysOutput struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"ListAccessKeysResult" required:"AccessKeyMetadata"`
}

type ListAccountAliasesInput struct {
	Marker   *string `type:"string"`
	MaxItems *int    `type:"integer"`

	metadataListAccountAliasesInput `json:"-", xml:"-"`
}

type metadataListAccountAliasesInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type ListAccountAliasesOutput struct {
	AccountAliases []*string `type:"list"`
	IsTruncated    *bool     `type:"boolean"`
	Marker         *string   `type:"string"`

	metadataListAccountAliasesOutput `json:"-", xml:"-"`
}

type metadataListAccountAliasesOutput struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"ListAccountAliasesResult" required:"AccountAliases"`
}

type ListAttachedGroupPoliciesInput struct {
	GroupName  *string `type:"string"`
	Marker     *string `type:"string"`
	MaxItems   *int    `type:"integer"`
	PathPrefix *string `type:"string"`

	metadataListAttachedGroupPoliciesInput `json:"-", xml:"-"`
}

type metadataListAttachedGroupPoliciesInput struct {
	SDKShapeTraits bool `type:"structure" required:"GroupName"`
}

type ListAttachedGroupPoliciesOutput struct {
	AttachedPolicies []*AttachedPolicy `type:"list"`
	IsTruncated      *bool             `type:"boolean"`
	Marker           *string           `type:"string"`

	metadataListAttachedGroupPoliciesOutput `json:"-", xml:"-"`
}

type metadataListAttachedGroupPoliciesOutput struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"ListAttachedGroupPoliciesResult"`
}

type ListAttachedRolePoliciesInput struct {
	Marker     *string `type:"string"`
	MaxItems   *int    `type:"integer"`
	PathPrefix *string `type:"string"`
	RoleName   *string `type:"string"`

	metadataListAttachedRolePoliciesInput `json:"-", xml:"-"`
}

type metadataListAttachedRolePoliciesInput struct {
	SDKShapeTraits bool `type:"structure" required:"RoleName"`
}

type ListAttachedRolePoliciesOutput struct {
	AttachedPolicies []*AttachedPolicy `type:"list"`
	IsTruncated      *bool             `type:"boolean"`
	Marker           *string           `type:"string"`

	metadataListAttachedRolePoliciesOutput `json:"-", xml:"-"`
}

type metadataListAttachedRolePoliciesOutput struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"ListAttachedRolePoliciesResult"`
}

type ListAttachedUserPoliciesInput struct {
	Marker     *string `type:"string"`
	MaxItems   *int    `type:"integer"`
	PathPrefix *string `type:"string"`
	UserName   *string `type:"string"`

	metadataListAttachedUserPoliciesInput `json:"-", xml:"-"`
}

type metadataListAttachedUserPoliciesInput struct {
	SDKShapeTraits bool `type:"structure" required:"UserName"`
}

type ListAttachedUserPoliciesOutput struct {
	AttachedPolicies []*AttachedPolicy `type:"list"`
	IsTruncated      *bool             `type:"boolean"`
	Marker           *string           `type:"string"`

	metadataListAttachedUserPoliciesOutput `json:"-", xml:"-"`
}

type metadataListAttachedUserPoliciesOutput struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"ListAttachedUserPoliciesResult"`
}

type ListEntitiesForPolicyInput struct {
	EntityFilter *string `type:"string"`
	Marker       *string `type:"string"`
	MaxItems     *int    `type:"integer"`
	PathPrefix   *string `type:"string"`
	PolicyARN    *string `locationName:"PolicyArn" type:"string"`

	metadataListEntitiesForPolicyInput `json:"-", xml:"-"`
}

type metadataListEntitiesForPolicyInput struct {
	SDKShapeTraits bool `type:"structure" required:"PolicyArn"`
}

type ListEntitiesForPolicyOutput struct {
	IsTruncated  *bool          `type:"boolean"`
	Marker       *string        `type:"string"`
	PolicyGroups []*PolicyGroup `type:"list"`
	PolicyRoles  []*PolicyRole  `type:"list"`
	PolicyUsers  []*PolicyUser  `type:"list"`

	metadataListEntitiesForPolicyOutput `json:"-", xml:"-"`
}

type metadataListEntitiesForPolicyOutput struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"ListEntitiesForPolicyResult"`
}

type ListGroupPoliciesInput struct {
	GroupName *string `type:"string"`
	Marker    *string `type:"string"`
	MaxItems  *int    `type:"integer"`

	metadataListGroupPoliciesInput `json:"-", xml:"-"`
}

type metadataListGroupPoliciesInput struct {
	SDKShapeTraits bool `type:"structure" required:"GroupName"`
}

type ListGroupPoliciesOutput struct {
	IsTruncated *bool     `type:"boolean"`
	Marker      *string   `type:"string"`
	PolicyNames []*string `type:"list"`

	metadataListGroupPoliciesOutput `json:"-", xml:"-"`
}

type metadataListGroupPoliciesOutput struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"ListGroupPoliciesResult" required:"PolicyNames"`
}

type ListGroupsForUserInput struct {
	Marker   *string `type:"string"`
	MaxItems *int    `type:"integer"`
	UserName *string `type:"string"`

	metadataListGroupsForUserInput `json:"-", xml:"-"`
}

type metadataListGroupsForUserInput struct {
	SDKShapeTraits bool `type:"structure" required:"UserName"`
}

type ListGroupsForUserOutput struct {
	Groups      []*Group `type:"list"`
	IsTruncated *bool    `type:"boolean"`
	Marker      *string  `type:"string"`

	metadataListGroupsForUserOutput `json:"-", xml:"-"`
}

type metadataListGroupsForUserOutput struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"ListGroupsForUserResult" required:"Groups"`
}

type ListGroupsInput struct {
	Marker     *string `type:"string"`
	MaxItems   *int    `type:"integer"`
	PathPrefix *string `type:"string"`

	metadataListGroupsInput `json:"-", xml:"-"`
}

type metadataListGroupsInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type ListGroupsOutput struct {
	Groups      []*Group `type:"list"`
	IsTruncated *bool    `type:"boolean"`
	Marker      *string  `type:"string"`

	metadataListGroupsOutput `json:"-", xml:"-"`
}

type metadataListGroupsOutput struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"ListGroupsResult" required:"Groups"`
}

type ListInstanceProfilesForRoleInput struct {
	Marker   *string `type:"string"`
	MaxItems *int    `type:"integer"`
	RoleName *string `type:"string"`

	metadataListInstanceProfilesForRoleInput `json:"-", xml:"-"`
}

type metadataListInstanceProfilesForRoleInput struct {
	SDKShapeTraits bool `type:"structure" required:"RoleName"`
}

type ListInstanceProfilesForRoleOutput struct {
	InstanceProfiles []*InstanceProfile `type:"list"`
	IsTruncated      *bool              `type:"boolean"`
	Marker           *string            `type:"string"`

	metadataListInstanceProfilesForRoleOutput `json:"-", xml:"-"`
}

type metadataListInstanceProfilesForRoleOutput struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"ListInstanceProfilesForRoleResult" required:"InstanceProfiles"`
}

type ListInstanceProfilesInput struct {
	Marker     *string `type:"string"`
	MaxItems   *int    `type:"integer"`
	PathPrefix *string `type:"string"`

	metadataListInstanceProfilesInput `json:"-", xml:"-"`
}

type metadataListInstanceProfilesInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type ListInstanceProfilesOutput struct {
	InstanceProfiles []*InstanceProfile `type:"list"`
	IsTruncated      *bool              `type:"boolean"`
	Marker           *string            `type:"string"`

	metadataListInstanceProfilesOutput `json:"-", xml:"-"`
}

type metadataListInstanceProfilesOutput struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"ListInstanceProfilesResult" required:"InstanceProfiles"`
}

type ListMFADevicesInput struct {
	Marker   *string `type:"string"`
	MaxItems *int    `type:"integer"`
	UserName *string `type:"string"`

	metadataListMFADevicesInput `json:"-", xml:"-"`
}

type metadataListMFADevicesInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type ListMFADevicesOutput struct {
	IsTruncated *bool        `type:"boolean"`
	MFADevices  []*MFADevice `type:"list"`
	Marker      *string      `type:"string"`

	metadataListMFADevicesOutput `json:"-", xml:"-"`
}

type metadataListMFADevicesOutput struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"ListMFADevicesResult" required:"MFADevices"`
}

type ListOpenIDConnectProvidersInput struct {
	metadataListOpenIDConnectProvidersInput `json:"-", xml:"-"`
}

type metadataListOpenIDConnectProvidersInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type ListOpenIDConnectProvidersOutput struct {
	OpenIDConnectProviderList []*OpenIDConnectProviderListEntry `type:"list"`

	metadataListOpenIDConnectProvidersOutput `json:"-", xml:"-"`
}

type metadataListOpenIDConnectProvidersOutput struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"ListOpenIDConnectProvidersResult"`
}

type ListPoliciesInput struct {
	Marker       *string `type:"string"`
	MaxItems     *int    `type:"integer"`
	OnlyAttached *bool   `type:"boolean"`
	PathPrefix   *string `type:"string"`
	Scope        *string `type:"string"`

	metadataListPoliciesInput `json:"-", xml:"-"`
}

type metadataListPoliciesInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type ListPoliciesOutput struct {
	IsTruncated *bool     `type:"boolean"`
	Marker      *string   `type:"string"`
	Policies    []*Policy `type:"list"`

	metadataListPoliciesOutput `json:"-", xml:"-"`
}

type metadataListPoliciesOutput struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"ListPoliciesResult"`
}

type ListPolicyVersionsInput struct {
	Marker    *string `type:"string"`
	MaxItems  *int    `type:"integer"`
	PolicyARN *string `locationName:"PolicyArn" type:"string"`

	metadataListPolicyVersionsInput `json:"-", xml:"-"`
}

type metadataListPolicyVersionsInput struct {
	SDKShapeTraits bool `type:"structure" required:"PolicyArn"`
}

type ListPolicyVersionsOutput struct {
	IsTruncated *bool            `type:"boolean"`
	Marker      *string          `type:"string"`
	Versions    []*PolicyVersion `type:"list"`

	metadataListPolicyVersionsOutput `json:"-", xml:"-"`
}

type metadataListPolicyVersionsOutput struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"ListPolicyVersionsResult"`
}

type ListRolePoliciesInput struct {
	Marker   *string `type:"string"`
	MaxItems *int    `type:"integer"`
	RoleName *string `type:"string"`

	metadataListRolePoliciesInput `json:"-", xml:"-"`
}

type metadataListRolePoliciesInput struct {
	SDKShapeTraits bool `type:"structure" required:"RoleName"`
}

type ListRolePoliciesOutput struct {
	IsTruncated *bool     `type:"boolean"`
	Marker      *string   `type:"string"`
	PolicyNames []*string `type:"list"`

	metadataListRolePoliciesOutput `json:"-", xml:"-"`
}

type metadataListRolePoliciesOutput struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"ListRolePoliciesResult" required:"PolicyNames"`
}

type ListRolesInput struct {
	Marker     *string `type:"string"`
	MaxItems   *int    `type:"integer"`
	PathPrefix *string `type:"string"`

	metadataListRolesInput `json:"-", xml:"-"`
}

type metadataListRolesInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type ListRolesOutput struct {
	IsTruncated *bool   `type:"boolean"`
	Marker      *string `type:"string"`
	Roles       []*Role `type:"list"`

	metadataListRolesOutput `json:"-", xml:"-"`
}

type metadataListRolesOutput struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"ListRolesResult" required:"Roles"`
}

type ListSAMLProvidersInput struct {
	metadataListSAMLProvidersInput `json:"-", xml:"-"`
}

type metadataListSAMLProvidersInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type ListSAMLProvidersOutput struct {
	SAMLProviderList []*SAMLProviderListEntry `type:"list"`

	metadataListSAMLProvidersOutput `json:"-", xml:"-"`
}

type metadataListSAMLProvidersOutput struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"ListSAMLProvidersResult"`
}

type ListServerCertificatesInput struct {
	Marker     *string `type:"string"`
	MaxItems   *int    `type:"integer"`
	PathPrefix *string `type:"string"`

	metadataListServerCertificatesInput `json:"-", xml:"-"`
}

type metadataListServerCertificatesInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type ListServerCertificatesOutput struct {
	IsTruncated                   *bool                        `type:"boolean"`
	Marker                        *string                      `type:"string"`
	ServerCertificateMetadataList []*ServerCertificateMetadata `type:"list"`

	metadataListServerCertificatesOutput `json:"-", xml:"-"`
}

type metadataListServerCertificatesOutput struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"ListServerCertificatesResult" required:"ServerCertificateMetadataList"`
}

type ListSigningCertificatesInput struct {
	Marker   *string `type:"string"`
	MaxItems *int    `type:"integer"`
	UserName *string `type:"string"`

	metadataListSigningCertificatesInput `json:"-", xml:"-"`
}

type metadataListSigningCertificatesInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type ListSigningCertificatesOutput struct {
	Certificates []*SigningCertificate `type:"list"`
	IsTruncated  *bool                 `type:"boolean"`
	Marker       *string               `type:"string"`

	metadataListSigningCertificatesOutput `json:"-", xml:"-"`
}

type metadataListSigningCertificatesOutput struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"ListSigningCertificatesResult" required:"Certificates"`
}

type ListUserPoliciesInput struct {
	Marker   *string `type:"string"`
	MaxItems *int    `type:"integer"`
	UserName *string `type:"string"`

	metadataListUserPoliciesInput `json:"-", xml:"-"`
}

type metadataListUserPoliciesInput struct {
	SDKShapeTraits bool `type:"structure" required:"UserName"`
}

type ListUserPoliciesOutput struct {
	IsTruncated *bool     `type:"boolean"`
	Marker      *string   `type:"string"`
	PolicyNames []*string `type:"list"`

	metadataListUserPoliciesOutput `json:"-", xml:"-"`
}

type metadataListUserPoliciesOutput struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"ListUserPoliciesResult" required:"PolicyNames"`
}

type ListUsersInput struct {
	Marker     *string `type:"string"`
	MaxItems   *int    `type:"integer"`
	PathPrefix *string `type:"string"`

	metadataListUsersInput `json:"-", xml:"-"`
}

type metadataListUsersInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type ListUsersOutput struct {
	IsTruncated *bool   `type:"boolean"`
	Marker      *string `type:"string"`
	Users       []*User `type:"list"`

	metadataListUsersOutput `json:"-", xml:"-"`
}

type metadataListUsersOutput struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"ListUsersResult" required:"Users"`
}

type ListVirtualMFADevicesInput struct {
	AssignmentStatus *string `type:"string"`
	Marker           *string `type:"string"`
	MaxItems         *int    `type:"integer"`

	metadataListVirtualMFADevicesInput `json:"-", xml:"-"`
}

type metadataListVirtualMFADevicesInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type ListVirtualMFADevicesOutput struct {
	IsTruncated       *bool               `type:"boolean"`
	Marker            *string             `type:"string"`
	VirtualMFADevices []*VirtualMFADevice `type:"list"`

	metadataListVirtualMFADevicesOutput `json:"-", xml:"-"`
}

type metadataListVirtualMFADevicesOutput struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"ListVirtualMFADevicesResult" required:"VirtualMFADevices"`
}

type LoginProfile struct {
	CreateDate            *time.Time `type:"timestamp" timestampFormat:"iso8601"`
	PasswordResetRequired *bool      `type:"boolean"`
	UserName              *string    `type:"string"`

	metadataLoginProfile `json:"-", xml:"-"`
}

type metadataLoginProfile struct {
	SDKShapeTraits bool `type:"structure" required:"UserName,CreateDate"`
}

type MFADevice struct {
	EnableDate   *time.Time `type:"timestamp" timestampFormat:"iso8601"`
	SerialNumber *string    `type:"string"`
	UserName     *string    `type:"string"`

	metadataMFADevice `json:"-", xml:"-"`
}

type metadataMFADevice struct {
	SDKShapeTraits bool `type:"structure" required:"UserName,SerialNumber,EnableDate"`
}

type MalformedCertificateException struct {
	Message *string `locationName:"message" type:"string"`

	metadataMalformedCertificateException `json:"-", xml:"-"`
}

type metadataMalformedCertificateException struct {
	SDKShapeTraits bool `type:"structure"`
}

type MalformedPolicyDocumentException struct {
	Message *string `locationName:"message" type:"string"`

	metadataMalformedPolicyDocumentException `json:"-", xml:"-"`
}

type metadataMalformedPolicyDocumentException struct {
	SDKShapeTraits bool `type:"structure"`
}

type NoSuchEntityException struct {
	Message *string `locationName:"message" type:"string"`

	metadataNoSuchEntityException `json:"-", xml:"-"`
}

type metadataNoSuchEntityException struct {
	SDKShapeTraits bool `type:"structure"`
}

type OpenIDConnectProviderListEntry struct {
	ARN *string `locationName:"Arn" type:"string"`

	metadataOpenIDConnectProviderListEntry `json:"-", xml:"-"`
}

type metadataOpenIDConnectProviderListEntry struct {
	SDKShapeTraits bool `type:"structure"`
}

type PasswordPolicy struct {
	AllowUsersToChangePassword *bool `type:"boolean"`
	ExpirePasswords            *bool `type:"boolean"`
	HardExpiry                 *bool `type:"boolean"`
	MaxPasswordAge             *int  `type:"integer"`
	MinimumPasswordLength      *int  `type:"integer"`
	PasswordReusePrevention    *int  `type:"integer"`
	RequireLowercaseCharacters *bool `type:"boolean"`
	RequireNumbers             *bool `type:"boolean"`
	RequireSymbols             *bool `type:"boolean"`
	RequireUppercaseCharacters *bool `type:"boolean"`

	metadataPasswordPolicy `json:"-", xml:"-"`
}

type metadataPasswordPolicy struct {
	SDKShapeTraits bool `type:"structure"`
}

type PasswordPolicyViolationException struct {
	Message *string `locationName:"message" type:"string"`

	metadataPasswordPolicyViolationException `json:"-", xml:"-"`
}

type metadataPasswordPolicyViolationException struct {
	SDKShapeTraits bool `type:"structure"`
}

type Policy struct {
	ARN              *string    `locationName:"Arn" type:"string"`
	AttachmentCount  *int       `type:"integer"`
	CreateDate       *time.Time `type:"timestamp" timestampFormat:"iso8601"`
	DefaultVersionID *string    `locationName:"DefaultVersionId" type:"string"`
	Description      *string    `type:"string"`
	IsAttachable     *bool      `type:"boolean"`
	Path             *string    `type:"string"`
	PolicyID         *string    `locationName:"PolicyId" type:"string"`
	PolicyName       *string    `type:"string"`
	UpdateDate       *time.Time `type:"timestamp" timestampFormat:"iso8601"`

	metadataPolicy `json:"-", xml:"-"`
}

type metadataPolicy struct {
	SDKShapeTraits bool `type:"structure"`
}

type PolicyDetail struct {
	PolicyDocument *string `type:"string"`
	PolicyName     *string `type:"string"`

	metadataPolicyDetail `json:"-", xml:"-"`
}

type metadataPolicyDetail struct {
	SDKShapeTraits bool `type:"structure"`
}

type PolicyGroup struct {
	GroupName *string `type:"string"`

	metadataPolicyGroup `json:"-", xml:"-"`
}

type metadataPolicyGroup struct {
	SDKShapeTraits bool `type:"structure"`
}

type PolicyRole struct {
	RoleName *string `type:"string"`

	metadataPolicyRole `json:"-", xml:"-"`
}

type metadataPolicyRole struct {
	SDKShapeTraits bool `type:"structure"`
}

type PolicyUser struct {
	UserName *string `type:"string"`

	metadataPolicyUser `json:"-", xml:"-"`
}

type metadataPolicyUser struct {
	SDKShapeTraits bool `type:"structure"`
}

type PolicyVersion struct {
	CreateDate       *time.Time `type:"timestamp" timestampFormat:"iso8601"`
	Document         *string    `type:"string"`
	IsDefaultVersion *bool      `type:"boolean"`
	VersionID        *string    `locationName:"VersionId" type:"string"`

	metadataPolicyVersion `json:"-", xml:"-"`
}

type metadataPolicyVersion struct {
	SDKShapeTraits bool `type:"structure"`
}

type PutGroupPolicyInput struct {
	GroupName      *string `type:"string"`
	PolicyDocument *string `type:"string"`
	PolicyName     *string `type:"string"`

	metadataPutGroupPolicyInput `json:"-", xml:"-"`
}

type metadataPutGroupPolicyInput struct {
	SDKShapeTraits bool `type:"structure" required:"GroupName,PolicyName,PolicyDocument"`
}

type PutRolePolicyInput struct {
	PolicyDocument *string `type:"string"`
	PolicyName     *string `type:"string"`
	RoleName       *string `type:"string"`

	metadataPutRolePolicyInput `json:"-", xml:"-"`
}

type metadataPutRolePolicyInput struct {
	SDKShapeTraits bool `type:"structure" required:"RoleName,PolicyName,PolicyDocument"`
}

type PutUserPolicyInput struct {
	PolicyDocument *string `type:"string"`
	PolicyName     *string `type:"string"`
	UserName       *string `type:"string"`

	metadataPutUserPolicyInput `json:"-", xml:"-"`
}

type metadataPutUserPolicyInput struct {
	SDKShapeTraits bool `type:"structure" required:"UserName,PolicyName,PolicyDocument"`
}

type RemoveClientIDFromOpenIDConnectProviderInput struct {
	ClientID                 *string `type:"string"`
	OpenIDConnectProviderARN *string `locationName:"OpenIDConnectProviderArn" type:"string"`

	metadataRemoveClientIDFromOpenIDConnectProviderInput `json:"-", xml:"-"`
}

type metadataRemoveClientIDFromOpenIDConnectProviderInput struct {
	SDKShapeTraits bool `type:"structure" required:"OpenIDConnectProviderArn,ClientID"`
}

type RemoveRoleFromInstanceProfileInput struct {
	InstanceProfileName *string `type:"string"`
	RoleName            *string `type:"string"`

	metadataRemoveRoleFromInstanceProfileInput `json:"-", xml:"-"`
}

type metadataRemoveRoleFromInstanceProfileInput struct {
	SDKShapeTraits bool `type:"structure" required:"InstanceProfileName,RoleName"`
}

type RemoveUserFromGroupInput struct {
	GroupName *string `type:"string"`
	UserName  *string `type:"string"`

	metadataRemoveUserFromGroupInput `json:"-", xml:"-"`
}

type metadataRemoveUserFromGroupInput struct {
	SDKShapeTraits bool `type:"structure" required:"GroupName,UserName"`
}

type ResyncMFADeviceInput struct {
	AuthenticationCode1 *string `type:"string"`
	AuthenticationCode2 *string `type:"string"`
	SerialNumber        *string `type:"string"`
	UserName            *string `type:"string"`

	metadataResyncMFADeviceInput `json:"-", xml:"-"`
}

type metadataResyncMFADeviceInput struct {
	SDKShapeTraits bool `type:"structure" required:"UserName,SerialNumber,AuthenticationCode1,AuthenticationCode2"`
}

type Role struct {
	ARN                      *string    `locationName:"Arn" type:"string"`
	AssumeRolePolicyDocument *string    `type:"string"`
	CreateDate               *time.Time `type:"timestamp" timestampFormat:"iso8601"`
	Path                     *string    `type:"string"`
	RoleID                   *string    `locationName:"RoleId" type:"string"`
	RoleName                 *string    `type:"string"`

	metadataRole `json:"-", xml:"-"`
}

type metadataRole struct {
	SDKShapeTraits bool `type:"structure" required:"Path,RoleName,RoleId,Arn,CreateDate"`
}

type RoleDetail struct {
	ARN                      *string            `locationName:"Arn" type:"string"`
	AssumeRolePolicyDocument *string            `type:"string"`
	CreateDate               *time.Time         `type:"timestamp" timestampFormat:"iso8601"`
	InstanceProfileList      []*InstanceProfile `type:"list"`
	Path                     *string            `type:"string"`
	RoleID                   *string            `locationName:"RoleId" type:"string"`
	RoleName                 *string            `type:"string"`
	RolePolicyList           []*PolicyDetail    `type:"list"`

	metadataRoleDetail `json:"-", xml:"-"`
}

type metadataRoleDetail struct {
	SDKShapeTraits bool `type:"structure"`
}

type SAMLProviderListEntry struct {
	ARN        *string    `locationName:"Arn" type:"string"`
	CreateDate *time.Time `type:"timestamp" timestampFormat:"iso8601"`
	ValidUntil *time.Time `type:"timestamp" timestampFormat:"iso8601"`

	metadataSAMLProviderListEntry `json:"-", xml:"-"`
}

type metadataSAMLProviderListEntry struct {
	SDKShapeTraits bool `type:"structure"`
}

type ServerCertificate struct {
	CertificateBody           *string                    `type:"string"`
	CertificateChain          *string                    `type:"string"`
	ServerCertificateMetadata *ServerCertificateMetadata `type:"structure"`

	metadataServerCertificate `json:"-", xml:"-"`
}

type metadataServerCertificate struct {
	SDKShapeTraits bool `type:"structure" required:"ServerCertificateMetadata,CertificateBody"`
}

type ServerCertificateMetadata struct {
	ARN                   *string    `locationName:"Arn" type:"string"`
	Expiration            *time.Time `type:"timestamp" timestampFormat:"iso8601"`
	Path                  *string    `type:"string"`
	ServerCertificateID   *string    `locationName:"ServerCertificateId" type:"string"`
	ServerCertificateName *string    `type:"string"`
	UploadDate            *time.Time `type:"timestamp" timestampFormat:"iso8601"`

	metadataServerCertificateMetadata `json:"-", xml:"-"`
}

type metadataServerCertificateMetadata struct {
	SDKShapeTraits bool `type:"structure" required:"Path,ServerCertificateName,ServerCertificateId,Arn"`
}

type ServiceFailureException struct {
	Message *string `locationName:"message" type:"string"`

	metadataServiceFailureException `json:"-", xml:"-"`
}

type metadataServiceFailureException struct {
	SDKShapeTraits bool `type:"structure"`
}

type SetDefaultPolicyVersionInput struct {
	PolicyARN *string `locationName:"PolicyArn" type:"string"`
	VersionID *string `locationName:"VersionId" type:"string"`

	metadataSetDefaultPolicyVersionInput `json:"-", xml:"-"`
}

type metadataSetDefaultPolicyVersionInput struct {
	SDKShapeTraits bool `type:"structure" required:"PolicyArn,VersionId"`
}

type SigningCertificate struct {
	CertificateBody *string    `type:"string"`
	CertificateID   *string    `locationName:"CertificateId" type:"string"`
	Status          *string    `type:"string"`
	UploadDate      *time.Time `type:"timestamp" timestampFormat:"iso8601"`
	UserName        *string    `type:"string"`

	metadataSigningCertificate `json:"-", xml:"-"`
}

type metadataSigningCertificate struct {
	SDKShapeTraits bool `type:"structure" required:"UserName,CertificateId,CertificateBody,Status"`
}

type UpdateAccessKeyInput struct {
	AccessKeyID *string `locationName:"AccessKeyId" type:"string"`
	Status      *string `type:"string"`
	UserName    *string `type:"string"`

	metadataUpdateAccessKeyInput `json:"-", xml:"-"`
}

type metadataUpdateAccessKeyInput struct {
	SDKShapeTraits bool `type:"structure" required:"AccessKeyId,Status"`
}

type UpdateAccountPasswordPolicyInput struct {
	AllowUsersToChangePassword *bool `type:"boolean"`
	HardExpiry                 *bool `type:"boolean"`
	MaxPasswordAge             *int  `type:"integer"`
	MinimumPasswordLength      *int  `type:"integer"`
	PasswordReusePrevention    *int  `type:"integer"`
	RequireLowercaseCharacters *bool `type:"boolean"`
	RequireNumbers             *bool `type:"boolean"`
	RequireSymbols             *bool `type:"boolean"`
	RequireUppercaseCharacters *bool `type:"boolean"`

	metadataUpdateAccountPasswordPolicyInput `json:"-", xml:"-"`
}

type metadataUpdateAccountPasswordPolicyInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type UpdateAssumeRolePolicyInput struct {
	PolicyDocument *string `type:"string"`
	RoleName       *string `type:"string"`

	metadataUpdateAssumeRolePolicyInput `json:"-", xml:"-"`
}

type metadataUpdateAssumeRolePolicyInput struct {
	SDKShapeTraits bool `type:"structure" required:"RoleName,PolicyDocument"`
}

type UpdateGroupInput struct {
	GroupName    *string `type:"string"`
	NewGroupName *string `type:"string"`
	NewPath      *string `type:"string"`

	metadataUpdateGroupInput `json:"-", xml:"-"`
}

type metadataUpdateGroupInput struct {
	SDKShapeTraits bool `type:"structure" required:"GroupName"`
}

type UpdateLoginProfileInput struct {
	Password              *string `type:"string"`
	PasswordResetRequired *bool   `type:"boolean"`
	UserName              *string `type:"string"`

	metadataUpdateLoginProfileInput `json:"-", xml:"-"`
}

type metadataUpdateLoginProfileInput struct {
	SDKShapeTraits bool `type:"structure" required:"UserName"`
}

type UpdateOpenIDConnectProviderThumbprintInput struct {
	OpenIDConnectProviderARN *string   `locationName:"OpenIDConnectProviderArn" type:"string"`
	ThumbprintList           []*string `type:"list"`

	metadataUpdateOpenIDConnectProviderThumbprintInput `json:"-", xml:"-"`
}

type metadataUpdateOpenIDConnectProviderThumbprintInput struct {
	SDKShapeTraits bool `type:"structure" required:"OpenIDConnectProviderArn,ThumbprintList"`
}

type UpdateSAMLProviderInput struct {
	SAMLMetadataDocument *string `type:"string"`
	SAMLProviderARN      *string `locationName:"SAMLProviderArn" type:"string"`

	metadataUpdateSAMLProviderInput `json:"-", xml:"-"`
}

type metadataUpdateSAMLProviderInput struct {
	SDKShapeTraits bool `type:"structure" required:"SAMLMetadataDocument,SAMLProviderArn"`
}

type UpdateSAMLProviderOutput struct {
	SAMLProviderARN *string `locationName:"SAMLProviderArn" type:"string"`

	metadataUpdateSAMLProviderOutput `json:"-", xml:"-"`
}

type metadataUpdateSAMLProviderOutput struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"UpdateSAMLProviderResult"`
}

type UpdateServerCertificateInput struct {
	NewPath                  *string `type:"string"`
	NewServerCertificateName *string `type:"string"`
	ServerCertificateName    *string `type:"string"`

	metadataUpdateServerCertificateInput `json:"-", xml:"-"`
}

type metadataUpdateServerCertificateInput struct {
	SDKShapeTraits bool `type:"structure" required:"ServerCertificateName"`
}

type UpdateSigningCertificateInput struct {
	CertificateID *string `locationName:"CertificateId" type:"string"`
	Status        *string `type:"string"`
	UserName      *string `type:"string"`

	metadataUpdateSigningCertificateInput `json:"-", xml:"-"`
}

type metadataUpdateSigningCertificateInput struct {
	SDKShapeTraits bool `type:"structure" required:"CertificateId,Status"`
}

type UpdateUserInput struct {
	NewPath     *string `type:"string"`
	NewUserName *string `type:"string"`
	UserName    *string `type:"string"`

	metadataUpdateUserInput `json:"-", xml:"-"`
}

type metadataUpdateUserInput struct {
	SDKShapeTraits bool `type:"structure" required:"UserName"`
}

type UploadServerCertificateInput struct {
	CertificateBody       *string `type:"string"`
	CertificateChain      *string `type:"string"`
	Path                  *string `type:"string"`
	PrivateKey            *string `type:"string"`
	ServerCertificateName *string `type:"string"`

	metadataUploadServerCertificateInput `json:"-", xml:"-"`
}

type metadataUploadServerCertificateInput struct {
	SDKShapeTraits bool `type:"structure" required:"ServerCertificateName,CertificateBody,PrivateKey"`
}

type UploadServerCertificateOutput struct {
	ServerCertificateMetadata *ServerCertificateMetadata `type:"structure"`

	metadataUploadServerCertificateOutput `json:"-", xml:"-"`
}

type metadataUploadServerCertificateOutput struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"UploadServerCertificateResult"`
}

type UploadSigningCertificateInput struct {
	CertificateBody *string `type:"string"`
	UserName        *string `type:"string"`

	metadataUploadSigningCertificateInput `json:"-", xml:"-"`
}

type metadataUploadSigningCertificateInput struct {
	SDKShapeTraits bool `type:"structure" required:"CertificateBody"`
}

type UploadSigningCertificateOutput struct {
	Certificate *SigningCertificate `type:"structure"`

	metadataUploadSigningCertificateOutput `json:"-", xml:"-"`
}

type metadataUploadSigningCertificateOutput struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"UploadSigningCertificateResult" required:"Certificate"`
}

type User struct {
	ARN              *string    `locationName:"Arn" type:"string"`
	CreateDate       *time.Time `type:"timestamp" timestampFormat:"iso8601"`
	PasswordLastUsed *time.Time `type:"timestamp" timestampFormat:"iso8601"`
	Path             *string    `type:"string"`
	UserID           *string    `locationName:"UserId" type:"string"`
	UserName         *string    `type:"string"`

	metadataUser `json:"-", xml:"-"`
}

type metadataUser struct {
	SDKShapeTraits bool `type:"structure" required:"Path,UserName,UserId,Arn,CreateDate"`
}

type UserDetail struct {
	ARN            *string         `locationName:"Arn" type:"string"`
	CreateDate     *time.Time      `type:"timestamp" timestampFormat:"iso8601"`
	GroupList      []*string       `type:"list"`
	Path           *string         `type:"string"`
	UserID         *string         `locationName:"UserId" type:"string"`
	UserName       *string         `type:"string"`
	UserPolicyList []*PolicyDetail `type:"list"`

	metadataUserDetail `json:"-", xml:"-"`
}

type metadataUserDetail struct {
	SDKShapeTraits bool `type:"structure"`
}

type VirtualMFADevice struct {
	Base32StringSeed []byte     `type:"blob"`
	EnableDate       *time.Time `type:"timestamp" timestampFormat:"iso8601"`
	QRCodePNG        []byte     `type:"blob"`
	SerialNumber     *string    `type:"string"`
	User             *User      `type:"structure"`

	metadataVirtualMFADevice `json:"-", xml:"-"`
}

type metadataVirtualMFADevice struct {
	SDKShapeTraits bool `type:"structure" required:"SerialNumber"`
}